# Generated Files. DO NOT EDIT
# Generated on: 12/17/21 09:04:39
import ctypes
from objc_util import c
from GLConstants import *

DEBUG = 0
loaded = [0, 0]

# GLES Constants
__gles2_gl2ext_h_ = 0x00000001
GL_KHR_blend_equation_advanced = 0x00000001
GL_MULTIPLY_KHR = 0x00009294
GL_SCREEN_KHR = 0x00009295
GL_OVERLAY_KHR = 0x00009296
GL_DARKEN_KHR = 0x00009297
GL_LIGHTEN_KHR = 0x00009298
GL_COLORDODGE_KHR = 0x00009299
GL_COLORBURN_KHR = 0x0000929a
GL_HARDLIGHT_KHR = 0x0000929b
GL_SOFTLIGHT_KHR = 0x0000929c
GL_DIFFERENCE_KHR = 0x0000929e
GL_EXCLUSION_KHR = 0x000092a0
GL_HSL_HUE_KHR = 0x000092ad
GL_HSL_SATURATION_KHR = 0x000092ae
GL_HSL_COLOR_KHR = 0x000092af
GL_HSL_LUMINOSITY_KHR = 0x000092b0
GL_KHR_blend_equation_advanced_coherent = 0x00000001
GL_BLEND_ADVANCED_COHERENT_KHR = 0x00009285
GL_KHR_context_flush_control = 0x00000001
GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x000082fb
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x000082fc
GL_KHR_debug = 0x00000001
GL_SAMPLER = 0x000082e6
GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x00008242
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x00008243
GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x00008244
GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x00008245
GL_DEBUG_SOURCE_API_KHR = 0x00008246
GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x00008247
GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x00008248
GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x00008249
GL_DEBUG_SOURCE_APPLICATION_KHR = 0x0000824a
GL_DEBUG_SOURCE_OTHER_KHR = 0x0000824b
GL_DEBUG_TYPE_ERROR_KHR = 0x0000824c
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x0000824d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x0000824e
GL_DEBUG_TYPE_PORTABILITY_KHR = 0x0000824f
GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x00008250
GL_DEBUG_TYPE_OTHER_KHR = 0x00008251
GL_DEBUG_TYPE_MARKER_KHR = 0x00008268
GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x00008269
GL_DEBUG_TYPE_POP_GROUP_KHR = 0x0000826a
GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x0000826b
GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x0000826c
GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x0000826d
GL_BUFFER_KHR = 0x000082e0
GL_SHADER_KHR = 0x000082e1
GL_PROGRAM_KHR = 0x000082e2
GL_VERTEX_ARRAY_KHR = 0x00008074
GL_QUERY_KHR = 0x000082e3
GL_PROGRAM_PIPELINE_KHR = 0x000082e4
GL_SAMPLER_KHR = 0x000082e6
GL_MAX_LABEL_LENGTH_KHR = 0x000082e8
GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x00009143
GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x00009144
GL_DEBUG_LOGGED_MESSAGES_KHR = 0x00009145
GL_DEBUG_SEVERITY_HIGH_KHR = 0x00009146
GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x00009147
GL_DEBUG_SEVERITY_LOW_KHR = 0x00009148
GL_DEBUG_OUTPUT_KHR = 0x000092e0
GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002
GL_STACK_OVERFLOW_KHR = 0x00000503
GL_STACK_UNDERFLOW_KHR = 0x00000504
GL_KHR_no_error = 0x00000001
GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008
GL_KHR_parallel_shader_compile = 0x00000001
GL_MAX_SHADER_COMPILER_THREADS_KHR = 0x000091b0
GL_COMPLETION_STATUS_KHR = 0x000091b1
GL_KHR_robust_buffer_access_behavior = 0x00000001
GL_KHR_robustness = 0x00000001
GL_CONTEXT_ROBUST_ACCESS_KHR = 0x000090f3
GL_LOSE_CONTEXT_ON_RESET_KHR = 0x00008252
GL_GUILTY_CONTEXT_RESET_KHR = 0x00008253
GL_INNOCENT_CONTEXT_RESET_KHR = 0x00008254
GL_UNKNOWN_CONTEXT_RESET_KHR = 0x00008255
GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x00008256
GL_NO_RESET_NOTIFICATION_KHR = 0x00008261
GL_CONTEXT_LOST_KHR = 0x00000507
GL_KHR_shader_subgroup = 0x00000001
GL_SUBGROUP_SIZE_KHR = 0x00009532
GL_SUBGROUP_SUPPORTED_STAGES_KHR = 0x00009533
GL_SUBGROUP_SUPPORTED_FEATURES_KHR = 0x00009534
GL_SUBGROUP_QUAD_ALL_STAGES_KHR = 0x00009535
GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = 0x00000001
GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = 0x00000002
GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 0x00000004
GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = 0x00000008
GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 0x00000010
GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 0x00000020
GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 0x00000040
GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = 0x00000080
GL_KHR_texture_compression_astc_hdr = 0x00000001
GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x000093b0
GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x000093b1
GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x000093b2
GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x000093b3
GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x000093b4
GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x000093b5
GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x000093b6
GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x000093b7
GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x000093b8
GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x000093b9
GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x000093ba
GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x000093bb
GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x000093bc
GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x000093bd
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x000093d0
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x000093d1
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x000093d2
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x000093d3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x000093d4
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x000093d5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x000093d6
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x000093d7
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x000093d8
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x000093d9
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x000093da
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x000093db
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x000093dc
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x000093dd
GL_KHR_texture_compression_astc_ldr = 0x00000001
GL_KHR_texture_compression_astc_sliced_3d = 0x00000001
GL_OES_EGL_image = 0x00000001
GL_OES_EGL_image_external = 0x00000001
GL_TEXTURE_EXTERNAL_OES = 0x00008d65
GL_TEXTURE_BINDING_EXTERNAL_OES = 0x00008d67
GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x00008d68
GL_SAMPLER_EXTERNAL_OES = 0x00008d66
GL_OES_EGL_image_external_essl3 = 0x00000001
GL_OES_compressed_ETC1_RGB8_sub_texture = 0x00000001
GL_OES_compressed_ETC1_RGB8_texture = 0x00000001
GL_ETC1_RGB8_OES = 0x00008d64
GL_OES_compressed_paletted_texture = 0x00000001
GL_PALETTE4_RGB8_OES = 0x00008b90
GL_PALETTE4_RGBA8_OES = 0x00008b91
GL_PALETTE4_R5_G6_B5_OES = 0x00008b92
GL_PALETTE4_RGBA4_OES = 0x00008b93
GL_PALETTE4_RGB5_A1_OES = 0x00008b94
GL_PALETTE8_RGB8_OES = 0x00008b95
GL_PALETTE8_RGBA8_OES = 0x00008b96
GL_PALETTE8_R5_G6_B5_OES = 0x00008b97
GL_PALETTE8_RGBA4_OES = 0x00008b98
GL_PALETTE8_RGB5_A1_OES = 0x00008b99
GL_OES_copy_image = 0x00000001
GL_OES_depth24 = 0x00000001
GL_DEPTH_COMPONENT24_OES = 0x000081a6
GL_OES_depth32 = 0x00000001
GL_DEPTH_COMPONENT32_OES = 0x000081a7
GL_OES_depth_texture = 0x00000001
GL_OES_draw_buffers_indexed = 0x00000001
GL_MIN = 0x00008007
GL_MAX = 0x00008008
GL_OES_draw_elements_base_vertex = 0x00000001
GL_OES_element_index_uint = 0x00000001
GL_OES_fbo_render_mipmap = 0x00000001
GL_OES_fragment_precision_high = 0x00000001
GL_OES_geometry_point_size = 0x00000001
GL_OES_geometry_shader = 0x00000001
GL_GEOMETRY_SHADER_OES = 0x00008dd9
GL_GEOMETRY_SHADER_BIT_OES = 0x00000004
GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 0x00008916
GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 0x00008917
GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 0x00008918
GL_GEOMETRY_SHADER_INVOCATIONS_OES = 0x0000887f
GL_LAYER_PROVOKING_VERTEX_OES = 0x0000825e
GL_LINES_ADJACENCY_OES = 0x0000000a
GL_LINE_STRIP_ADJACENCY_OES = 0x0000000b
GL_TRIANGLES_ADJACENCY_OES = 0x0000000c
GL_TRIANGLE_STRIP_ADJACENCY_OES = 0x0000000d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x00008ddf
GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 0x00008a2c
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x00008a32
GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 0x00009123
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 0x00009124
GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 0x00008de0
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 0x00008de1
GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 0x00008e5a
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 0x00008c29
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 0x000092cf
GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 0x000092d5
GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 0x000090cd
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 0x000090d7
GL_FIRST_VERTEX_CONVENTION_OES = 0x00008e4d
GL_LAST_VERTEX_CONVENTION_OES = 0x00008e4e
GL_UNDEFINED_VERTEX_OES = 0x00008260
GL_PRIMITIVES_GENERATED_OES = 0x00008c87
GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 0x00009312
GL_MAX_FRAMEBUFFER_LAYERS_OES = 0x00009317
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 0x00008da8
GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 0x00008da7
GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 0x00009309
GL_OES_get_program_binary = 0x00000001
GL_PROGRAM_BINARY_LENGTH_OES = 0x00008741
GL_NUM_PROGRAM_BINARY_FORMATS_OES = 0x000087fe
GL_PROGRAM_BINARY_FORMATS_OES = 0x000087ff
GL_OES_gpu_shader5 = 0x00000001
GL_OES_mapbuffer = 0x00000001
GL_WRITE_ONLY_OES = 0x000088b9
GL_BUFFER_ACCESS_OES = 0x000088bb
GL_BUFFER_MAPPED_OES = 0x000088bc
GL_BUFFER_MAP_POINTER_OES = 0x000088bd
GL_OES_packed_depth_stencil = 0x00000001
GL_DEPTH_STENCIL_OES = 0x000084f9
GL_UNSIGNED_INT_24_8_OES = 0x000084fa
GL_DEPTH24_STENCIL8_OES = 0x000088f0
GL_OES_primitive_bounding_box = 0x00000001
GL_PRIMITIVE_BOUNDING_BOX_OES = 0x000092be
GL_OES_required_internalformat = 0x00000001
GL_ALPHA8_OES = 0x0000803c
GL_DEPTH_COMPONENT16_OES = 0x000081a5
GL_LUMINANCE4_ALPHA4_OES = 0x00008043
GL_LUMINANCE8_ALPHA8_OES = 0x00008045
GL_LUMINANCE8_OES = 0x00008040
GL_RGBA4_OES = 0x00008056
GL_RGB5_A1_OES = 0x00008057
GL_RGB565_OES = 0x00008d62
GL_RGB8_OES = 0x00008051
GL_RGBA8_OES = 0x00008058
GL_RGB10_EXT = 0x00008052
GL_RGB10_A2_EXT = 0x00008059
GL_OES_rgb8_rgba8 = 0x00000001
GL_OES_sample_shading = 0x00000001
GL_SAMPLE_SHADING_OES = 0x00008c36
GL_MIN_SAMPLE_SHADING_VALUE_OES = 0x00008c37
GL_OES_sample_variables = 0x00000001
GL_OES_shader_image_atomic = 0x00000001
GL_OES_shader_io_blocks = 0x00000001
GL_OES_shader_multisample_interpolation = 0x00000001
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x00008e5b
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x00008e5c
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x00008e5d
GL_OES_standard_derivatives = 0x00000001
GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x00008b8b
GL_OES_stencil1 = 0x00000001
GL_STENCIL_INDEX1_OES = 0x00008d46
GL_OES_stencil4 = 0x00000001
GL_STENCIL_INDEX4_OES = 0x00008d47
GL_OES_surfaceless_context = 0x00000001
GL_FRAMEBUFFER_UNDEFINED_OES = 0x00008219
GL_OES_tessellation_point_size = 0x00000001
GL_OES_tessellation_shader = 0x00000001
GL_PATCHES_OES = 0x0000000e
GL_PATCH_VERTICES_OES = 0x00008e72
GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 0x00008e75
GL_TESS_GEN_MODE_OES = 0x00008e76
GL_TESS_GEN_SPACING_OES = 0x00008e77
GL_TESS_GEN_VERTEX_ORDER_OES = 0x00008e78
GL_TESS_GEN_POINT_MODE_OES = 0x00008e79
GL_ISOLINES_OES = 0x00008e7a
GL_QUADS_OES = 0x00000007
GL_FRACTIONAL_ODD_OES = 0x00008e7b
GL_FRACTIONAL_EVEN_OES = 0x00008e7c
GL_MAX_PATCH_VERTICES_OES = 0x00008e7d
GL_MAX_TESS_GEN_LEVEL_OES = 0x00008e7e
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x00008e7f
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x00008e80
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 0x00008e81
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 0x00008e82
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 0x00008e83
GL_MAX_TESS_PATCH_COMPONENTS_OES = 0x00008e84
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 0x00008e85
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 0x00008e86
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 0x00008e89
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 0x00008e8a
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 0x0000886c
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 0x0000886d
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x00008e1e
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x00008e1f
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 0x000092cd
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 0x000092ce
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 0x000092d3
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 0x000092d4
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 0x000090cb
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 0x000090cc
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 0x000090d8
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 0x000090d9
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 0x00008221
GL_IS_PER_PATCH_OES = 0x000092e7
GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 0x00009307
GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 0x00009308
GL_TESS_CONTROL_SHADER_OES = 0x00008e88
GL_TESS_EVALUATION_SHADER_OES = 0x00008e87
GL_TESS_CONTROL_SHADER_BIT_OES = 0x00000008
GL_TESS_EVALUATION_SHADER_BIT_OES = 0x00000010
GL_OES_texture_3D = 0x00000001
GL_TEXTURE_WRAP_R_OES = 0x00008072
GL_TEXTURE_3D_OES = 0x0000806f
GL_TEXTURE_BINDING_3D_OES = 0x0000806a
GL_MAX_3D_TEXTURE_SIZE_OES = 0x00008073
GL_SAMPLER_3D_OES = 0x00008b5f
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x00008cd4
GL_OES_texture_border_clamp = 0x00000001
GL_TEXTURE_BORDER_COLOR_OES = 0x00001004
GL_CLAMP_TO_BORDER_OES = 0x0000812d
GL_OES_texture_buffer = 0x00000001
GL_TEXTURE_BUFFER_OES = 0x00008c2a
GL_TEXTURE_BUFFER_BINDING_OES = 0x00008c2a
GL_MAX_TEXTURE_BUFFER_SIZE_OES = 0x00008c2b
GL_TEXTURE_BINDING_BUFFER_OES = 0x00008c2c
GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 0x00008c2d
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 0x0000919f
GL_SAMPLER_BUFFER_OES = 0x00008dc2
GL_INT_SAMPLER_BUFFER_OES = 0x00008dd0
GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 0x00008dd8
GL_IMAGE_BUFFER_OES = 0x00009051
GL_INT_IMAGE_BUFFER_OES = 0x0000905c
GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 0x00009067
GL_TEXTURE_BUFFER_OFFSET_OES = 0x0000919d
GL_TEXTURE_BUFFER_SIZE_OES = 0x0000919e
GL_OES_texture_compression_astc = 0x00000001
GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 0x000093c0
GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 0x000093c1
GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 0x000093c2
GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 0x000093c3
GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 0x000093c4
GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 0x000093c5
GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 0x000093c6
GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 0x000093c7
GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 0x000093c8
GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 0x000093c9
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x000093e0
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x000093e1
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x000093e2
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x000093e3
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x000093e4
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x000093e5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x000093e6
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x000093e7
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x000093e8
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x000093e9
GL_OES_texture_cube_map_array = 0x00000001
GL_TEXTURE_CUBE_MAP_ARRAY_OES = 0x00009009
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 0x0000900a
GL_SAMPLER_CUBE_MAP_ARRAY_OES = 0x0000900c
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 0x0000900d
GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x0000900e
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x0000900f
GL_IMAGE_CUBE_MAP_ARRAY_OES = 0x00009054
GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x0000905f
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x0000906a
GL_OES_texture_float = 0x00000001
GL_OES_texture_float_linear = 0x00000001
GL_OES_texture_half_float = 0x00000001
GL_HALF_FLOAT_OES = 0x00008d61
GL_OES_texture_half_float_linear = 0x00000001
GL_OES_texture_npot = 0x00000001
GL_OES_texture_stencil8 = 0x00000001
GL_STENCIL_INDEX_OES = 0x00001901
GL_STENCIL_INDEX8_OES = 0x00008d48
GL_OES_texture_storage_multisample_2d_array = 0x00000001
GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x00009102
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x00009105
GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x0000910b
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x0000910c
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x0000910d
GL_OES_texture_view = 0x00000001
GL_TEXTURE_VIEW_MIN_LEVEL_OES = 0x000082db
GL_TEXTURE_VIEW_NUM_LEVELS_OES = 0x000082dc
GL_TEXTURE_VIEW_MIN_LAYER_OES = 0x000082dd
GL_TEXTURE_VIEW_NUM_LAYERS_OES = 0x000082de
GL_TEXTURE_IMMUTABLE_LEVELS = 0x000082df
GL_OES_vertex_array_object = 0x00000001
GL_VERTEX_ARRAY_BINDING_OES = 0x000085b5
GL_OES_vertex_half_float = 0x00000001
GL_OES_vertex_type_10_10_10_2 = 0x00000001
GL_UNSIGNED_INT_10_10_10_2_OES = 0x00008df6
GL_INT_10_10_10_2_OES = 0x00008df7
GL_OES_viewport_array = 0x00000001
GL_MAX_VIEWPORTS_OES = 0x0000825b
GL_VIEWPORT_SUBPIXEL_BITS_OES = 0x0000825c
GL_VIEWPORT_BOUNDS_RANGE_OES = 0x0000825d
GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 0x0000825f
GL_AMD_compressed_3DC_texture = 0x00000001
GL_3DC_X_AMD = 0x000087f9
GL_3DC_XY_AMD = 0x000087fa
GL_AMD_compressed_ATC_texture = 0x00000001
GL_ATC_RGB_AMD = 0x00008c92
GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x00008c93
GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x000087ee
GL_AMD_framebuffer_multisample_advanced = 0x00000001
GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 0x000091b2
GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 0x000091b3
GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 0x000091b4
GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 0x000091b5
GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x000091b6
GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x000091b7
GL_AMD_performance_monitor = 0x00000001
GL_COUNTER_TYPE_AMD = 0x00008bc0
GL_COUNTER_RANGE_AMD = 0x00008bc1
GL_UNSIGNED_INT64_AMD = 0x00008bc2
GL_PERCENTAGE_AMD = 0x00008bc3
GL_PERFMON_RESULT_AVAILABLE_AMD = 0x00008bc4
GL_PERFMON_RESULT_SIZE_AMD = 0x00008bc5
GL_PERFMON_RESULT_AMD = 0x00008bc6
GL_AMD_program_binary_Z400 = 0x00000001
GL_Z400_BINARY_AMD = 0x00008740
GL_ANDROID_extension_pack_es31a = 0x00000001
GL_ANGLE_depth_texture = 0x00000001
GL_ANGLE_framebuffer_blit = 0x00000001
GL_READ_FRAMEBUFFER_ANGLE = 0x00008ca8
GL_DRAW_FRAMEBUFFER_ANGLE = 0x00008ca9
GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x00008ca6
GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x00008caa
GL_ANGLE_framebuffer_multisample = 0x00000001
GL_RENDERBUFFER_SAMPLES_ANGLE = 0x00008cab
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x00008d56
GL_MAX_SAMPLES_ANGLE = 0x00008d57
GL_ANGLE_instanced_arrays = 0x00000001
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x000088fe
GL_ANGLE_pack_reverse_row_order = 0x00000001
GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x000093a4
GL_ANGLE_program_binary = 0x00000001
GL_PROGRAM_BINARY_ANGLE = 0x000093a6
GL_ANGLE_texture_compression_dxt3 = 0x00000001
GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x000083f2
GL_ANGLE_texture_compression_dxt5 = 0x00000001
GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x000083f3
GL_ANGLE_texture_usage = 0x00000001
GL_TEXTURE_USAGE_ANGLE = 0x000093a2
GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x000093a3
GL_ANGLE_translated_shader_source = 0x00000001
GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x000093a0
GL_APPLE_clip_distance = 0x00000001
GL_MAX_CLIP_DISTANCES_APPLE = 0x00000d32
GL_CLIP_DISTANCE0_APPLE = 0x00003000
GL_CLIP_DISTANCE1_APPLE = 0x00003001
GL_CLIP_DISTANCE2_APPLE = 0x00003002
GL_CLIP_DISTANCE3_APPLE = 0x00003003
GL_CLIP_DISTANCE4_APPLE = 0x00003004
GL_CLIP_DISTANCE5_APPLE = 0x00003005
GL_CLIP_DISTANCE6_APPLE = 0x00003006
GL_CLIP_DISTANCE7_APPLE = 0x00003007
GL_APPLE_color_buffer_packed_float = 0x00000001
GL_APPLE_copy_texture_levels = 0x00000001
GL_APPLE_framebuffer_multisample = 0x00000001
GL_RENDERBUFFER_SAMPLES_APPLE = 0x00008cab
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x00008d56
GL_MAX_SAMPLES_APPLE = 0x00008d57
GL_READ_FRAMEBUFFER_APPLE = 0x00008ca8
GL_DRAW_FRAMEBUFFER_APPLE = 0x00008ca9
GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x00008ca6
GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x00008caa
GL_APPLE_rgb_422 = 0x00000001
GL_RGB_422_APPLE = 0x00008a1f
GL_UNSIGNED_SHORT_8_8_APPLE = 0x000085ba
GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x000085bb
GL_RGB_RAW_422_APPLE = 0x00008a51
GL_APPLE_sync = 0x00000001
GL_SYNC_OBJECT_APPLE = 0x00008a53
GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x00009111
GL_OBJECT_TYPE_APPLE = 0x00009112
GL_SYNC_CONDITION_APPLE = 0x00009113
GL_SYNC_STATUS_APPLE = 0x00009114
GL_SYNC_FLAGS_APPLE = 0x00009115
GL_SYNC_FENCE_APPLE = 0x00009116
GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x00009117
GL_UNSIGNALED_APPLE = 0x00009118
GL_SIGNALED_APPLE = 0x00009119
GL_ALREADY_SIGNALED_APPLE = 0x0000911a
GL_TIMEOUT_EXPIRED_APPLE = 0x0000911b
GL_CONDITION_SATISFIED_APPLE = 0x0000911c
GL_WAIT_FAILED_APPLE = 0x0000911d
GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001
GL_TIMEOUT_IGNORED_APPLE = 0xffffffffffffffff
GL_APPLE_texture_format_BGRA8888 = 0x00000001
GL_BGRA_EXT = 0x000080e1
GL_BGRA8_EXT = 0x000093a1
GL_APPLE_texture_max_level = 0x00000001
GL_TEXTURE_MAX_LEVEL_APPLE = 0x0000813d
GL_APPLE_texture_packed_float = 0x00000001
GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x00008c3b
GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 0x00008c3e
GL_R11F_G11F_B10F_APPLE = 0x00008c3a
GL_RGB9_E5_APPLE = 0x00008c3d
GL_ARM_mali_program_binary = 0x00000001
GL_MALI_PROGRAM_BINARY_ARM = 0x00008f61
GL_ARM_mali_shader_binary = 0x00000001
GL_MALI_SHADER_BINARY_ARM = 0x00008f60
GL_ARM_rgba8 = 0x00000001
GL_ARM_shader_framebuffer_fetch = 0x00000001
GL_FETCH_PER_SAMPLE_ARM = 0x00008f65
GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x00008f66
GL_ARM_shader_framebuffer_fetch_depth_stencil = 0x00000001
GL_ARM_texture_unnormalized_coordinates = 0x00000001
GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x00008f6a
GL_DMP_program_binary = 0x00000001
GL_SMAPHS30_PROGRAM_BINARY_DMP = 0x00009251
GL_SMAPHS_PROGRAM_BINARY_DMP = 0x00009252
GL_DMP_PROGRAM_BINARY_DMP = 0x00009253
GL_DMP_shader_binary = 0x00000001
GL_SHADER_BINARY_DMP = 0x00009250
GL_EXT_EGL_image_array = 0x00000001
GL_EXT_EGL_image_storage = 0x00000001
GL_EXT_EGL_image_storage_compression = 0x00000001
GL_SURFACE_COMPRESSION_EXT = 0x000096c0
GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT = 0x000096c1
GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 0x000096c2
GL_EXT_YUV_target = 0x00000001
GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 0x00008be7
GL_EXT_base_instance = 0x00000001
GL_EXT_blend_func_extended = 0x00000001
GL_SRC1_COLOR_EXT = 0x000088f9
GL_SRC1_ALPHA_EXT = 0x00008589
GL_ONE_MINUS_SRC1_COLOR_EXT = 0x000088fa
GL_ONE_MINUS_SRC1_ALPHA_EXT = 0x000088fb
GL_SRC_ALPHA_SATURATE_EXT = 0x00000308
GL_LOCATION_INDEX_EXT = 0x0000930f
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 0x000088fc
GL_EXT_blend_minmax = 0x00000001
GL_MIN_EXT = 0x00008007
GL_MAX_EXT = 0x00008008
GL_EXT_buffer_storage = 0x00000001
GL_MAP_READ_BIT = 0x00000001
GL_MAP_WRITE_BIT = 0x00000002
GL_MAP_PERSISTENT_BIT_EXT = 0x00000040
GL_MAP_COHERENT_BIT_EXT = 0x00000080
GL_DYNAMIC_STORAGE_BIT_EXT = 0x00000100
GL_CLIENT_STORAGE_BIT_EXT = 0x00000200
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 0x00004000
GL_BUFFER_IMMUTABLE_STORAGE_EXT = 0x0000821f
GL_BUFFER_STORAGE_FLAGS_EXT = 0x00008220
GL_EXT_clear_texture = 0x00000001
GL_EXT_clip_control = 0x00000001
GL_LOWER_LEFT_EXT = 0x00008ca1
GL_UPPER_LEFT_EXT = 0x00008ca2
GL_NEGATIVE_ONE_TO_ONE_EXT = 0x0000935e
GL_ZERO_TO_ONE_EXT = 0x0000935f
GL_CLIP_ORIGIN_EXT = 0x0000935c
GL_CLIP_DEPTH_MODE_EXT = 0x0000935d
GL_EXT_clip_cull_distance = 0x00000001
GL_MAX_CLIP_DISTANCES_EXT = 0x00000d32
GL_MAX_CULL_DISTANCES_EXT = 0x000082f9
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 0x000082fa
GL_CLIP_DISTANCE0_EXT = 0x00003000
GL_CLIP_DISTANCE1_EXT = 0x00003001
GL_CLIP_DISTANCE2_EXT = 0x00003002
GL_CLIP_DISTANCE3_EXT = 0x00003003
GL_CLIP_DISTANCE4_EXT = 0x00003004
GL_CLIP_DISTANCE5_EXT = 0x00003005
GL_CLIP_DISTANCE6_EXT = 0x00003006
GL_CLIP_DISTANCE7_EXT = 0x00003007
GL_EXT_color_buffer_float = 0x00000001
GL_EXT_color_buffer_half_float = 0x00000001
GL_RGBA16F_EXT = 0x0000881a
GL_RGB16F_EXT = 0x0000881b
GL_RG16F_EXT = 0x0000822f
GL_R16F_EXT = 0x0000822d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x00008211
GL_UNSIGNED_NORMALIZED_EXT = 0x00008c17
GL_EXT_conservative_depth = 0x00000001
GL_EXT_copy_image = 0x00000001
GL_EXT_debug_label = 0x00000001
GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x00008a4f
GL_PROGRAM_OBJECT_EXT = 0x00008b40
GL_SHADER_OBJECT_EXT = 0x00008b48
GL_BUFFER_OBJECT_EXT = 0x00009151
GL_QUERY_OBJECT_EXT = 0x00009153
GL_VERTEX_ARRAY_OBJECT_EXT = 0x00009154
GL_TRANSFORM_FEEDBACK = 0x00008e22
GL_EXT_debug_marker = 0x00000001
GL_EXT_depth_clamp = 0x00000001
GL_DEPTH_CLAMP_EXT = 0x0000864f
GL_EXT_discard_framebuffer = 0x00000001
GL_COLOR_EXT = 0x00001800
GL_DEPTH_EXT = 0x00001801
GL_STENCIL_EXT = 0x00001802
GL_EXT_disjoint_timer_query = 0x00000001
GL_QUERY_COUNTER_BITS_EXT = 0x00008864
GL_CURRENT_QUERY_EXT = 0x00008865
GL_QUERY_RESULT_EXT = 0x00008866
GL_QUERY_RESULT_AVAILABLE_EXT = 0x00008867
GL_TIME_ELAPSED_EXT = 0x000088bf
GL_TIMESTAMP_EXT = 0x00008e28
GL_GPU_DISJOINT_EXT = 0x00008fbb
GL_EXT_draw_buffers = 0x00000001
GL_MAX_COLOR_ATTACHMENTS_EXT = 0x00008cdf
GL_MAX_DRAW_BUFFERS_EXT = 0x00008824
GL_DRAW_BUFFER0_EXT = 0x00008825
GL_DRAW_BUFFER1_EXT = 0x00008826
GL_DRAW_BUFFER2_EXT = 0x00008827
GL_DRAW_BUFFER3_EXT = 0x00008828
GL_DRAW_BUFFER4_EXT = 0x00008829
GL_DRAW_BUFFER5_EXT = 0x0000882a
GL_DRAW_BUFFER6_EXT = 0x0000882b
GL_DRAW_BUFFER7_EXT = 0x0000882c
GL_DRAW_BUFFER8_EXT = 0x0000882d
GL_DRAW_BUFFER9_EXT = 0x0000882e
GL_DRAW_BUFFER10_EXT = 0x0000882f
GL_DRAW_BUFFER11_EXT = 0x00008830
GL_DRAW_BUFFER12_EXT = 0x00008831
GL_DRAW_BUFFER13_EXT = 0x00008832
GL_DRAW_BUFFER14_EXT = 0x00008833
GL_DRAW_BUFFER15_EXT = 0x00008834
GL_COLOR_ATTACHMENT0_EXT = 0x00008ce0
GL_COLOR_ATTACHMENT1_EXT = 0x00008ce1
GL_COLOR_ATTACHMENT2_EXT = 0x00008ce2
GL_COLOR_ATTACHMENT3_EXT = 0x00008ce3
GL_COLOR_ATTACHMENT4_EXT = 0x00008ce4
GL_COLOR_ATTACHMENT5_EXT = 0x00008ce5
GL_COLOR_ATTACHMENT6_EXT = 0x00008ce6
GL_COLOR_ATTACHMENT7_EXT = 0x00008ce7
GL_COLOR_ATTACHMENT8_EXT = 0x00008ce8
GL_COLOR_ATTACHMENT9_EXT = 0x00008ce9
GL_COLOR_ATTACHMENT10_EXT = 0x00008cea
GL_COLOR_ATTACHMENT11_EXT = 0x00008ceb
GL_COLOR_ATTACHMENT12_EXT = 0x00008cec
GL_COLOR_ATTACHMENT13_EXT = 0x00008ced
GL_COLOR_ATTACHMENT14_EXT = 0x00008cee
GL_COLOR_ATTACHMENT15_EXT = 0x00008cef
GL_EXT_draw_buffers_indexed = 0x00000001
GL_EXT_draw_elements_base_vertex = 0x00000001
GL_EXT_draw_instanced = 0x00000001
GL_EXT_draw_transform_feedback = 0x00000001
GL_EXT_external_buffer = 0x00000001
GL_EXT_float_blend = 0x00000001
GL_EXT_geometry_point_size = 0x00000001
GL_EXT_geometry_shader = 0x00000001
GL_GEOMETRY_SHADER_EXT = 0x00008dd9
GL_GEOMETRY_SHADER_BIT_EXT = 0x00000004
GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x00008916
GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x00008917
GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x00008918
GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x0000887f
GL_LAYER_PROVOKING_VERTEX_EXT = 0x0000825e
GL_LINES_ADJACENCY_EXT = 0x0000000a
GL_LINE_STRIP_ADJACENCY_EXT = 0x0000000b
GL_TRIANGLES_ADJACENCY_EXT = 0x0000000c
GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x0000000d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x00008ddf
GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x00008a2c
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x00008a32
GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x00009123
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x00009124
GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x00008de0
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x00008de1
GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x00008e5a
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x00008c29
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x000092cf
GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x000092d5
GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x000090cd
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x000090d7
GL_FIRST_VERTEX_CONVENTION_EXT = 0x00008e4d
GL_LAST_VERTEX_CONVENTION_EXT = 0x00008e4e
GL_UNDEFINED_VERTEX_EXT = 0x00008260
GL_PRIMITIVES_GENERATED_EXT = 0x00008c87
GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x00009312
GL_MAX_FRAMEBUFFER_LAYERS_EXT = 0x00009317
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x00008da8
GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x00008da7
GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x00009309
GL_EXT_gpu_shader5 = 0x00000001
GL_EXT_instanced_arrays = 0x00000001
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 0x000088fe
GL_EXT_map_buffer_range = 0x00000001
GL_MAP_READ_BIT_EXT = 0x00000001
GL_MAP_WRITE_BIT_EXT = 0x00000002
GL_MAP_INVALIDATE_RANGE_BIT_EXT = 0x00000004
GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 0x00000008
GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 0x00000010
GL_MAP_UNSYNCHRONIZED_BIT_EXT = 0x00000020
GL_EXT_memory_object = 0x00000001
GL_TEXTURE_TILING_EXT = 0x00009580
GL_DEDICATED_MEMORY_OBJECT_EXT = 0x00009581
GL_PROTECTED_MEMORY_OBJECT_EXT = 0x0000959b
GL_NUM_TILING_TYPES_EXT = 0x00009582
GL_TILING_TYPES_EXT = 0x00009583
GL_OPTIMAL_TILING_EXT = 0x00009584
GL_LINEAR_TILING_EXT = 0x00009585
GL_NUM_DEVICE_UUIDS_EXT = 0x00009596
GL_DEVICE_UUID_EXT = 0x00009597
GL_DRIVER_UUID_EXT = 0x00009598
GL_UUID_SIZE_EXT = 0x00000010
GL_EXT_memory_object_fd = 0x00000001
GL_HANDLE_TYPE_OPAQUE_FD_EXT = 0x00009586
GL_EXT_memory_object_win32 = 0x00000001
GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 0x00009587
GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 0x00009588
GL_DEVICE_LUID_EXT = 0x00009599
GL_DEVICE_NODE_MASK_EXT = 0x0000959a
GL_LUID_SIZE_EXT = 0x00000008
GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 0x00009589
GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 0x0000958a
GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 0x0000958b
GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 0x0000958c
GL_EXT_multi_draw_arrays = 0x00000001
GL_EXT_multi_draw_indirect = 0x00000001
GL_EXT_multisampled_compatibility = 0x00000001
GL_MULTISAMPLE_EXT = 0x0000809d
GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x0000809f
GL_EXT_multisampled_render_to_texture = 0x00000001
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x00008d6c
GL_RENDERBUFFER_SAMPLES_EXT = 0x00008cab
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x00008d56
GL_MAX_SAMPLES_EXT = 0x00008d57
GL_EXT_multisampled_render_to_texture2 = 0x00000001
GL_EXT_multiview_draw_buffers = 0x00000001
GL_COLOR_ATTACHMENT_EXT = 0x000090f0
GL_MULTIVIEW_EXT = 0x000090f1
GL_DRAW_BUFFER_EXT = 0x00000c01
GL_READ_BUFFER_EXT = 0x00000c02
GL_MAX_MULTIVIEW_BUFFERS_EXT = 0x000090f2
GL_EXT_multiview_tessellation_geometry_shader = 0x00000001
GL_EXT_multiview_texture_multisample = 0x00000001
GL_EXT_multiview_timer_query = 0x00000001
GL_EXT_occlusion_query_boolean = 0x00000001
GL_ANY_SAMPLES_PASSED_EXT = 0x00008c2f
GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 0x00008d6a
GL_EXT_polygon_offset_clamp = 0x00000001
GL_POLYGON_OFFSET_CLAMP_EXT = 0x00008e1b
GL_EXT_post_depth_coverage = 0x00000001
GL_EXT_primitive_bounding_box = 0x00000001
GL_PRIMITIVE_BOUNDING_BOX_EXT = 0x000092be
GL_EXT_protected_textures = 0x00000001
GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 0x00000010
GL_TEXTURE_PROTECTED_EXT = 0x00008bfa
GL_EXT_pvrtc_sRGB = 0x00000001
GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x00008a54
GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x00008a55
GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x00008a56
GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x00008a57
GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x000093f0
GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x000093f1
GL_EXT_raster_multisample = 0x00000001
GL_RASTER_MULTISAMPLE_EXT = 0x00009327
GL_RASTER_SAMPLES_EXT = 0x00009328
GL_MAX_RASTER_SAMPLES_EXT = 0x00009329
GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x0000932a
GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x0000932b
GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x0000932c
GL_EXT_read_format_bgra = 0x00000001
GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x00008365
GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x00008366
GL_EXT_render_snorm = 0x00000001
GL_R8_SNORM = 0x00008f94
GL_RG8_SNORM = 0x00008f95
GL_RGBA8_SNORM = 0x00008f97
GL_R16_SNORM_EXT = 0x00008f98
GL_RG16_SNORM_EXT = 0x00008f99
GL_RGBA16_SNORM_EXT = 0x00008f9b
GL_EXT_robustness = 0x00000001
GL_GUILTY_CONTEXT_RESET_EXT = 0x00008253
GL_INNOCENT_CONTEXT_RESET_EXT = 0x00008254
GL_UNKNOWN_CONTEXT_RESET_EXT = 0x00008255
GL_CONTEXT_ROBUST_ACCESS_EXT = 0x000090f3
GL_RESET_NOTIFICATION_STRATEGY_EXT = 0x00008256
GL_LOSE_CONTEXT_ON_RESET_EXT = 0x00008252
GL_NO_RESET_NOTIFICATION_EXT = 0x00008261
GL_EXT_sRGB = 0x00000001
GL_SRGB_EXT = 0x00008c40
GL_SRGB_ALPHA_EXT = 0x00008c42
GL_SRGB8_ALPHA8_EXT = 0x00008c43
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x00008210
GL_EXT_sRGB_write_control = 0x00000001
GL_FRAMEBUFFER_SRGB_EXT = 0x00008db9
GL_EXT_semaphore = 0x00000001
GL_LAYOUT_GENERAL_EXT = 0x0000958d
GL_LAYOUT_COLOR_ATTACHMENT_EXT = 0x0000958e
GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 0x0000958f
GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 0x00009590
GL_LAYOUT_SHADER_READ_ONLY_EXT = 0x00009591
GL_LAYOUT_TRANSFER_SRC_EXT = 0x00009592
GL_LAYOUT_TRANSFER_DST_EXT = 0x00009593
GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 0x00009530
GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 0x00009531
GL_EXT_semaphore_fd = 0x00000001
GL_EXT_semaphore_win32 = 0x00000001
GL_HANDLE_TYPE_D3D12_FENCE_EXT = 0x00009594
GL_D3D12_FENCE_VALUE_EXT = 0x00009595
GL_EXT_separate_shader_objects = 0x00000001
GL_ACTIVE_PROGRAM_EXT = 0x00008259
GL_VERTEX_SHADER_BIT_EXT = 0x00000001
GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002
GL_ALL_SHADER_BITS_EXT = 0xffffffff
GL_PROGRAM_SEPARABLE_EXT = 0x00008258
GL_PROGRAM_PIPELINE_BINDING_EXT = 0x0000825a
GL_EXT_shader_framebuffer_fetch = 0x00000001
GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x00008a52
GL_EXT_shader_framebuffer_fetch_non_coherent = 0x00000001
GL_EXT_shader_group_vote = 0x00000001
GL_EXT_shader_implicit_conversions = 0x00000001
GL_EXT_shader_integer_mix = 0x00000001
GL_EXT_shader_io_blocks = 0x00000001
GL_EXT_shader_non_constant_global_initializers = 0x00000001
GL_EXT_shader_pixel_local_storage = 0x00000001
GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x00008f63
GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x00008f67
GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 0x00008f64
GL_EXT_shader_pixel_local_storage2 = 0x00000001
GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 0x00009650
GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 0x00009651
GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 0x00009652
GL_EXT_shader_texture_lod = 0x00000001
GL_EXT_shadow_samplers = 0x00000001
GL_TEXTURE_COMPARE_MODE_EXT = 0x0000884c
GL_TEXTURE_COMPARE_FUNC_EXT = 0x0000884d
GL_COMPARE_REF_TO_TEXTURE_EXT = 0x0000884e
GL_SAMPLER_2D_SHADOW_EXT = 0x00008b62
GL_EXT_sparse_texture = 0x00000001
GL_TEXTURE_SPARSE_EXT = 0x000091a6
GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 0x000091a7
GL_NUM_SPARSE_LEVELS_EXT = 0x000091aa
GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 0x000091a8
GL_VIRTUAL_PAGE_SIZE_X_EXT = 0x00009195
GL_VIRTUAL_PAGE_SIZE_Y_EXT = 0x00009196
GL_VIRTUAL_PAGE_SIZE_Z_EXT = 0x00009197
GL_TEXTURE_2D_ARRAY = 0x00008c1a
GL_TEXTURE_3D = 0x0000806f
GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 0x00009198
GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 0x00009199
GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 0x0000919a
GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 0x000091a9
GL_EXT_sparse_texture2 = 0x00000001
GL_EXT_tessellation_point_size = 0x00000001
GL_EXT_tessellation_shader = 0x00000001
GL_PATCHES_EXT = 0x0000000e
GL_PATCH_VERTICES_EXT = 0x00008e72
GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x00008e75
GL_TESS_GEN_MODE_EXT = 0x00008e76
GL_TESS_GEN_SPACING_EXT = 0x00008e77
GL_TESS_GEN_VERTEX_ORDER_EXT = 0x00008e78
GL_TESS_GEN_POINT_MODE_EXT = 0x00008e79
GL_ISOLINES_EXT = 0x00008e7a
GL_QUADS_EXT = 0x00000007
GL_FRACTIONAL_ODD_EXT = 0x00008e7b
GL_FRACTIONAL_EVEN_EXT = 0x00008e7c
GL_MAX_PATCH_VERTICES_EXT = 0x00008e7d
GL_MAX_TESS_GEN_LEVEL_EXT = 0x00008e7e
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x00008e7f
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x00008e80
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x00008e81
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x00008e82
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x00008e83
GL_MAX_TESS_PATCH_COMPONENTS_EXT = 0x00008e84
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x00008e85
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x00008e86
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x00008e89
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x00008e8a
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x0000886c
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x0000886d
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x00008e1e
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x00008e1f
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x000092cd
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x000092ce
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x000092d3
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x000092d4
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x000090cb
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x000090cc
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x000090d8
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x000090d9
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x00008221
GL_IS_PER_PATCH_EXT = 0x000092e7
GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x00009307
GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x00009308
GL_TESS_CONTROL_SHADER_EXT = 0x00008e88
GL_TESS_EVALUATION_SHADER_EXT = 0x00008e87
GL_TESS_CONTROL_SHADER_BIT_EXT = 0x00000008
GL_TESS_EVALUATION_SHADER_BIT_EXT = 0x00000010
GL_EXT_texture_border_clamp = 0x00000001
GL_TEXTURE_BORDER_COLOR_EXT = 0x00001004
GL_CLAMP_TO_BORDER_EXT = 0x0000812d
GL_EXT_texture_buffer = 0x00000001
GL_TEXTURE_BUFFER_EXT = 0x00008c2a
GL_TEXTURE_BUFFER_BINDING_EXT = 0x00008c2a
GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x00008c2b
GL_TEXTURE_BINDING_BUFFER_EXT = 0x00008c2c
GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x00008c2d
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x0000919f
GL_SAMPLER_BUFFER_EXT = 0x00008dc2
GL_INT_SAMPLER_BUFFER_EXT = 0x00008dd0
GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x00008dd8
GL_IMAGE_BUFFER_EXT = 0x00009051
GL_INT_IMAGE_BUFFER_EXT = 0x0000905c
GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x00009067
GL_TEXTURE_BUFFER_OFFSET_EXT = 0x0000919d
GL_TEXTURE_BUFFER_SIZE_EXT = 0x0000919e
GL_EXT_texture_compression_astc_decode_mode = 0x00000001
GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = 0x00008f69
GL_EXT_texture_compression_bptc = 0x00000001
GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x00008e8c
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x00008e8d
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x00008e8e
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x00008e8f
GL_EXT_texture_compression_dxt1 = 0x00000001
GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x000083f0
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x000083f1
GL_EXT_texture_compression_rgtc = 0x00000001
GL_COMPRESSED_RED_RGTC1_EXT = 0x00008dbb
GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x00008dbc
GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x00008dbd
GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x00008dbe
GL_EXT_texture_compression_s3tc = 0x00000001
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x000083f2
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x000083f3
GL_EXT_texture_compression_s3tc_srgb = 0x00000001
GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x00008c4c
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x00008c4d
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x00008c4e
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x00008c4f
GL_EXT_texture_cube_map_array = 0x00000001
GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 0x00009009
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x0000900a
GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x0000900c
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x0000900d
GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x0000900e
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x0000900f
GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x00009054
GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x0000905f
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x0000906a
GL_EXT_texture_filter_anisotropic = 0x00000001
GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x000084fe
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x000084ff
GL_EXT_texture_filter_minmax = 0x00000001
GL_TEXTURE_REDUCTION_MODE_EXT = 0x00009366
GL_WEIGHTED_AVERAGE_EXT = 0x00009367
GL_EXT_texture_format_BGRA8888 = 0x00000001
GL_EXT_texture_format_sRGB_override = 0x00000001
GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = 0x00008fbf
GL_EXT_texture_mirror_clamp_to_edge = 0x00000001
GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x00008743
GL_EXT_texture_norm16 = 0x00000001
GL_R16_EXT = 0x0000822a
GL_RG16_EXT = 0x0000822c
GL_RGBA16_EXT = 0x0000805b
GL_RGB16_EXT = 0x00008054
GL_RGB16_SNORM_EXT = 0x00008f9a
GL_EXT_texture_query_lod = 0x00000001
GL_EXT_texture_rg = 0x00000001
GL_RED_EXT = 0x00001903
GL_RG_EXT = 0x00008227
GL_R8_EXT = 0x00008229
GL_RG8_EXT = 0x0000822b
GL_EXT_texture_sRGB_R8 = 0x00000001
GL_SR8_EXT = 0x00008fbd
GL_EXT_texture_sRGB_RG8 = 0x00000001
GL_SRG8_EXT = 0x00008fbe
GL_EXT_texture_sRGB_decode = 0x00000001
GL_TEXTURE_SRGB_DECODE_EXT = 0x00008a48
GL_DECODE_EXT = 0x00008a49
GL_SKIP_DECODE_EXT = 0x00008a4a
GL_EXT_texture_shadow_lod = 0x00000001
GL_EXT_texture_storage = 0x00000001
GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 0x0000912f
GL_ALPHA8_EXT = 0x0000803c
GL_LUMINANCE8_EXT = 0x00008040
GL_LUMINANCE8_ALPHA8_EXT = 0x00008045
GL_RGBA32F_EXT = 0x00008814
GL_RGB32F_EXT = 0x00008815
GL_ALPHA32F_EXT = 0x00008816
GL_LUMINANCE32F_EXT = 0x00008818
GL_LUMINANCE_ALPHA32F_EXT = 0x00008819
GL_ALPHA16F_EXT = 0x0000881c
GL_LUMINANCE16F_EXT = 0x0000881e
GL_LUMINANCE_ALPHA16F_EXT = 0x0000881f
GL_R32F_EXT = 0x0000822e
GL_RG32F_EXT = 0x00008230
GL_EXT_texture_storage_compression = 0x00000001
GL_NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT = 0x00008f6e
GL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT = 0x000096c4
GL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT = 0x000096c5
GL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT = 0x000096c6
GL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT = 0x000096c7
GL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT = 0x000096c8
GL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT = 0x000096c9
GL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT = 0x000096ca
GL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT = 0x000096cb
GL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT = 0x000096cc
GL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT = 0x000096cd
GL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT = 0x000096ce
GL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT = 0x000096cf
GL_EXT_texture_type_2_10_10_10_REV = 0x00000001
GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x00008368
GL_EXT_texture_view = 0x00000001
GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 0x000082db
GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 0x000082dc
GL_TEXTURE_VIEW_MIN_LAYER_EXT = 0x000082dd
GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 0x000082de
GL_EXT_unpack_subimage = 0x00000001
GL_UNPACK_ROW_LENGTH_EXT = 0x00000cf2
GL_UNPACK_SKIP_ROWS_EXT = 0x00000cf3
GL_UNPACK_SKIP_PIXELS_EXT = 0x00000cf4
GL_EXT_win32_keyed_mutex = 0x00000001
GL_EXT_window_rectangles = 0x00000001
GL_INCLUSIVE_EXT = 0x00008f10
GL_EXCLUSIVE_EXT = 0x00008f11
GL_WINDOW_RECTANGLE_EXT = 0x00008f12
GL_WINDOW_RECTANGLE_MODE_EXT = 0x00008f13
GL_MAX_WINDOW_RECTANGLES_EXT = 0x00008f14
GL_NUM_WINDOW_RECTANGLES_EXT = 0x00008f15
GL_FJ_shader_binary_GCCSO = 0x00000001
GL_GCCSO_SHADER_BINARY_FJ = 0x00009260
GL_IMG_bindless_texture = 0x00000001
GL_IMG_framebuffer_downsample = 0x00000001
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 0x0000913c
GL_NUM_DOWNSAMPLE_SCALES_IMG = 0x0000913d
GL_DOWNSAMPLE_SCALES_IMG = 0x0000913e
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 0x0000913f
GL_IMG_multisampled_render_to_texture = 0x00000001
GL_RENDERBUFFER_SAMPLES_IMG = 0x00009133
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x00009134
GL_MAX_SAMPLES_IMG = 0x00009135
GL_TEXTURE_SAMPLES_IMG = 0x00009136
GL_IMG_program_binary = 0x00000001
GL_SGX_PROGRAM_BINARY_IMG = 0x00009130
GL_IMG_read_format = 0x00000001
GL_BGRA_IMG = 0x000080e1
GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x00008365
GL_IMG_shader_binary = 0x00000001
GL_SGX_BINARY_IMG = 0x00008c0a
GL_IMG_texture_compression_pvrtc = 0x00000001
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x00008c00
GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x00008c01
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x00008c02
GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x00008c03
GL_IMG_texture_compression_pvrtc2 = 0x00000001
GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x00009137
GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x00009138
GL_IMG_texture_filter_cubic = 0x00000001
GL_CUBIC_IMG = 0x00009139
GL_CUBIC_MIPMAP_NEAREST_IMG = 0x0000913a
GL_CUBIC_MIPMAP_LINEAR_IMG = 0x0000913b
GL_INTEL_blackhole_render = 0x00000001
GL_BLACKHOLE_RENDER_INTEL = 0x000083fc
GL_INTEL_conservative_rasterization = 0x00000001
GL_CONSERVATIVE_RASTERIZATION_INTEL = 0x000083fe
GL_INTEL_framebuffer_CMAA = 0x00000001
GL_INTEL_performance_query = 0x00000001
GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000
GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001
GL_PERFQUERY_WAIT_INTEL = 0x000083fb
GL_PERFQUERY_FLUSH_INTEL = 0x000083fa
GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x000083f9
GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x000094f0
GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x000094f1
GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x000094f2
GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x000094f3
GL_PERFQUERY_COUNTER_RAW_INTEL = 0x000094f4
GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x000094f5
GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x000094f8
GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x000094f9
GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x000094fa
GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x000094fb
GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x000094fc
GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x000094fd
GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x000094fe
GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x000094ff
GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x00009500
GL_MESA_bgra = 0x00000001
GL_BGR_EXT = 0x000080e0
GL_MESA_framebuffer_flip_x = 0x00000001
GL_FRAMEBUFFER_FLIP_X_MESA = 0x00008bbc
GL_MESA_framebuffer_flip_y = 0x00000001
GL_FRAMEBUFFER_FLIP_Y_MESA = 0x00008bbb
GL_MESA_framebuffer_swap_xy = 0x00000001
GL_FRAMEBUFFER_SWAP_XY_MESA = 0x00008bbd
GL_MESA_program_binary_formats = 0x00000001
GL_PROGRAM_BINARY_FORMAT_MESA = 0x0000875f
GL_MESA_shader_integer_functions = 0x00000001
GL_NVX_blend_equation_advanced_multi_draw_buffers = 0x00000001
GL_NV_bindless_texture = 0x00000001
GL_NV_blend_equation_advanced = 0x00000001
GL_BLEND_OVERLAP_NV = 0x00009281
GL_BLEND_PREMULTIPLIED_SRC_NV = 0x00009280
GL_BLUE_NV = 0x00001905
GL_COLORBURN_NV = 0x0000929a
GL_COLORDODGE_NV = 0x00009299
GL_CONJOINT_NV = 0x00009284
GL_CONTRAST_NV = 0x000092a1
GL_DARKEN_NV = 0x00009297
GL_DIFFERENCE_NV = 0x0000929e
GL_DISJOINT_NV = 0x00009283
GL_DST_ATOP_NV = 0x0000928f
GL_DST_IN_NV = 0x0000928b
GL_DST_NV = 0x00009287
GL_DST_OUT_NV = 0x0000928d
GL_DST_OVER_NV = 0x00009289
GL_EXCLUSION_NV = 0x000092a0
GL_GREEN_NV = 0x00001904
GL_HARDLIGHT_NV = 0x0000929b
GL_HARDMIX_NV = 0x000092a9
GL_HSL_COLOR_NV = 0x000092af
GL_HSL_HUE_NV = 0x000092ad
GL_HSL_LUMINOSITY_NV = 0x000092b0
GL_HSL_SATURATION_NV = 0x000092ae
GL_INVERT_OVG_NV = 0x000092b4
GL_INVERT_RGB_NV = 0x000092a3
GL_LIGHTEN_NV = 0x00009298
GL_LINEARBURN_NV = 0x000092a5
GL_LINEARDODGE_NV = 0x000092a4
GL_LINEARLIGHT_NV = 0x000092a7
GL_MINUS_CLAMPED_NV = 0x000092b3
GL_MINUS_NV = 0x0000929f
GL_MULTIPLY_NV = 0x00009294
GL_OVERLAY_NV = 0x00009296
GL_PINLIGHT_NV = 0x000092a8
GL_PLUS_CLAMPED_ALPHA_NV = 0x000092b2
GL_PLUS_CLAMPED_NV = 0x000092b1
GL_PLUS_DARKER_NV = 0x00009292
GL_PLUS_NV = 0x00009291
GL_RED_NV = 0x00001903
GL_SCREEN_NV = 0x00009295
GL_SOFTLIGHT_NV = 0x0000929c
GL_SRC_ATOP_NV = 0x0000928e
GL_SRC_IN_NV = 0x0000928a
GL_SRC_NV = 0x00009286
GL_SRC_OUT_NV = 0x0000928c
GL_SRC_OVER_NV = 0x00009288
GL_UNCORRELATED_NV = 0x00009282
GL_VIVIDLIGHT_NV = 0x000092a6
GL_XOR_NV = 0x00001506
GL_NV_blend_equation_advanced_coherent = 0x00000001
GL_BLEND_ADVANCED_COHERENT_NV = 0x00009285
GL_NV_blend_minmax_factor = 0x00000001
GL_FACTOR_MIN_AMD = 0x0000901c
GL_FACTOR_MAX_AMD = 0x0000901d
GL_NV_clip_space_w_scaling = 0x00000001
GL_VIEWPORT_POSITION_W_SCALE_NV = 0x0000937c
GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x0000937d
GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x0000937e
GL_NV_compute_shader_derivatives = 0x00000001
GL_NV_conditional_render = 0x00000001
GL_QUERY_WAIT_NV = 0x00008e13
GL_QUERY_NO_WAIT_NV = 0x00008e14
GL_QUERY_BY_REGION_WAIT_NV = 0x00008e15
GL_QUERY_BY_REGION_NO_WAIT_NV = 0x00008e16
GL_NV_conservative_raster = 0x00000001
GL_CONSERVATIVE_RASTERIZATION_NV = 0x00009346
GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x00009347
GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x00009348
GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x00009349
GL_NV_conservative_raster_pre_snap = 0x00000001
GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 0x00009550
GL_NV_conservative_raster_pre_snap_triangles = 0x00000001
GL_CONSERVATIVE_RASTER_MODE_NV = 0x0000954d
GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x0000954e
GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x0000954f
GL_NV_copy_buffer = 0x00000001
GL_COPY_READ_BUFFER_NV = 0x00008f36
GL_COPY_WRITE_BUFFER_NV = 0x00008f37
GL_NV_coverage_sample = 0x00000001
GL_COVERAGE_COMPONENT_NV = 0x00008ed0
GL_COVERAGE_COMPONENT4_NV = 0x00008ed1
GL_COVERAGE_ATTACHMENT_NV = 0x00008ed2
GL_COVERAGE_BUFFERS_NV = 0x00008ed3
GL_COVERAGE_SAMPLES_NV = 0x00008ed4
GL_COVERAGE_ALL_FRAGMENTS_NV = 0x00008ed5
GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x00008ed6
GL_COVERAGE_AUTOMATIC_NV = 0x00008ed7
GL_COVERAGE_BUFFER_BIT_NV = 0x00008000
GL_NV_depth_nonlinear = 0x00000001
GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x00008e2c
GL_NV_draw_buffers = 0x00000001
GL_MAX_DRAW_BUFFERS_NV = 0x00008824
GL_DRAW_BUFFER0_NV = 0x00008825
GL_DRAW_BUFFER1_NV = 0x00008826
GL_DRAW_BUFFER2_NV = 0x00008827
GL_DRAW_BUFFER3_NV = 0x00008828
GL_DRAW_BUFFER4_NV = 0x00008829
GL_DRAW_BUFFER5_NV = 0x0000882a
GL_DRAW_BUFFER6_NV = 0x0000882b
GL_DRAW_BUFFER7_NV = 0x0000882c
GL_DRAW_BUFFER8_NV = 0x0000882d
GL_DRAW_BUFFER9_NV = 0x0000882e
GL_DRAW_BUFFER10_NV = 0x0000882f
GL_DRAW_BUFFER11_NV = 0x00008830
GL_DRAW_BUFFER12_NV = 0x00008831
GL_DRAW_BUFFER13_NV = 0x00008832
GL_DRAW_BUFFER14_NV = 0x00008833
GL_DRAW_BUFFER15_NV = 0x00008834
GL_COLOR_ATTACHMENT0_NV = 0x00008ce0
GL_COLOR_ATTACHMENT1_NV = 0x00008ce1
GL_COLOR_ATTACHMENT2_NV = 0x00008ce2
GL_COLOR_ATTACHMENT3_NV = 0x00008ce3
GL_COLOR_ATTACHMENT4_NV = 0x00008ce4
GL_COLOR_ATTACHMENT5_NV = 0x00008ce5
GL_COLOR_ATTACHMENT6_NV = 0x00008ce6
GL_COLOR_ATTACHMENT7_NV = 0x00008ce7
GL_COLOR_ATTACHMENT8_NV = 0x00008ce8
GL_COLOR_ATTACHMENT9_NV = 0x00008ce9
GL_COLOR_ATTACHMENT10_NV = 0x00008cea
GL_COLOR_ATTACHMENT11_NV = 0x00008ceb
GL_COLOR_ATTACHMENT12_NV = 0x00008cec
GL_COLOR_ATTACHMENT13_NV = 0x00008ced
GL_COLOR_ATTACHMENT14_NV = 0x00008cee
GL_COLOR_ATTACHMENT15_NV = 0x00008cef
GL_NV_draw_instanced = 0x00000001
GL_NV_draw_vulkan_image = 0x00000001
GL_NV_explicit_attrib_location = 0x00000001
GL_NV_fbo_color_attachments = 0x00000001
GL_MAX_COLOR_ATTACHMENTS_NV = 0x00008cdf
GL_NV_fence = 0x00000001
GL_ALL_COMPLETED_NV = 0x000084f2
GL_FENCE_STATUS_NV = 0x000084f3
GL_FENCE_CONDITION_NV = 0x000084f4
GL_NV_fill_rectangle = 0x00000001
GL_FILL_RECTANGLE_NV = 0x0000933c
GL_NV_fragment_coverage_to_color = 0x00000001
GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x000092dd
GL_FRAGMENT_COVERAGE_COLOR_NV = 0x000092de
GL_NV_fragment_shader_barycentric = 0x00000001
GL_NV_fragment_shader_interlock = 0x00000001
GL_NV_framebuffer_blit = 0x00000001
GL_READ_FRAMEBUFFER_NV = 0x00008ca8
GL_DRAW_FRAMEBUFFER_NV = 0x00008ca9
GL_DRAW_FRAMEBUFFER_BINDING_NV = 0x00008ca6
GL_READ_FRAMEBUFFER_BINDING_NV = 0x00008caa
GL_NV_framebuffer_mixed_samples = 0x00000001
GL_COVERAGE_MODULATION_TABLE_NV = 0x00009331
GL_COLOR_SAMPLES_NV = 0x00008e20
GL_DEPTH_SAMPLES_NV = 0x0000932d
GL_STENCIL_SAMPLES_NV = 0x0000932e
GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x0000932f
GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x00009330
GL_COVERAGE_MODULATION_NV = 0x00009332
GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x00009333
GL_NV_framebuffer_multisample = 0x00000001
GL_RENDERBUFFER_SAMPLES_NV = 0x00008cab
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x00008d56
GL_MAX_SAMPLES_NV = 0x00008d57
GL_NV_generate_mipmap_sRGB = 0x00000001
GL_NV_geometry_shader_passthrough = 0x00000001
GL_NV_gpu_shader5 = 0x00000001
GL_INT64_NV = 0x0000140e
GL_UNSIGNED_INT64_NV = 0x0000140f
GL_INT8_NV = 0x00008fe0
GL_INT8_VEC2_NV = 0x00008fe1
GL_INT8_VEC3_NV = 0x00008fe2
GL_INT8_VEC4_NV = 0x00008fe3
GL_INT16_NV = 0x00008fe4
GL_INT16_VEC2_NV = 0x00008fe5
GL_INT16_VEC3_NV = 0x00008fe6
GL_INT16_VEC4_NV = 0x00008fe7
GL_INT64_VEC2_NV = 0x00008fe9
GL_INT64_VEC3_NV = 0x00008fea
GL_INT64_VEC4_NV = 0x00008feb
GL_UNSIGNED_INT8_NV = 0x00008fec
GL_UNSIGNED_INT8_VEC2_NV = 0x00008fed
GL_UNSIGNED_INT8_VEC3_NV = 0x00008fee
GL_UNSIGNED_INT8_VEC4_NV = 0x00008fef
GL_UNSIGNED_INT16_NV = 0x00008ff0
GL_UNSIGNED_INT16_VEC2_NV = 0x00008ff1
GL_UNSIGNED_INT16_VEC3_NV = 0x00008ff2
GL_UNSIGNED_INT16_VEC4_NV = 0x00008ff3
GL_UNSIGNED_INT64_VEC2_NV = 0x00008ff5
GL_UNSIGNED_INT64_VEC3_NV = 0x00008ff6
GL_UNSIGNED_INT64_VEC4_NV = 0x00008ff7
GL_FLOAT16_NV = 0x00008ff8
GL_FLOAT16_VEC2_NV = 0x00008ff9
GL_FLOAT16_VEC3_NV = 0x00008ffa
GL_FLOAT16_VEC4_NV = 0x00008ffb
GL_PATCHES = 0x0000000e
GL_NV_image_formats = 0x00000001
GL_NV_instanced_arrays = 0x00000001
GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x000088fe
GL_NV_internalformat_sample_query = 0x00000001
GL_TEXTURE_2D_MULTISAMPLE = 0x00009100
GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009102
GL_MULTISAMPLES_NV = 0x00009371
GL_SUPERSAMPLE_SCALE_X_NV = 0x00009372
GL_SUPERSAMPLE_SCALE_Y_NV = 0x00009373
GL_CONFORMANT_NV = 0x00009374
GL_NV_memory_attachment = 0x00000001
GL_ATTACHED_MEMORY_OBJECT_NV = 0x000095a4
GL_ATTACHED_MEMORY_OFFSET_NV = 0x000095a5
GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = 0x000095a6
GL_MEMORY_ATTACHABLE_SIZE_NV = 0x000095a7
GL_MEMORY_ATTACHABLE_NV = 0x000095a8
GL_DETACHED_MEMORY_INCARNATION_NV = 0x000095a9
GL_DETACHED_TEXTURES_NV = 0x000095aa
GL_DETACHED_BUFFERS_NV = 0x000095ab
GL_MAX_DETACHED_TEXTURES_NV = 0x000095ac
GL_MAX_DETACHED_BUFFERS_NV = 0x000095ad
GL_NV_memory_object_sparse = 0x00000001
GL_NV_mesh_shader = 0x00000001
GL_MESH_SHADER_NV = 0x00009559
GL_TASK_SHADER_NV = 0x0000955a
GL_MAX_MESH_UNIFORM_BLOCKS_NV = 0x00008e60
GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 0x00008e61
GL_MAX_MESH_IMAGE_UNIFORMS_NV = 0x00008e62
GL_MAX_MESH_UNIFORM_COMPONENTS_NV = 0x00008e63
GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 0x00008e64
GL_MAX_MESH_ATOMIC_COUNTERS_NV = 0x00008e65
GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 0x00008e66
GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 0x00008e67
GL_MAX_TASK_UNIFORM_BLOCKS_NV = 0x00008e68
GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 0x00008e69
GL_MAX_TASK_IMAGE_UNIFORMS_NV = 0x00008e6a
GL_MAX_TASK_UNIFORM_COMPONENTS_NV = 0x00008e6b
GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 0x00008e6c
GL_MAX_TASK_ATOMIC_COUNTERS_NV = 0x00008e6d
GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 0x00008e6e
GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 0x00008e6f
GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 0x000095a2
GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 0x000095a3
GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = 0x00009536
GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = 0x00009537
GL_MAX_MESH_OUTPUT_VERTICES_NV = 0x00009538
GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = 0x00009539
GL_MAX_TASK_OUTPUT_COUNT_NV = 0x0000953a
GL_MAX_DRAW_MESH_TASKS_COUNT_NV = 0x0000953d
GL_MAX_MESH_VIEWS_NV = 0x00009557
GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 0x000092df
GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 0x00009543
GL_MAX_MESH_WORK_GROUP_SIZE_NV = 0x0000953b
GL_MAX_TASK_WORK_GROUP_SIZE_NV = 0x0000953c
GL_MESH_WORK_GROUP_SIZE_NV = 0x0000953e
GL_TASK_WORK_GROUP_SIZE_NV = 0x0000953f
GL_MESH_VERTICES_OUT_NV = 0x00009579
GL_MESH_PRIMITIVES_OUT_NV = 0x0000957a
GL_MESH_OUTPUT_TYPE_NV = 0x0000957b
GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 0x0000959c
GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 0x0000959d
GL_REFERENCED_BY_MESH_SHADER_NV = 0x000095a0
GL_REFERENCED_BY_TASK_SHADER_NV = 0x000095a1
GL_MESH_SHADER_BIT_NV = 0x00000040
GL_TASK_SHADER_BIT_NV = 0x00000080
GL_MESH_SUBROUTINE_NV = 0x0000957c
GL_TASK_SUBROUTINE_NV = 0x0000957d
GL_MESH_SUBROUTINE_UNIFORM_NV = 0x0000957e
GL_TASK_SUBROUTINE_UNIFORM_NV = 0x0000957f
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 0x0000959e
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 0x0000959f
GL_NV_non_square_matrices = 0x00000001
GL_FLOAT_MAT2x3_NV = 0x00008b65
GL_FLOAT_MAT2x4_NV = 0x00008b66
GL_FLOAT_MAT3x2_NV = 0x00008b67
GL_FLOAT_MAT3x4_NV = 0x00008b68
GL_FLOAT_MAT4x2_NV = 0x00008b69
GL_FLOAT_MAT4x3_NV = 0x00008b6a
GL_NV_path_rendering = 0x00000001
GL_PATH_FORMAT_SVG_NV = 0x00009070
GL_PATH_FORMAT_PS_NV = 0x00009071
GL_STANDARD_FONT_NAME_NV = 0x00009072
GL_SYSTEM_FONT_NAME_NV = 0x00009073
GL_FILE_NAME_NV = 0x00009074
GL_PATH_STROKE_WIDTH_NV = 0x00009075
GL_PATH_END_CAPS_NV = 0x00009076
GL_PATH_INITIAL_END_CAP_NV = 0x00009077
GL_PATH_TERMINAL_END_CAP_NV = 0x00009078
GL_PATH_JOIN_STYLE_NV = 0x00009079
GL_PATH_MITER_LIMIT_NV = 0x0000907a
GL_PATH_DASH_CAPS_NV = 0x0000907b
GL_PATH_INITIAL_DASH_CAP_NV = 0x0000907c
GL_PATH_TERMINAL_DASH_CAP_NV = 0x0000907d
GL_PATH_DASH_OFFSET_NV = 0x0000907e
GL_PATH_CLIENT_LENGTH_NV = 0x0000907f
GL_PATH_FILL_MODE_NV = 0x00009080
GL_PATH_FILL_MASK_NV = 0x00009081
GL_PATH_FILL_COVER_MODE_NV = 0x00009082
GL_PATH_STROKE_COVER_MODE_NV = 0x00009083
GL_PATH_STROKE_MASK_NV = 0x00009084
GL_COUNT_UP_NV = 0x00009088
GL_COUNT_DOWN_NV = 0x00009089
GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x0000908a
GL_CONVEX_HULL_NV = 0x0000908b
GL_BOUNDING_BOX_NV = 0x0000908d
GL_TRANSLATE_X_NV = 0x0000908e
GL_TRANSLATE_Y_NV = 0x0000908f
GL_TRANSLATE_2D_NV = 0x00009090
GL_TRANSLATE_3D_NV = 0x00009091
GL_AFFINE_2D_NV = 0x00009092
GL_AFFINE_3D_NV = 0x00009094
GL_TRANSPOSE_AFFINE_2D_NV = 0x00009096
GL_TRANSPOSE_AFFINE_3D_NV = 0x00009098
GL_UTF8_NV = 0x0000909a
GL_UTF16_NV = 0x0000909b
GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x0000909c
GL_PATH_COMMAND_COUNT_NV = 0x0000909d
GL_PATH_COORD_COUNT_NV = 0x0000909e
GL_PATH_DASH_ARRAY_COUNT_NV = 0x0000909f
GL_PATH_COMPUTED_LENGTH_NV = 0x000090a0
GL_PATH_FILL_BOUNDING_BOX_NV = 0x000090a1
GL_PATH_STROKE_BOUNDING_BOX_NV = 0x000090a2
GL_SQUARE_NV = 0x000090a3
GL_ROUND_NV = 0x000090a4
GL_TRIANGULAR_NV = 0x000090a5
GL_BEVEL_NV = 0x000090a6
GL_MITER_REVERT_NV = 0x000090a7
GL_MITER_TRUNCATE_NV = 0x000090a8
GL_SKIP_MISSING_GLYPH_NV = 0x000090a9
GL_USE_MISSING_GLYPH_NV = 0x000090aa
GL_PATH_ERROR_POSITION_NV = 0x000090ab
GL_ACCUM_ADJACENT_PAIRS_NV = 0x000090ad
GL_ADJACENT_PAIRS_NV = 0x000090ae
GL_FIRST_TO_REST_NV = 0x000090af
GL_PATH_GEN_MODE_NV = 0x000090b0
GL_PATH_GEN_COEFF_NV = 0x000090b1
GL_PATH_GEN_COMPONENTS_NV = 0x000090b3
GL_PATH_STENCIL_FUNC_NV = 0x000090b7
GL_PATH_STENCIL_REF_NV = 0x000090b8
GL_PATH_STENCIL_VALUE_MASK_NV = 0x000090b9
GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x000090bd
GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x000090be
GL_PATH_COVER_DEPTH_FUNC_NV = 0x000090bf
GL_PATH_DASH_OFFSET_RESET_NV = 0x000090b4
GL_MOVE_TO_RESETS_NV = 0x000090b5
GL_MOVE_TO_CONTINUES_NV = 0x000090b6
GL_CLOSE_PATH_NV = 0x00000000
GL_MOVE_TO_NV = 0x00000002
GL_RELATIVE_MOVE_TO_NV = 0x00000003
GL_LINE_TO_NV = 0x00000004
GL_RELATIVE_LINE_TO_NV = 0x00000005
GL_HORIZONTAL_LINE_TO_NV = 0x00000006
GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x00000007
GL_VERTICAL_LINE_TO_NV = 0x00000008
GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x00000009
GL_QUADRATIC_CURVE_TO_NV = 0x0000000a
GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0000000b
GL_CUBIC_CURVE_TO_NV = 0x0000000c
GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0000000d
GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0000000e
GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0000000f
GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x00000010
GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x00000011
GL_SMALL_CCW_ARC_TO_NV = 0x00000012
GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x00000013
GL_SMALL_CW_ARC_TO_NV = 0x00000014
GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x00000015
GL_LARGE_CCW_ARC_TO_NV = 0x00000016
GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x00000017
GL_LARGE_CW_ARC_TO_NV = 0x00000018
GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x00000019
GL_RESTART_PATH_NV = 0x000000f0
GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0x000000f2
GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0x000000f4
GL_RECT_NV = 0x000000f6
GL_CIRCULAR_CCW_ARC_TO_NV = 0x000000f8
GL_CIRCULAR_CW_ARC_TO_NV = 0x000000fa
GL_CIRCULAR_TANGENT_ARC_TO_NV = 0x000000fc
GL_ARC_TO_NV = 0x000000fe
GL_RELATIVE_ARC_TO_NV = 0x000000ff
GL_BOLD_BIT_NV = 0x00000001
GL_ITALIC_BIT_NV = 0x00000002
GL_GLYPH_WIDTH_BIT_NV = 0x00000001
GL_GLYPH_HEIGHT_BIT_NV = 0x00000002
GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x00000004
GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x00000008
GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x00000010
GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x00000020
GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x00000040
GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x00000080
GL_GLYPH_HAS_KERNING_BIT_NV = 0x00000100
GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000
GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000
GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000
GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000
GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000
GL_FONT_ASCENDER_BIT_NV = 0x00200000
GL_FONT_DESCENDER_BIT_NV = 0x00400000
GL_FONT_HEIGHT_BIT_NV = 0x00800000
GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000
GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000
GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000
GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000
GL_FONT_HAS_KERNING_BIT_NV = 0x10000000
GL_ROUNDED_RECT_NV = 0x000000e8
GL_RELATIVE_ROUNDED_RECT_NV = 0x000000e9
GL_ROUNDED_RECT2_NV = 0x000000ea
GL_RELATIVE_ROUNDED_RECT2_NV = 0x000000eb
GL_ROUNDED_RECT4_NV = 0x000000ec
GL_RELATIVE_ROUNDED_RECT4_NV = 0x000000ed
GL_ROUNDED_RECT8_NV = 0x000000ee
GL_RELATIVE_ROUNDED_RECT8_NV = 0x000000ef
GL_RELATIVE_RECT_NV = 0x000000f7
GL_FONT_GLYPHS_AVAILABLE_NV = 0x00009368
GL_FONT_TARGET_UNAVAILABLE_NV = 0x00009369
GL_FONT_UNAVAILABLE_NV = 0x0000936a
GL_FONT_UNINTELLIGIBLE_NV = 0x0000936b
GL_CONIC_CURVE_TO_NV = 0x0000001a
GL_RELATIVE_CONIC_CURVE_TO_NV = 0x0000001b
GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000
GL_STANDARD_FONT_FORMAT_NV = 0x0000936c
GL_PATH_PROJECTION_NV = 0x00001701
GL_PATH_MODELVIEW_NV = 0x00001700
GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x00000ba3
GL_PATH_MODELVIEW_MATRIX_NV = 0x00000ba6
GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x00000d36
GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x000084e3
GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x00000ba4
GL_PATH_PROJECTION_MATRIX_NV = 0x00000ba7
GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x00000d38
GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x000084e4
GL_FRAGMENT_INPUT_NV = 0x0000936d
GL_NV_path_rendering_shared_edge = 0x00000001
GL_SHARED_EDGE_NV = 0x000000c0
GL_NV_pixel_buffer_object = 0x00000001
GL_PIXEL_PACK_BUFFER_NV = 0x000088eb
GL_PIXEL_UNPACK_BUFFER_NV = 0x000088ec
GL_PIXEL_PACK_BUFFER_BINDING_NV = 0x000088ed
GL_PIXEL_UNPACK_BUFFER_BINDING_NV = 0x000088ef
GL_NV_polygon_mode = 0x00000001
GL_POLYGON_MODE_NV = 0x00000b40
GL_POLYGON_OFFSET_POINT_NV = 0x00002a01
GL_POLYGON_OFFSET_LINE_NV = 0x00002a02
GL_POINT_NV = 0x00001b00
GL_LINE_NV = 0x00001b01
GL_FILL_NV = 0x00001b02
GL_NV_primitive_shading_rate = 0x00000001
GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 0x000095b1
GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV = 0x000095b2
GL_NV_read_buffer = 0x00000001
GL_READ_BUFFER_NV = 0x00000c02
GL_NV_read_buffer_front = 0x00000001
GL_NV_read_depth = 0x00000001
GL_NV_read_depth_stencil = 0x00000001
GL_NV_read_stencil = 0x00000001
GL_NV_representative_fragment_test = 0x00000001
GL_REPRESENTATIVE_FRAGMENT_TEST_NV = 0x0000937f
GL_NV_sRGB_formats = 0x00000001
GL_SLUMINANCE_NV = 0x00008c46
GL_SLUMINANCE_ALPHA_NV = 0x00008c44
GL_SRGB8_NV = 0x00008c41
GL_SLUMINANCE8_NV = 0x00008c47
GL_SLUMINANCE8_ALPHA8_NV = 0x00008c45
GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 0x00008c4c
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x00008c4d
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x00008c4e
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x00008c4f
GL_ETC1_SRGB8_NV = 0x000088ee
GL_NV_sample_locations = 0x00000001
GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x0000933d
GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x0000933e
GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x0000933f
GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x00009340
GL_SAMPLE_LOCATION_NV = 0x00008e50
GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x00009341
GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x00009342
GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x00009343
GL_NV_sample_mask_override_coverage = 0x00000001
GL_NV_scissor_exclusive = 0x00000001
GL_SCISSOR_TEST_EXCLUSIVE_NV = 0x00009555
GL_SCISSOR_BOX_EXCLUSIVE_NV = 0x00009556
GL_NV_shader_atomic_fp16_vector = 0x00000001
GL_NV_shader_noperspective_interpolation = 0x00000001
GL_NV_shader_subgroup_partitioned = 0x00000001
GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100
GL_NV_shader_texture_footprint = 0x00000001
GL_NV_shading_rate_image = 0x00000001
GL_SHADING_RATE_IMAGE_NV = 0x00009563
GL_SHADING_RATE_NO_INVOCATIONS_NV = 0x00009564
GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0x00009565
GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 0x00009566
GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 0x00009567
GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 0x00009568
GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 0x00009569
GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 0x0000956a
GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 0x0000956b
GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 0x0000956c
GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 0x0000956d
GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 0x0000956e
GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 0x0000956f
GL_SHADING_RATE_IMAGE_BINDING_NV = 0x0000955b
GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 0x0000955c
GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 0x0000955d
GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 0x0000955e
GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = 0x0000955f
GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 0x000095ae
GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 0x000095af
GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 0x000095b0
GL_NV_shadow_samplers_array = 0x00000001
GL_SAMPLER_2D_ARRAY_SHADOW_NV = 0x00008dc4
GL_NV_shadow_samplers_cube = 0x00000001
GL_SAMPLER_CUBE_SHADOW_NV = 0x00008dc5
GL_NV_stereo_view_rendering = 0x00000001
GL_NV_texture_border_clamp = 0x00000001
GL_TEXTURE_BORDER_COLOR_NV = 0x00001004
GL_CLAMP_TO_BORDER_NV = 0x0000812d
GL_NV_texture_compression_s3tc_update = 0x00000001
GL_NV_texture_npot_2D_mipmap = 0x00000001
GL_NV_timeline_semaphore = 0x00000001
GL_TIMELINE_SEMAPHORE_VALUE_NV = 0x00009595
GL_SEMAPHORE_TYPE_NV = 0x000095b3
GL_SEMAPHORE_TYPE_BINARY_NV = 0x000095b4
GL_SEMAPHORE_TYPE_TIMELINE_NV = 0x000095b5
GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = 0x000095b6
GL_NV_viewport_array = 0x00000001
GL_MAX_VIEWPORTS_NV = 0x0000825b
GL_VIEWPORT_SUBPIXEL_BITS_NV = 0x0000825c
GL_VIEWPORT_BOUNDS_RANGE_NV = 0x0000825d
GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 0x0000825f
GL_NV_viewport_array2 = 0x00000001
GL_NV_viewport_swizzle = 0x00000001
GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x00009350
GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x00009351
GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x00009352
GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x00009353
GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x00009354
GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x00009355
GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x00009356
GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x00009357
GL_VIEWPORT_SWIZZLE_X_NV = 0x00009358
GL_VIEWPORT_SWIZZLE_Y_NV = 0x00009359
GL_VIEWPORT_SWIZZLE_Z_NV = 0x0000935a
GL_VIEWPORT_SWIZZLE_W_NV = 0x0000935b
GL_OVR_multiview = 0x00000001
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x00009630
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x00009632
GL_MAX_VIEWS_OVR = 0x00009631
GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x00009633
GL_OVR_multiview2 = 0x00000001
GL_OVR_multiview_multisampled_render_to_texture = 0x00000001
GL_QCOM_YUV_texture_gather = 0x00000001
GL_QCOM_alpha_test = 0x00000001
GL_ALPHA_TEST_QCOM = 0x00000bc0
GL_ALPHA_TEST_FUNC_QCOM = 0x00000bc1
GL_ALPHA_TEST_REF_QCOM = 0x00000bc2
GL_QCOM_binning_control = 0x00000001
GL_BINNING_CONTROL_HINT_QCOM = 0x00008fb0
GL_CPU_OPTIMIZED_QCOM = 0x00008fb1
GL_GPU_OPTIMIZED_QCOM = 0x00008fb2
GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x00008fb3
GL_QCOM_driver_control = 0x00000001
GL_QCOM_extended_get = 0x00000001
GL_TEXTURE_WIDTH_QCOM = 0x00008bd2
GL_TEXTURE_HEIGHT_QCOM = 0x00008bd3
GL_TEXTURE_DEPTH_QCOM = 0x00008bd4
GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x00008bd5
GL_TEXTURE_FORMAT_QCOM = 0x00008bd6
GL_TEXTURE_TYPE_QCOM = 0x00008bd7
GL_TEXTURE_IMAGE_VALID_QCOM = 0x00008bd8
GL_TEXTURE_NUM_LEVELS_QCOM = 0x00008bd9
GL_TEXTURE_TARGET_QCOM = 0x00008bda
GL_TEXTURE_OBJECT_VALID_QCOM = 0x00008bdb
GL_STATE_RESTORE = 0x00008bdc
GL_QCOM_extended_get2 = 0x00000001
GL_QCOM_frame_extrapolation = 0x00000001
GL_QCOM_framebuffer_foveated = 0x00000001
GL_FOVEATION_ENABLE_BIT_QCOM = 0x00000001
GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 0x00000002
GL_QCOM_motion_estimation = 0x00000001
GL_MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM = 0x00008c90
GL_MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM = 0x00008c91
GL_QCOM_perfmon_global_mode = 0x00000001
GL_PERFMON_GLOBAL_MODE_QCOM = 0x00008fa0
GL_QCOM_render_shared_exponent = 0x00000001
GL_QCOM_shader_framebuffer_fetch_noncoherent = 0x00000001
GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x000096a2
GL_QCOM_shader_framebuffer_fetch_rate = 0x00000001
GL_QCOM_shading_rate = 0x00000001
GL_SHADING_RATE_QCOM = 0x000096a4
GL_SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM = 0x000096a5
GL_SHADING_RATE_1X1_PIXELS_QCOM = 0x000096a6
GL_SHADING_RATE_1X2_PIXELS_QCOM = 0x000096a7
GL_SHADING_RATE_2X1_PIXELS_QCOM = 0x000096a8
GL_SHADING_RATE_2X2_PIXELS_QCOM = 0x000096a9
GL_SHADING_RATE_4X2_PIXELS_QCOM = 0x000096ac
GL_SHADING_RATE_4X4_PIXELS_QCOM = 0x000096ae
GL_QCOM_texture_foveated = 0x00000001
GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 0x00008bfb
GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 0x00008bfc
GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 0x00008bfd
GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 0x00008bfe
GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 0x00008bff
GL_QCOM_texture_foveated2 = 0x00000001
GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM = 0x000096a0
GL_QCOM_texture_foveated_subsampled_layout = 0x00000001
GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 0x00000004
GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = 0x00008fa1
GL_QCOM_tiled_rendering = 0x00000001
GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001
GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002
GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004
GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008
GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010
GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020
GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040
GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080
GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100
GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200
GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400
GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800
GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000
GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000
GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000
GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000
GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000
GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000
GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000
GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000
GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000
GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000
GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000
GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000
GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000
GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000
GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000
GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000
GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000
GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000
GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000
GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000
GL_QCOM_writeonly_rendering = 0x00000001
GL_WRITEONLY_RENDERING_QCOM = 0x00008823
GL_VIV_shader_binary = 0x00000001
GL_SHADER_BINARY_VIV = 0x00008fc4

# GL Functions
try:

  def glBlendBarrierKHR(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glBlendBarrierKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glBlendBarrierKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDebugMessageControlKHR(source,
                               type,
                               severity,
                               count,
                               param0,
                               enabled,
                               source_t=GLenum,
                               type_t=GLenum,
                               severity_t=GLenum,
                               count_t=GLsizei,
                               param0_t=GLuint,
                               enabled_t=GLboolean):
    restype = None
    argtypes = [source_t, type_t, severity_t, count_t, param0_t, enabled_t]
    cfunc = c.glDebugMessageControlKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(source, type, severity, count, param0, enabled)

  # Check if the function actually exists
  f = c.glDebugMessageControlKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDebugMessageInsertKHR(source,
                              type,
                              id,
                              severity,
                              length,
                              param0,
                              source_t=GLenum,
                              type_t=GLenum,
                              id_t=GLuint,
                              severity_t=GLenum,
                              length_t=GLsizei,
                              param0_t=GLchar):
    restype = None
    argtypes = [source_t, type_t, id_t, severity_t, length_t, param0_t]
    cfunc = c.glDebugMessageInsertKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(source, type, id, severity, length, param0)

  # Check if the function actually exists
  f = c.glDebugMessageInsertKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDebugMessageCallbackKHR(callback,
                                voiduserParam,
                                callback_t=GLDEBUGPROCKHR,
                                voiduserParam_t=ctypes.c_void_p):
    restype = None
    argtypes = [callback_t, voiduserParam_t]
    cfunc = c.glDebugMessageCallbackKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(callback, voiduserParam)

  # Check if the function actually exists
  f = c.glDebugMessageCallbackKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetDebugMessageLogKHR(count,
                              bufSize,
                              param0,
                              param1,
                              param2,
                              param3,
                              param4,
                              param5,
                              count_t=GLuint,
                              bufSize_t=GLsizei,
                              param0_t=GLenum,
                              param1_t=GLenum,
                              param2_t=GLuint,
                              param3_t=GLenum,
                              param4_t=GLsizei,
                              param5_t=GLchar):
    restype = GLuint
    argtypes = [
      count_t, bufSize_t, param0_t, param1_t, param2_t, param3_t, param4_t,
      param5_t
    ]
    cfunc = c.glGetDebugMessageLogKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(count, bufSize, param0, param1, param2, param3, param4,
                 param5)

  # Check if the function actually exists
  f = c.glGetDebugMessageLogKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPushDebugGroupKHR(source,
                          id,
                          length,
                          param0,
                          source_t=GLenum,
                          id_t=GLuint,
                          length_t=GLsizei,
                          param0_t=GLchar):
    restype = None
    argtypes = [source_t, id_t, length_t, param0_t]
    cfunc = c.glPushDebugGroupKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(source, id, length, param0)

  # Check if the function actually exists
  f = c.glPushDebugGroupKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPopDebugGroupKHR(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glPopDebugGroupKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glPopDebugGroupKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glObjectLabelKHR(identifier,
                       name,
                       length,
                       param0,
                       identifier_t=GLenum,
                       name_t=GLuint,
                       length_t=GLsizei,
                       param0_t=GLchar):
    restype = None
    argtypes = [identifier_t, name_t, length_t, param0_t]
    cfunc = c.glObjectLabelKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(identifier, name, length, param0)

  # Check if the function actually exists
  f = c.glObjectLabelKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetObjectLabelKHR(identifier,
                          name,
                          bufSize,
                          param0,
                          param1,
                          identifier_t=GLenum,
                          name_t=GLuint,
                          bufSize_t=GLsizei,
                          param0_t=GLsizei,
                          param1_t=GLchar):
    restype = None
    argtypes = [identifier_t, name_t, bufSize_t, param0_t, param1_t]
    cfunc = c.glGetObjectLabelKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(identifier, name, bufSize, param0, param1)

  # Check if the function actually exists
  f = c.glGetObjectLabelKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glObjectPtrLabelKHR(voidptr,
                          length,
                          param0,
                          voidptr_t=ctypes.c_void_p,
                          length_t=GLsizei,
                          param0_t=GLchar):
    restype = None
    argtypes = [voidptr_t, length_t, param0_t]
    cfunc = c.glObjectPtrLabelKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(voidptr, length, param0)

  # Check if the function actually exists
  f = c.glObjectPtrLabelKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetObjectPtrLabelKHR(voidptr,
                             bufSize,
                             param0,
                             param1,
                             voidptr_t=ctypes.c_void_p,
                             bufSize_t=GLsizei,
                             param0_t=GLsizei,
                             param1_t=GLchar):
    restype = None
    argtypes = [voidptr_t, bufSize_t, param0_t, param1_t]
    cfunc = c.glGetObjectPtrLabelKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(voidptr, bufSize, param0, param1)

  # Check if the function actually exists
  f = c.glGetObjectPtrLabelKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPointervKHR(pname,
                       voidparams,
                       pname_t=GLenum,
                       voidparams_t=ctypes.c_void_p):
    restype = None
    argtypes = [pname_t, voidparams_t]
    cfunc = c.glGetPointervKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pname, voidparams)

  # Check if the function actually exists
  f = c.glGetPointervKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMaxShaderCompilerThreadsKHR(count, count_t=GLuint):
    restype = None
    argtypes = [count_t]
    cfunc = c.glMaxShaderCompilerThreadsKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(count)

  # Check if the function actually exists
  f = c.glMaxShaderCompilerThreadsKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetGraphicsResetStatusKHR(void, void_t=ctypes.c_void_p):
    restype = GLenum
    argtypes = [void_t]
    cfunc = c.glGetGraphicsResetStatusKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glGetGraphicsResetStatusKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glReadnPixelsKHR(x,
                       y,
                       width,
                       height,
                       format,
                       type,
                       bufSize,
                       voiddata,
                       x_t=GLint,
                       y_t=GLint,
                       width_t=GLsizei,
                       height_t=GLsizei,
                       format_t=GLenum,
                       type_t=GLenum,
                       bufSize_t=GLsizei,
                       voiddata_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      x_t, y_t, width_t, height_t, format_t, type_t, bufSize_t, voiddata_t
    ]
    cfunc = c.glReadnPixelsKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(x, y, width, height, format, type, bufSize, voiddata)

  # Check if the function actually exists
  f = c.glReadnPixelsKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetnUniformfvKHR(program,
                         location,
                         bufSize,
                         param0,
                         program_t=GLuint,
                         location_t=GLint,
                         bufSize_t=GLsizei,
                         param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, bufSize_t, param0_t]
    cfunc = c.glGetnUniformfvKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, bufSize, param0)

  # Check if the function actually exists
  f = c.glGetnUniformfvKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetnUniformivKHR(program,
                         location,
                         bufSize,
                         param0,
                         program_t=GLuint,
                         location_t=GLint,
                         bufSize_t=GLsizei,
                         param0_t=GLint):
    restype = None
    argtypes = [program_t, location_t, bufSize_t, param0_t]
    cfunc = c.glGetnUniformivKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, bufSize, param0)

  # Check if the function actually exists
  f = c.glGetnUniformivKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetnUniformuivKHR(program,
                          location,
                          bufSize,
                          param0,
                          program_t=GLuint,
                          location_t=GLint,
                          bufSize_t=GLsizei,
                          param0_t=GLuint):
    restype = None
    argtypes = [program_t, location_t, bufSize_t, param0_t]
    cfunc = c.glGetnUniformuivKHR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, bufSize, param0)

  # Check if the function actually exists
  f = c.glGetnUniformuivKHR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEGLImageTargetTexture2DOES(target,
                                   image,
                                   target_t=GLenum,
                                   image_t=GLeglImageOES):
    restype = None
    argtypes = [target_t, image_t]
    cfunc = c.glEGLImageTargetTexture2DOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, image)

  # Check if the function actually exists
  f = c.glEGLImageTargetTexture2DOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEGLImageTargetRenderbufferStorageOES(target,
                                             image,
                                             target_t=GLenum,
                                             image_t=GLeglImageOES):
    restype = None
    argtypes = [target_t, image_t]
    cfunc = c.glEGLImageTargetRenderbufferStorageOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, image)

  # Check if the function actually exists
  f = c.glEGLImageTargetRenderbufferStorageOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCopyImageSubDataOES(srcName,
                            srcTarget,
                            srcLevel,
                            srcX,
                            srcY,
                            srcZ,
                            dstName,
                            dstTarget,
                            dstLevel,
                            dstX,
                            dstY,
                            dstZ,
                            srcWidth,
                            srcHeight,
                            srcDepth,
                            srcName_t=GLuint,
                            srcTarget_t=GLenum,
                            srcLevel_t=GLint,
                            srcX_t=GLint,
                            srcY_t=GLint,
                            srcZ_t=GLint,
                            dstName_t=GLuint,
                            dstTarget_t=GLenum,
                            dstLevel_t=GLint,
                            dstX_t=GLint,
                            dstY_t=GLint,
                            dstZ_t=GLint,
                            srcWidth_t=GLsizei,
                            srcHeight_t=GLsizei,
                            srcDepth_t=GLsizei):
    restype = None
    argtypes = [
      srcName_t, srcTarget_t, srcLevel_t, srcX_t, srcY_t, srcZ_t, dstName_t,
      dstTarget_t, dstLevel_t, dstX_t, dstY_t, dstZ_t, srcWidth_t, srcHeight_t,
      srcDepth_t
    ]
    cfunc = c.glCopyImageSubDataOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName,
                 dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight,
                 srcDepth)

  # Check if the function actually exists
  f = c.glCopyImageSubDataOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEnableiOES(target, index, target_t=GLenum, index_t=GLuint):
    restype = None
    argtypes = [target_t, index_t]
    cfunc = c.glEnableiOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index)

  # Check if the function actually exists
  f = c.glEnableiOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDisableiOES(target, index, target_t=GLenum, index_t=GLuint):
    restype = None
    argtypes = [target_t, index_t]
    cfunc = c.glDisableiOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index)

  # Check if the function actually exists
  f = c.glDisableiOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendEquationiOES(buf, mode, buf_t=GLuint, mode_t=GLenum):
    restype = None
    argtypes = [buf_t, mode_t]
    cfunc = c.glBlendEquationiOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buf, mode)

  # Check if the function actually exists
  f = c.glBlendEquationiOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendEquationSeparateiOES(buf,
                                  modeRGB,
                                  modeAlpha,
                                  buf_t=GLuint,
                                  modeRGB_t=GLenum,
                                  modeAlpha_t=GLenum):
    restype = None
    argtypes = [buf_t, modeRGB_t, modeAlpha_t]
    cfunc = c.glBlendEquationSeparateiOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buf, modeRGB, modeAlpha)

  # Check if the function actually exists
  f = c.glBlendEquationSeparateiOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendFunciOES(buf, src, dst, buf_t=GLuint, src_t=GLenum, dst_t=GLenum):
    restype = None
    argtypes = [buf_t, src_t, dst_t]
    cfunc = c.glBlendFunciOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buf, src, dst)

  # Check if the function actually exists
  f = c.glBlendFunciOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendFuncSeparateiOES(buf,
                              srcRGB,
                              dstRGB,
                              srcAlpha,
                              dstAlpha,
                              buf_t=GLuint,
                              srcRGB_t=GLenum,
                              dstRGB_t=GLenum,
                              srcAlpha_t=GLenum,
                              dstAlpha_t=GLenum):
    restype = None
    argtypes = [buf_t, srcRGB_t, dstRGB_t, srcAlpha_t, dstAlpha_t]
    cfunc = c.glBlendFuncSeparateiOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)

  # Check if the function actually exists
  f = c.glBlendFuncSeparateiOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glColorMaskiOES(index,
                      r,
                      g,
                      b,
                      a,
                      index_t=GLuint,
                      r_t=GLboolean,
                      g_t=GLboolean,
                      b_t=GLboolean,
                      a_t=GLboolean):
    restype = None
    argtypes = [index_t, r_t, g_t, b_t, a_t]
    cfunc = c.glColorMaskiOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, r, g, b, a)

  # Check if the function actually exists
  f = c.glColorMaskiOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsEnablediOES(target, index, target_t=GLenum, index_t=GLuint):
    restype = GLboolean
    argtypes = [target_t, index_t]
    cfunc = c.glIsEnablediOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index)

  # Check if the function actually exists
  f = c.glIsEnablediOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawElementsBaseVertexOES(mode,
                                  count,
                                  type,
                                  voidindices,
                                  basevertex,
                                  mode_t=GLenum,
                                  count_t=GLsizei,
                                  type_t=GLenum,
                                  voidindices_t=ctypes.c_void_p,
                                  basevertex_t=GLint):
    restype = None
    argtypes = [mode_t, count_t, type_t, voidindices_t, basevertex_t]
    cfunc = c.glDrawElementsBaseVertexOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, type, voidindices, basevertex)

  # Check if the function actually exists
  f = c.glDrawElementsBaseVertexOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawRangeElementsBaseVertexOES(mode,
                                       start,
                                       end,
                                       count,
                                       type,
                                       voidindices,
                                       basevertex,
                                       mode_t=GLenum,
                                       start_t=GLuint,
                                       end_t=GLuint,
                                       count_t=GLsizei,
                                       type_t=GLenum,
                                       voidindices_t=ctypes.c_void_p,
                                       basevertex_t=GLint):
    restype = None
    argtypes = [
      mode_t, start_t, end_t, count_t, type_t, voidindices_t, basevertex_t
    ]
    cfunc = c.glDrawRangeElementsBaseVertexOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, start, end, count, type, voidindices, basevertex)

  # Check if the function actually exists
  f = c.glDrawRangeElementsBaseVertexOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawElementsInstancedBaseVertexOES(mode,
                                           count,
                                           type,
                                           voidindices,
                                           instancecount,
                                           basevertex,
                                           mode_t=GLenum,
                                           count_t=GLsizei,
                                           type_t=GLenum,
                                           voidindices_t=ctypes.c_void_p,
                                           instancecount_t=GLsizei,
                                           basevertex_t=GLint):
    restype = None
    argtypes = [
      mode_t, count_t, type_t, voidindices_t, instancecount_t, basevertex_t
    ]
    cfunc = c.glDrawElementsInstancedBaseVertexOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, type, voidindices, instancecount, basevertex)

  # Check if the function actually exists
  f = c.glDrawElementsInstancedBaseVertexOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMultiDrawElementsBaseVertexEXT(mode,
                                       param0,
                                       type,
                                       voidconstindices,
                                       drawcount,
                                       param1,
                                       mode_t=GLenum,
                                       param0_t=GLsizei,
                                       type_t=GLenum,
                                       voidconstindices_t=ctypes.c_void_p,
                                       drawcount_t=GLsizei,
                                       param1_t=GLint):
    restype = None
    argtypes = [
      mode_t, param0_t, type_t, voidconstindices_t, drawcount_t, param1_t
    ]
    cfunc = c.glMultiDrawElementsBaseVertexEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0, type, voidconstindices, drawcount, param1)

  # Check if the function actually exists
  f = c.glMultiDrawElementsBaseVertexEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferTextureOES(target,
                              attachment,
                              texture,
                              level,
                              target_t=GLenum,
                              attachment_t=GLenum,
                              texture_t=GLuint,
                              level_t=GLint):
    restype = None
    argtypes = [target_t, attachment_t, texture_t, level_t]
    cfunc = c.glFramebufferTextureOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, attachment, texture, level)

  # Check if the function actually exists
  f = c.glFramebufferTextureOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetProgramBinaryOES(program,
                            bufSize,
                            param0,
                            param1,
                            voidbinary,
                            program_t=GLuint,
                            bufSize_t=GLsizei,
                            param0_t=GLsizei,
                            param1_t=GLenum,
                            voidbinary_t=ctypes.c_void_p):
    restype = None
    argtypes = [program_t, bufSize_t, param0_t, param1_t, voidbinary_t]
    cfunc = c.glGetProgramBinaryOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, bufSize, param0, param1, voidbinary)

  # Check if the function actually exists
  f = c.glGetProgramBinaryOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramBinaryOES(program,
                         binaryFormat,
                         voidbinary,
                         length,
                         program_t=GLuint,
                         binaryFormat_t=GLenum,
                         voidbinary_t=ctypes.c_void_p,
                         length_t=GLint):
    restype = None
    argtypes = [program_t, binaryFormat_t, voidbinary_t, length_t]
    cfunc = c.glProgramBinaryOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, binaryFormat, voidbinary, length)

  # Check if the function actually exists
  f = c.glProgramBinaryOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUnmapBufferOES(target, target_t=GLenum):
    restype = GLboolean
    argtypes = [target_t]
    cfunc = c.glUnmapBufferOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target)

  # Check if the function actually exists
  f = c.glUnmapBufferOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetBufferPointervOES(target,
                             pname,
                             voidparams,
                             target_t=GLenum,
                             pname_t=GLenum,
                             voidparams_t=ctypes.c_void_p):
    restype = None
    argtypes = [target_t, pname_t, voidparams_t]
    cfunc = c.glGetBufferPointervOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, voidparams)

  # Check if the function actually exists
  f = c.glGetBufferPointervOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPrimitiveBoundingBoxOES(minX,
                                minY,
                                minZ,
                                minW,
                                maxX,
                                maxY,
                                maxZ,
                                maxW,
                                minX_t=GLfloat,
                                minY_t=GLfloat,
                                minZ_t=GLfloat,
                                minW_t=GLfloat,
                                maxX_t=GLfloat,
                                maxY_t=GLfloat,
                                maxZ_t=GLfloat,
                                maxW_t=GLfloat):
    restype = None
    argtypes = [minX_t, minY_t, minZ_t, minW_t, maxX_t, maxY_t, maxZ_t, maxW_t]
    cfunc = c.glPrimitiveBoundingBoxOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW)

  # Check if the function actually exists
  f = c.glPrimitiveBoundingBoxOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMinSampleShadingOES(value, value_t=GLfloat):
    restype = None
    argtypes = [value_t]
    cfunc = c.glMinSampleShadingOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(value)

  # Check if the function actually exists
  f = c.glMinSampleShadingOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPatchParameteriOES(pname, value, pname_t=GLenum, value_t=GLint):
    restype = None
    argtypes = [pname_t, value_t]
    cfunc = c.glPatchParameteriOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pname, value)

  # Check if the function actually exists
  f = c.glPatchParameteriOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexImage3DOES(target,
                      level,
                      internalformat,
                      width,
                      height,
                      depth,
                      border,
                      format,
                      type,
                      voidpixels,
                      target_t=GLenum,
                      level_t=GLint,
                      internalformat_t=GLenum,
                      width_t=GLsizei,
                      height_t=GLsizei,
                      depth_t=GLsizei,
                      border_t=GLint,
                      format_t=GLenum,
                      type_t=GLenum,
                      voidpixels_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      target_t, level_t, internalformat_t, width_t, height_t, depth_t,
      border_t, format_t, type_t, voidpixels_t
    ]
    cfunc = c.glTexImage3DOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, level, internalformat, width, height, depth, border,
                 format, type, voidpixels)

  # Check if the function actually exists
  f = c.glTexImage3DOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexSubImage3DOES(target,
                         level,
                         xoffset,
                         yoffset,
                         zoffset,
                         width,
                         height,
                         depth,
                         format,
                         type,
                         voidpixels,
                         target_t=GLenum,
                         level_t=GLint,
                         xoffset_t=GLint,
                         yoffset_t=GLint,
                         zoffset_t=GLint,
                         width_t=GLsizei,
                         height_t=GLsizei,
                         depth_t=GLsizei,
                         format_t=GLenum,
                         type_t=GLenum,
                         voidpixels_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      target_t, level_t, xoffset_t, yoffset_t, zoffset_t, width_t, height_t,
      depth_t, format_t, type_t, voidpixels_t
    ]
    cfunc = c.glTexSubImage3DOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, level, xoffset, yoffset, zoffset, width, height,
                 depth, format, type, voidpixels)

  # Check if the function actually exists
  f = c.glTexSubImage3DOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCopyTexSubImage3DOES(target,
                             level,
                             xoffset,
                             yoffset,
                             zoffset,
                             x,
                             y,
                             width,
                             height,
                             target_t=GLenum,
                             level_t=GLint,
                             xoffset_t=GLint,
                             yoffset_t=GLint,
                             zoffset_t=GLint,
                             x_t=GLint,
                             y_t=GLint,
                             width_t=GLsizei,
                             height_t=GLsizei):
    restype = None
    argtypes = [
      target_t, level_t, xoffset_t, yoffset_t, zoffset_t, x_t, y_t, width_t,
      height_t
    ]
    cfunc = c.glCopyTexSubImage3DOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, level, xoffset, yoffset, zoffset, x, y, width, height)

  # Check if the function actually exists
  f = c.glCopyTexSubImage3DOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCompressedTexImage3DOES(target,
                                level,
                                internalformat,
                                width,
                                height,
                                depth,
                                border,
                                imageSize,
                                voiddata,
                                target_t=GLenum,
                                level_t=GLint,
                                internalformat_t=GLenum,
                                width_t=GLsizei,
                                height_t=GLsizei,
                                depth_t=GLsizei,
                                border_t=GLint,
                                imageSize_t=GLsizei,
                                voiddata_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      target_t, level_t, internalformat_t, width_t, height_t, depth_t,
      border_t, imageSize_t, voiddata_t
    ]
    cfunc = c.glCompressedTexImage3DOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, level, internalformat, width, height, depth, border,
                 imageSize, voiddata)

  # Check if the function actually exists
  f = c.glCompressedTexImage3DOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCompressedTexSubImage3DOES(target,
                                   level,
                                   xoffset,
                                   yoffset,
                                   zoffset,
                                   width,
                                   height,
                                   depth,
                                   format,
                                   imageSize,
                                   voiddata,
                                   target_t=GLenum,
                                   level_t=GLint,
                                   xoffset_t=GLint,
                                   yoffset_t=GLint,
                                   zoffset_t=GLint,
                                   width_t=GLsizei,
                                   height_t=GLsizei,
                                   depth_t=GLsizei,
                                   format_t=GLenum,
                                   imageSize_t=GLsizei,
                                   voiddata_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      target_t, level_t, xoffset_t, yoffset_t, zoffset_t, width_t, height_t,
      depth_t, format_t, imageSize_t, voiddata_t
    ]
    cfunc = c.glCompressedTexSubImage3DOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, level, xoffset, yoffset, zoffset, width, height,
                 depth, format, imageSize, voiddata)

  # Check if the function actually exists
  f = c.glCompressedTexSubImage3DOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferTexture3DOES(target,
                                attachment,
                                textarget,
                                texture,
                                level,
                                zoffset,
                                target_t=GLenum,
                                attachment_t=GLenum,
                                textarget_t=GLenum,
                                texture_t=GLuint,
                                level_t=GLint,
                                zoffset_t=GLint):
    restype = None
    argtypes = [
      target_t, attachment_t, textarget_t, texture_t, level_t, zoffset_t
    ]
    cfunc = c.glFramebufferTexture3DOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, attachment, textarget, texture, level, zoffset)

  # Check if the function actually exists
  f = c.glFramebufferTexture3DOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexParameterIivOES(target,
                           pname,
                           param0,
                           target_t=GLenum,
                           pname_t=GLenum,
                           param0_t=GLint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glTexParameterIivOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glTexParameterIivOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexParameterIuivOES(target,
                            pname,
                            param0,
                            target_t=GLenum,
                            pname_t=GLenum,
                            param0_t=GLuint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glTexParameterIuivOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glTexParameterIuivOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetTexParameterIivOES(target,
                              pname,
                              param0,
                              target_t=GLenum,
                              pname_t=GLenum,
                              param0_t=GLint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glGetTexParameterIivOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glGetTexParameterIivOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetTexParameterIuivOES(target,
                               pname,
                               param0,
                               target_t=GLenum,
                               pname_t=GLenum,
                               param0_t=GLuint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glGetTexParameterIuivOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glGetTexParameterIuivOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSamplerParameterIivOES(sampler,
                               pname,
                               param0,
                               sampler_t=GLuint,
                               pname_t=GLenum,
                               param0_t=GLint):
    restype = None
    argtypes = [sampler_t, pname_t, param0_t]
    cfunc = c.glSamplerParameterIivOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(sampler, pname, param0)

  # Check if the function actually exists
  f = c.glSamplerParameterIivOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSamplerParameterIuivOES(sampler,
                                pname,
                                param0,
                                sampler_t=GLuint,
                                pname_t=GLenum,
                                param0_t=GLuint):
    restype = None
    argtypes = [sampler_t, pname_t, param0_t]
    cfunc = c.glSamplerParameterIuivOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(sampler, pname, param0)

  # Check if the function actually exists
  f = c.glSamplerParameterIuivOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetSamplerParameterIivOES(sampler,
                                  pname,
                                  param0,
                                  sampler_t=GLuint,
                                  pname_t=GLenum,
                                  param0_t=GLint):
    restype = None
    argtypes = [sampler_t, pname_t, param0_t]
    cfunc = c.glGetSamplerParameterIivOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(sampler, pname, param0)

  # Check if the function actually exists
  f = c.glGetSamplerParameterIivOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetSamplerParameterIuivOES(sampler,
                                   pname,
                                   param0,
                                   sampler_t=GLuint,
                                   pname_t=GLenum,
                                   param0_t=GLuint):
    restype = None
    argtypes = [sampler_t, pname_t, param0_t]
    cfunc = c.glGetSamplerParameterIuivOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(sampler, pname, param0)

  # Check if the function actually exists
  f = c.glGetSamplerParameterIuivOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexBufferOES(target,
                     internalformat,
                     buffer,
                     target_t=GLenum,
                     internalformat_t=GLenum,
                     buffer_t=GLuint):
    restype = None
    argtypes = [target_t, internalformat_t, buffer_t]
    cfunc = c.glTexBufferOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, internalformat, buffer)

  # Check if the function actually exists
  f = c.glTexBufferOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexBufferRangeOES(target,
                          internalformat,
                          buffer,
                          offset,
                          size,
                          target_t=GLenum,
                          internalformat_t=GLenum,
                          buffer_t=GLuint,
                          offset_t=GLintptr,
                          size_t=GLsizeiptr):
    restype = None
    argtypes = [target_t, internalformat_t, buffer_t, offset_t, size_t]
    cfunc = c.glTexBufferRangeOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, internalformat, buffer, offset, size)

  # Check if the function actually exists
  f = c.glTexBufferRangeOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexStorage3DMultisampleOES(target,
                                   samples,
                                   internalformat,
                                   width,
                                   height,
                                   depth,
                                   fixedsamplelocations,
                                   target_t=GLenum,
                                   samples_t=GLsizei,
                                   internalformat_t=GLenum,
                                   width_t=GLsizei,
                                   height_t=GLsizei,
                                   depth_t=GLsizei,
                                   fixedsamplelocations_t=GLboolean):
    restype = None
    argtypes = [
      target_t, samples_t, internalformat_t, width_t, height_t, depth_t,
      fixedsamplelocations_t
    ]
    cfunc = c.glTexStorage3DMultisampleOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, samples, internalformat, width, height, depth,
                 fixedsamplelocations)

  # Check if the function actually exists
  f = c.glTexStorage3DMultisampleOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureViewOES(texture,
                       target,
                       origtexture,
                       internalformat,
                       minlevel,
                       numlevels,
                       minlayer,
                       numlayers,
                       texture_t=GLuint,
                       target_t=GLenum,
                       origtexture_t=GLuint,
                       internalformat_t=GLenum,
                       minlevel_t=GLuint,
                       numlevels_t=GLuint,
                       minlayer_t=GLuint,
                       numlayers_t=GLuint):
    restype = None
    argtypes = [
      texture_t, target_t, origtexture_t, internalformat_t, minlevel_t,
      numlevels_t, minlayer_t, numlayers_t
    ]
    cfunc = c.glTextureViewOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, target, origtexture, internalformat, minlevel,
                 numlevels, minlayer, numlayers)

  # Check if the function actually exists
  f = c.glTextureViewOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBindVertexArrayOES(array, array_t=GLuint):
    restype = None
    argtypes = [array_t]
    cfunc = c.glBindVertexArrayOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(array)

  # Check if the function actually exists
  f = c.glBindVertexArrayOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDeleteVertexArraysOES(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glDeleteVertexArraysOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glDeleteVertexArraysOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGenVertexArraysOES(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glGenVertexArraysOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glGenVertexArraysOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsVertexArrayOES(array, array_t=GLuint):
    restype = GLboolean
    argtypes = [array_t]
    cfunc = c.glIsVertexArrayOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(array)

  # Check if the function actually exists
  f = c.glIsVertexArrayOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glViewportArrayvOES(first,
                          count,
                          param0,
                          first_t=GLuint,
                          count_t=GLsizei,
                          param0_t=GLfloat):
    restype = None
    argtypes = [first_t, count_t, param0_t]
    cfunc = c.glViewportArrayvOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(first, count, param0)

  # Check if the function actually exists
  f = c.glViewportArrayvOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glViewportIndexedfOES(index,
                            x,
                            y,
                            w,
                            h,
                            index_t=GLuint,
                            x_t=GLfloat,
                            y_t=GLfloat,
                            w_t=GLfloat,
                            h_t=GLfloat):
    restype = None
    argtypes = [index_t, x_t, y_t, w_t, h_t]
    cfunc = c.glViewportIndexedfOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, x, y, w, h)

  # Check if the function actually exists
  f = c.glViewportIndexedfOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glViewportIndexedfvOES(index, param0, index_t=GLuint, param0_t=GLfloat):
    restype = None
    argtypes = [index_t, param0_t]
    cfunc = c.glViewportIndexedfvOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, param0)

  # Check if the function actually exists
  f = c.glViewportIndexedfvOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glScissorArrayvOES(first,
                         count,
                         param0,
                         first_t=GLuint,
                         count_t=GLsizei,
                         param0_t=GLint):
    restype = None
    argtypes = [first_t, count_t, param0_t]
    cfunc = c.glScissorArrayvOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(first, count, param0)

  # Check if the function actually exists
  f = c.glScissorArrayvOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glScissorIndexedOES(index,
                          left,
                          bottom,
                          width,
                          height,
                          index_t=GLuint,
                          left_t=GLint,
                          bottom_t=GLint,
                          width_t=GLsizei,
                          height_t=GLsizei):
    restype = None
    argtypes = [index_t, left_t, bottom_t, width_t, height_t]
    cfunc = c.glScissorIndexedOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, left, bottom, width, height)

  # Check if the function actually exists
  f = c.glScissorIndexedOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glScissorIndexedvOES(index, param0, index_t=GLuint, param0_t=GLint):
    restype = None
    argtypes = [index_t, param0_t]
    cfunc = c.glScissorIndexedvOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, param0)

  # Check if the function actually exists
  f = c.glScissorIndexedvOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDepthRangeArrayfvOES(first,
                             count,
                             param0,
                             first_t=GLuint,
                             count_t=GLsizei,
                             param0_t=GLfloat):
    restype = None
    argtypes = [first_t, count_t, param0_t]
    cfunc = c.glDepthRangeArrayfvOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(first, count, param0)

  # Check if the function actually exists
  f = c.glDepthRangeArrayfvOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDepthRangeIndexedfOES(index,
                              n,
                              f,
                              index_t=GLuint,
                              n_t=GLfloat,
                              f_t=GLfloat):
    restype = None
    argtypes = [index_t, n_t, f_t]
    cfunc = c.glDepthRangeIndexedfOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, n, f)

  # Check if the function actually exists
  f = c.glDepthRangeIndexedfOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetFloati_vOES(target,
                       index,
                       param0,
                       target_t=GLenum,
                       index_t=GLuint,
                       param0_t=GLfloat):
    restype = None
    argtypes = [target_t, index_t, param0_t]
    cfunc = c.glGetFloati_vOES
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index, param0)

  # Check if the function actually exists
  f = c.glGetFloati_vOES
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glRenderbufferStorageMultisampleAdvancedAMD(target,
                                                  samples,
                                                  storageSamples,
                                                  internalformat,
                                                  width,
                                                  height,
                                                  target_t=GLenum,
                                                  samples_t=GLsizei,
                                                  storageSamples_t=GLsizei,
                                                  internalformat_t=GLenum,
                                                  width_t=GLsizei,
                                                  height_t=GLsizei):
    restype = None
    argtypes = [
      target_t, samples_t, storageSamples_t, internalformat_t, width_t,
      height_t
    ]
    cfunc = c.glRenderbufferStorageMultisampleAdvancedAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, samples, storageSamples, internalformat, width,
                 height)

  # Check if the function actually exists
  f = c.glRenderbufferStorageMultisampleAdvancedAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glNamedRenderbufferStorageMultisampleAdvancedAMD(
      renderbuffer,
      samples,
      storageSamples,
      internalformat,
      width,
      height,
      renderbuffer_t=GLuint,
      samples_t=GLsizei,
      storageSamples_t=GLsizei,
      internalformat_t=GLenum,
      width_t=GLsizei,
      height_t=GLsizei):
    restype = None
    argtypes = [
      renderbuffer_t, samples_t, storageSamples_t, internalformat_t, width_t,
      height_t
    ]
    cfunc = c.glNamedRenderbufferStorageMultisampleAdvancedAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(renderbuffer, samples, storageSamples, internalformat, width,
                 height)

  # Check if the function actually exists
  f = c.glNamedRenderbufferStorageMultisampleAdvancedAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfMonitorGroupsAMD(param0,
                                groupsSize,
                                param1,
                                param0_t=GLint,
                                groupsSize_t=GLsizei,
                                param1_t=GLuint):
    restype = None
    argtypes = [param0_t, groupsSize_t, param1_t]
    cfunc = c.glGetPerfMonitorGroupsAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0, groupsSize, param1)

  # Check if the function actually exists
  f = c.glGetPerfMonitorGroupsAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfMonitorCountersAMD(group,
                                  param0,
                                  param1,
                                  counterSize,
                                  param2,
                                  group_t=GLuint,
                                  param0_t=GLint,
                                  param1_t=GLint,
                                  counterSize_t=GLsizei,
                                  param2_t=GLuint):
    restype = None
    argtypes = [group_t, param0_t, param1_t, counterSize_t, param2_t]
    cfunc = c.glGetPerfMonitorCountersAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(group, param0, param1, counterSize, param2)

  # Check if the function actually exists
  f = c.glGetPerfMonitorCountersAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfMonitorGroupStringAMD(group,
                                     bufSize,
                                     param0,
                                     param1,
                                     group_t=GLuint,
                                     bufSize_t=GLsizei,
                                     param0_t=GLsizei,
                                     param1_t=GLchar):
    restype = None
    argtypes = [group_t, bufSize_t, param0_t, param1_t]
    cfunc = c.glGetPerfMonitorGroupStringAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(group, bufSize, param0, param1)

  # Check if the function actually exists
  f = c.glGetPerfMonitorGroupStringAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfMonitorCounterStringAMD(group,
                                       counter,
                                       bufSize,
                                       param0,
                                       param1,
                                       group_t=GLuint,
                                       counter_t=GLuint,
                                       bufSize_t=GLsizei,
                                       param0_t=GLsizei,
                                       param1_t=GLchar):
    restype = None
    argtypes = [group_t, counter_t, bufSize_t, param0_t, param1_t]
    cfunc = c.glGetPerfMonitorCounterStringAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(group, counter, bufSize, param0, param1)

  # Check if the function actually exists
  f = c.glGetPerfMonitorCounterStringAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfMonitorCounterInfoAMD(group,
                                     counter,
                                     pname,
                                     voiddata,
                                     group_t=GLuint,
                                     counter_t=GLuint,
                                     pname_t=GLenum,
                                     voiddata_t=ctypes.c_void_p):
    restype = None
    argtypes = [group_t, counter_t, pname_t, voiddata_t]
    cfunc = c.glGetPerfMonitorCounterInfoAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(group, counter, pname, voiddata)

  # Check if the function actually exists
  f = c.glGetPerfMonitorCounterInfoAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGenPerfMonitorsAMD(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glGenPerfMonitorsAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glGenPerfMonitorsAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDeletePerfMonitorsAMD(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glDeletePerfMonitorsAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glDeletePerfMonitorsAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSelectPerfMonitorCountersAMD(monitor,
                                     enable,
                                     group,
                                     numCounters,
                                     param0,
                                     monitor_t=GLuint,
                                     enable_t=GLboolean,
                                     group_t=GLuint,
                                     numCounters_t=GLint,
                                     param0_t=GLuint):
    restype = None
    argtypes = [monitor_t, enable_t, group_t, numCounters_t, param0_t]
    cfunc = c.glSelectPerfMonitorCountersAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(monitor, enable, group, numCounters, param0)

  # Check if the function actually exists
  f = c.glSelectPerfMonitorCountersAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBeginPerfMonitorAMD(monitor, monitor_t=GLuint):
    restype = None
    argtypes = [monitor_t]
    cfunc = c.glBeginPerfMonitorAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(monitor)

  # Check if the function actually exists
  f = c.glBeginPerfMonitorAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEndPerfMonitorAMD(monitor, monitor_t=GLuint):
    restype = None
    argtypes = [monitor_t]
    cfunc = c.glEndPerfMonitorAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(monitor)

  # Check if the function actually exists
  f = c.glEndPerfMonitorAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfMonitorCounterDataAMD(monitor,
                                     pname,
                                     dataSize,
                                     param0,
                                     param1,
                                     monitor_t=GLuint,
                                     pname_t=GLenum,
                                     dataSize_t=GLsizei,
                                     param0_t=GLuint,
                                     param1_t=GLint):
    restype = None
    argtypes = [monitor_t, pname_t, dataSize_t, param0_t, param1_t]
    cfunc = c.glGetPerfMonitorCounterDataAMD
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(monitor, pname, dataSize, param0, param1)

  # Check if the function actually exists
  f = c.glGetPerfMonitorCounterDataAMD
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlitFramebufferANGLE(srcX0,
                             srcY0,
                             srcX1,
                             srcY1,
                             dstX0,
                             dstY0,
                             dstX1,
                             dstY1,
                             mask,
                             filter,
                             srcX0_t=GLint,
                             srcY0_t=GLint,
                             srcX1_t=GLint,
                             srcY1_t=GLint,
                             dstX0_t=GLint,
                             dstY0_t=GLint,
                             dstX1_t=GLint,
                             dstY1_t=GLint,
                             mask_t=GLbitfield,
                             filter_t=GLenum):
    restype = None
    argtypes = [
      srcX0_t, srcY0_t, srcX1_t, srcY1_t, dstX0_t, dstY0_t, dstX1_t, dstY1_t,
      mask_t, filter_t
    ]
    cfunc = c.glBlitFramebufferANGLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask,
                 filter)

  # Check if the function actually exists
  f = c.glBlitFramebufferANGLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glRenderbufferStorageMultisampleANGLE(target,
                                            samples,
                                            internalformat,
                                            width,
                                            height,
                                            target_t=GLenum,
                                            samples_t=GLsizei,
                                            internalformat_t=GLenum,
                                            width_t=GLsizei,
                                            height_t=GLsizei):
    restype = None
    argtypes = [target_t, samples_t, internalformat_t, width_t, height_t]
    cfunc = c.glRenderbufferStorageMultisampleANGLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, samples, internalformat, width, height)

  # Check if the function actually exists
  f = c.glRenderbufferStorageMultisampleANGLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawArraysInstancedANGLE(mode,
                                 first,
                                 count,
                                 primcount,
                                 mode_t=GLenum,
                                 first_t=GLint,
                                 count_t=GLsizei,
                                 primcount_t=GLsizei):
    restype = None
    argtypes = [mode_t, first_t, count_t, primcount_t]
    cfunc = c.glDrawArraysInstancedANGLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, first, count, primcount)

  # Check if the function actually exists
  f = c.glDrawArraysInstancedANGLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawElementsInstancedANGLE(mode,
                                   count,
                                   type,
                                   voidindices,
                                   primcount,
                                   mode_t=GLenum,
                                   count_t=GLsizei,
                                   type_t=GLenum,
                                   voidindices_t=ctypes.c_void_p,
                                   primcount_t=GLsizei):
    restype = None
    argtypes = [mode_t, count_t, type_t, voidindices_t, primcount_t]
    cfunc = c.glDrawElementsInstancedANGLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, type, voidindices, primcount)

  # Check if the function actually exists
  f = c.glDrawElementsInstancedANGLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glVertexAttribDivisorANGLE(index,
                                 divisor,
                                 index_t=GLuint,
                                 divisor_t=GLuint):
    restype = None
    argtypes = [index_t, divisor_t]
    cfunc = c.glVertexAttribDivisorANGLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, divisor)

  # Check if the function actually exists
  f = c.glVertexAttribDivisorANGLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetTranslatedShaderSourceANGLE(shader,
                                       bufSize,
                                       param0,
                                       param1,
                                       shader_t=GLuint,
                                       bufSize_t=GLsizei,
                                       param0_t=GLsizei,
                                       param1_t=GLchar):
    restype = None
    argtypes = [shader_t, bufSize_t, param0_t, param1_t]
    cfunc = c.glGetTranslatedShaderSourceANGLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(shader, bufSize, param0, param1)

  # Check if the function actually exists
  f = c.glGetTranslatedShaderSourceANGLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCopyTextureLevelsAPPLE(destinationTexture,
                               sourceTexture,
                               sourceBaseLevel,
                               sourceLevelCount,
                               destinationTexture_t=GLuint,
                               sourceTexture_t=GLuint,
                               sourceBaseLevel_t=GLint,
                               sourceLevelCount_t=GLsizei):
    restype = None
    argtypes = [
      destinationTexture_t, sourceTexture_t, sourceBaseLevel_t,
      sourceLevelCount_t
    ]
    cfunc = c.glCopyTextureLevelsAPPLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(destinationTexture, sourceTexture, sourceBaseLevel,
                 sourceLevelCount)

  # Check if the function actually exists
  f = c.glCopyTextureLevelsAPPLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glRenderbufferStorageMultisampleAPPLE(target,
                                            samples,
                                            internalformat,
                                            width,
                                            height,
                                            target_t=GLenum,
                                            samples_t=GLsizei,
                                            internalformat_t=GLenum,
                                            width_t=GLsizei,
                                            height_t=GLsizei):
    restype = None
    argtypes = [target_t, samples_t, internalformat_t, width_t, height_t]
    cfunc = c.glRenderbufferStorageMultisampleAPPLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, samples, internalformat, width, height)

  # Check if the function actually exists
  f = c.glRenderbufferStorageMultisampleAPPLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glResolveMultisampleFramebufferAPPLE(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glResolveMultisampleFramebufferAPPLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glResolveMultisampleFramebufferAPPLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetInteger64vAPPLE(pname, param0, pname_t=GLenum, param0_t=GLint64):
    restype = None
    argtypes = [pname_t, param0_t]
    cfunc = c.glGetInteger64vAPPLE
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pname, param0)

  # Check if the function actually exists
  f = c.glGetInteger64vAPPLE
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEGLImageTargetTexStorageEXT(target,
                                    image,
                                    attrib_list,
                                    target_t=GLenum,
                                    image_t=GLeglImageOES,
                                    attrib_list_t=ctypes.POINTER(GLint)):
    restype = None
    argtypes = [target_t, image_t, attrib_list_t]
    cfunc = c.glEGLImageTargetTexStorageEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, image, attrib_list)

  # Check if the function actually exists
  f = c.glEGLImageTargetTexStorageEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEGLImageTargetTextureStorageEXT(texture,
                                        image,
                                        attrib_list,
                                        texture_t=GLuint,
                                        image_t=GLeglImageOES,
                                        attrib_list_t=ctypes.POINTER(GLint)):
    restype = None
    argtypes = [texture_t, image_t, attrib_list_t]
    cfunc = c.glEGLImageTargetTextureStorageEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, image, attrib_list)

  # Check if the function actually exists
  f = c.glEGLImageTargetTextureStorageEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawArraysInstancedBaseInstanceEXT(mode,
                                           first,
                                           count,
                                           instancecount,
                                           baseinstance,
                                           mode_t=GLenum,
                                           first_t=GLint,
                                           count_t=GLsizei,
                                           instancecount_t=GLsizei,
                                           baseinstance_t=GLuint):
    restype = None
    argtypes = [mode_t, first_t, count_t, instancecount_t, baseinstance_t]
    cfunc = c.glDrawArraysInstancedBaseInstanceEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, first, count, instancecount, baseinstance)

  # Check if the function actually exists
  f = c.glDrawArraysInstancedBaseInstanceEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawElementsInstancedBaseInstanceEXT(mode,
                                             count,
                                             type,
                                             voidindices,
                                             instancecount,
                                             baseinstance,
                                             mode_t=GLenum,
                                             count_t=GLsizei,
                                             type_t=GLenum,
                                             voidindices_t=ctypes.c_void_p,
                                             instancecount_t=GLsizei,
                                             baseinstance_t=GLuint):
    restype = None
    argtypes = [
      mode_t, count_t, type_t, voidindices_t, instancecount_t, baseinstance_t
    ]
    cfunc = c.glDrawElementsInstancedBaseInstanceEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, type, voidindices, instancecount, baseinstance)

  # Check if the function actually exists
  f = c.glDrawElementsInstancedBaseInstanceEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawElementsInstancedBaseVertexBaseInstanceEXT(
      mode,
      count,
      type,
      voidindices,
      instancecount,
      basevertex,
      baseinstance,
      mode_t=GLenum,
      count_t=GLsizei,
      type_t=GLenum,
      voidindices_t=ctypes.c_void_p,
      instancecount_t=GLsizei,
      basevertex_t=GLint,
      baseinstance_t=GLuint):
    restype = None
    argtypes = [
      mode_t, count_t, type_t, voidindices_t, instancecount_t, basevertex_t,
      baseinstance_t
    ]
    cfunc = c.glDrawElementsInstancedBaseVertexBaseInstanceEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, type, voidindices, instancecount, basevertex,
                 baseinstance)

  # Check if the function actually exists
  f = c.glDrawElementsInstancedBaseVertexBaseInstanceEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBindFragDataLocationIndexedEXT(program,
                                       colorNumber,
                                       index,
                                       param0,
                                       program_t=GLuint,
                                       colorNumber_t=GLuint,
                                       index_t=GLuint,
                                       param0_t=GLchar):
    restype = None
    argtypes = [program_t, colorNumber_t, index_t, param0_t]
    cfunc = c.glBindFragDataLocationIndexedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, colorNumber, index, param0)

  # Check if the function actually exists
  f = c.glBindFragDataLocationIndexedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBindFragDataLocationEXT(program,
                                color,
                                param0,
                                program_t=GLuint,
                                color_t=GLuint,
                                param0_t=GLchar):
    restype = None
    argtypes = [program_t, color_t, param0_t]
    cfunc = c.glBindFragDataLocationEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, color, param0)

  # Check if the function actually exists
  f = c.glBindFragDataLocationEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetProgramResourceLocationIndexEXT(program,
                                           programInterface,
                                           param0,
                                           program_t=GLuint,
                                           programInterface_t=GLenum,
                                           param0_t=GLchar):
    restype = GLint
    argtypes = [program_t, programInterface_t, param0_t]
    cfunc = c.glGetProgramResourceLocationIndexEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, programInterface, param0)

  # Check if the function actually exists
  f = c.glGetProgramResourceLocationIndexEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetFragDataIndexEXT(program, param0, program_t=GLuint,
                            param0_t=GLchar):
    restype = GLint
    argtypes = [program_t, param0_t]
    cfunc = c.glGetFragDataIndexEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, param0)

  # Check if the function actually exists
  f = c.glGetFragDataIndexEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBufferStorageEXT(target,
                         size,
                         voiddata,
                         flags,
                         target_t=GLenum,
                         size_t=GLsizeiptr,
                         voiddata_t=ctypes.c_void_p,
                         flags_t=GLbitfield):
    restype = None
    argtypes = [target_t, size_t, voiddata_t, flags_t]
    cfunc = c.glBufferStorageEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, size, voiddata, flags)

  # Check if the function actually exists
  f = c.glBufferStorageEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glClearTexImageEXT(texture,
                         level,
                         format,
                         type,
                         voiddata,
                         texture_t=GLuint,
                         level_t=GLint,
                         format_t=GLenum,
                         type_t=GLenum,
                         voiddata_t=ctypes.c_void_p):
    restype = None
    argtypes = [texture_t, level_t, format_t, type_t, voiddata_t]
    cfunc = c.glClearTexImageEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, level, format, type, voiddata)

  # Check if the function actually exists
  f = c.glClearTexImageEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glClearTexSubImageEXT(texture,
                            level,
                            xoffset,
                            yoffset,
                            zoffset,
                            width,
                            height,
                            depth,
                            format,
                            type,
                            voiddata,
                            texture_t=GLuint,
                            level_t=GLint,
                            xoffset_t=GLint,
                            yoffset_t=GLint,
                            zoffset_t=GLint,
                            width_t=GLsizei,
                            height_t=GLsizei,
                            depth_t=GLsizei,
                            format_t=GLenum,
                            type_t=GLenum,
                            voiddata_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      texture_t, level_t, xoffset_t, yoffset_t, zoffset_t, width_t, height_t,
      depth_t, format_t, type_t, voiddata_t
    ]
    cfunc = c.glClearTexSubImageEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, level, xoffset, yoffset, zoffset, width, height,
                 depth, format, type, voiddata)

  # Check if the function actually exists
  f = c.glClearTexSubImageEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glClipControlEXT(origin, depth, origin_t=GLenum, depth_t=GLenum):
    restype = None
    argtypes = [origin_t, depth_t]
    cfunc = c.glClipControlEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(origin, depth)

  # Check if the function actually exists
  f = c.glClipControlEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCopyImageSubDataEXT(srcName,
                            srcTarget,
                            srcLevel,
                            srcX,
                            srcY,
                            srcZ,
                            dstName,
                            dstTarget,
                            dstLevel,
                            dstX,
                            dstY,
                            dstZ,
                            srcWidth,
                            srcHeight,
                            srcDepth,
                            srcName_t=GLuint,
                            srcTarget_t=GLenum,
                            srcLevel_t=GLint,
                            srcX_t=GLint,
                            srcY_t=GLint,
                            srcZ_t=GLint,
                            dstName_t=GLuint,
                            dstTarget_t=GLenum,
                            dstLevel_t=GLint,
                            dstX_t=GLint,
                            dstY_t=GLint,
                            dstZ_t=GLint,
                            srcWidth_t=GLsizei,
                            srcHeight_t=GLsizei,
                            srcDepth_t=GLsizei):
    restype = None
    argtypes = [
      srcName_t, srcTarget_t, srcLevel_t, srcX_t, srcY_t, srcZ_t, dstName_t,
      dstTarget_t, dstLevel_t, dstX_t, dstY_t, dstZ_t, srcWidth_t, srcHeight_t,
      srcDepth_t
    ]
    cfunc = c.glCopyImageSubDataEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName,
                 dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight,
                 srcDepth)

  # Check if the function actually exists
  f = c.glCopyImageSubDataEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glLabelObjectEXT(type,
                       object,
                       length,
                       param0,
                       type_t=GLenum,
                       object_t=GLuint,
                       length_t=GLsizei,
                       param0_t=GLchar):
    restype = None
    argtypes = [type_t, object_t, length_t, param0_t]
    cfunc = c.glLabelObjectEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(type, object, length, param0)

  # Check if the function actually exists
  f = c.glLabelObjectEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetObjectLabelEXT(type,
                          object,
                          bufSize,
                          param0,
                          param1,
                          type_t=GLenum,
                          object_t=GLuint,
                          bufSize_t=GLsizei,
                          param0_t=GLsizei,
                          param1_t=GLchar):
    restype = None
    argtypes = [type_t, object_t, bufSize_t, param0_t, param1_t]
    cfunc = c.glGetObjectLabelEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(type, object, bufSize, param0, param1)

  # Check if the function actually exists
  f = c.glGetObjectLabelEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glInsertEventMarkerEXT(length, param0, length_t=GLsizei,
                             param0_t=GLchar):
    restype = None
    argtypes = [length_t, param0_t]
    cfunc = c.glInsertEventMarkerEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(length, param0)

  # Check if the function actually exists
  f = c.glInsertEventMarkerEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPushGroupMarkerEXT(length, param0, length_t=GLsizei, param0_t=GLchar):
    restype = None
    argtypes = [length_t, param0_t]
    cfunc = c.glPushGroupMarkerEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(length, param0)

  # Check if the function actually exists
  f = c.glPushGroupMarkerEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPopGroupMarkerEXT(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glPopGroupMarkerEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glPopGroupMarkerEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDiscardFramebufferEXT(target,
                              numAttachments,
                              param0,
                              target_t=GLenum,
                              numAttachments_t=GLsizei,
                              param0_t=GLenum):
    restype = None
    argtypes = [target_t, numAttachments_t, param0_t]
    cfunc = c.glDiscardFramebufferEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, numAttachments, param0)

  # Check if the function actually exists
  f = c.glDiscardFramebufferEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGenQueriesEXT(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glGenQueriesEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glGenQueriesEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDeleteQueriesEXT(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glDeleteQueriesEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glDeleteQueriesEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsQueryEXT(id, id_t=GLuint):
    restype = GLboolean
    argtypes = [id_t]
    cfunc = c.glIsQueryEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(id)

  # Check if the function actually exists
  f = c.glIsQueryEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBeginQueryEXT(target, id, target_t=GLenum, id_t=GLuint):
    restype = None
    argtypes = [target_t, id_t]
    cfunc = c.glBeginQueryEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, id)

  # Check if the function actually exists
  f = c.glBeginQueryEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEndQueryEXT(target, target_t=GLenum):
    restype = None
    argtypes = [target_t]
    cfunc = c.glEndQueryEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target)

  # Check if the function actually exists
  f = c.glEndQueryEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glQueryCounterEXT(id, target, id_t=GLuint, target_t=GLenum):
    restype = None
    argtypes = [id_t, target_t]
    cfunc = c.glQueryCounterEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(id, target)

  # Check if the function actually exists
  f = c.glQueryCounterEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetQueryivEXT(target,
                      pname,
                      param0,
                      target_t=GLenum,
                      pname_t=GLenum,
                      param0_t=GLint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glGetQueryivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glGetQueryivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetQueryObjectivEXT(id,
                            pname,
                            param0,
                            id_t=GLuint,
                            pname_t=GLenum,
                            param0_t=GLint):
    restype = None
    argtypes = [id_t, pname_t, param0_t]
    cfunc = c.glGetQueryObjectivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(id, pname, param0)

  # Check if the function actually exists
  f = c.glGetQueryObjectivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetQueryObjectuivEXT(id,
                             pname,
                             param0,
                             id_t=GLuint,
                             pname_t=GLenum,
                             param0_t=GLuint):
    restype = None
    argtypes = [id_t, pname_t, param0_t]
    cfunc = c.glGetQueryObjectuivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(id, pname, param0)

  # Check if the function actually exists
  f = c.glGetQueryObjectuivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetQueryObjecti64vEXT(id,
                              pname,
                              param0,
                              id_t=GLuint,
                              pname_t=GLenum,
                              param0_t=GLint64):
    restype = None
    argtypes = [id_t, pname_t, param0_t]
    cfunc = c.glGetQueryObjecti64vEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(id, pname, param0)

  # Check if the function actually exists
  f = c.glGetQueryObjecti64vEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetQueryObjectui64vEXT(id,
                               pname,
                               param0,
                               id_t=GLuint,
                               pname_t=GLenum,
                               param0_t=GLuint64):
    restype = None
    argtypes = [id_t, pname_t, param0_t]
    cfunc = c.glGetQueryObjectui64vEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(id, pname, param0)

  # Check if the function actually exists
  f = c.glGetQueryObjectui64vEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetInteger64vEXT(pname, param0, pname_t=GLenum, param0_t=GLint64):
    restype = None
    argtypes = [pname_t, param0_t]
    cfunc = c.glGetInteger64vEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pname, param0)

  # Check if the function actually exists
  f = c.glGetInteger64vEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawBuffersEXT(n, param0, n_t=GLsizei, param0_t=GLenum):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glDrawBuffersEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glDrawBuffersEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEnableiEXT(target, index, target_t=GLenum, index_t=GLuint):
    restype = None
    argtypes = [target_t, index_t]
    cfunc = c.glEnableiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index)

  # Check if the function actually exists
  f = c.glEnableiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDisableiEXT(target, index, target_t=GLenum, index_t=GLuint):
    restype = None
    argtypes = [target_t, index_t]
    cfunc = c.glDisableiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index)

  # Check if the function actually exists
  f = c.glDisableiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendEquationiEXT(buf, mode, buf_t=GLuint, mode_t=GLenum):
    restype = None
    argtypes = [buf_t, mode_t]
    cfunc = c.glBlendEquationiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buf, mode)

  # Check if the function actually exists
  f = c.glBlendEquationiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendEquationSeparateiEXT(buf,
                                  modeRGB,
                                  modeAlpha,
                                  buf_t=GLuint,
                                  modeRGB_t=GLenum,
                                  modeAlpha_t=GLenum):
    restype = None
    argtypes = [buf_t, modeRGB_t, modeAlpha_t]
    cfunc = c.glBlendEquationSeparateiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buf, modeRGB, modeAlpha)

  # Check if the function actually exists
  f = c.glBlendEquationSeparateiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendFunciEXT(buf, src, dst, buf_t=GLuint, src_t=GLenum, dst_t=GLenum):
    restype = None
    argtypes = [buf_t, src_t, dst_t]
    cfunc = c.glBlendFunciEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buf, src, dst)

  # Check if the function actually exists
  f = c.glBlendFunciEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendFuncSeparateiEXT(buf,
                              srcRGB,
                              dstRGB,
                              srcAlpha,
                              dstAlpha,
                              buf_t=GLuint,
                              srcRGB_t=GLenum,
                              dstRGB_t=GLenum,
                              srcAlpha_t=GLenum,
                              dstAlpha_t=GLenum):
    restype = None
    argtypes = [buf_t, srcRGB_t, dstRGB_t, srcAlpha_t, dstAlpha_t]
    cfunc = c.glBlendFuncSeparateiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)

  # Check if the function actually exists
  f = c.glBlendFuncSeparateiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glColorMaskiEXT(index,
                      r,
                      g,
                      b,
                      a,
                      index_t=GLuint,
                      r_t=GLboolean,
                      g_t=GLboolean,
                      b_t=GLboolean,
                      a_t=GLboolean):
    restype = None
    argtypes = [index_t, r_t, g_t, b_t, a_t]
    cfunc = c.glColorMaskiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, r, g, b, a)

  # Check if the function actually exists
  f = c.glColorMaskiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsEnablediEXT(target, index, target_t=GLenum, index_t=GLuint):
    restype = GLboolean
    argtypes = [target_t, index_t]
    cfunc = c.glIsEnablediEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index)

  # Check if the function actually exists
  f = c.glIsEnablediEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawElementsBaseVertexEXT(mode,
                                  count,
                                  type,
                                  voidindices,
                                  basevertex,
                                  mode_t=GLenum,
                                  count_t=GLsizei,
                                  type_t=GLenum,
                                  voidindices_t=ctypes.c_void_p,
                                  basevertex_t=GLint):
    restype = None
    argtypes = [mode_t, count_t, type_t, voidindices_t, basevertex_t]
    cfunc = c.glDrawElementsBaseVertexEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, type, voidindices, basevertex)

  # Check if the function actually exists
  f = c.glDrawElementsBaseVertexEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawRangeElementsBaseVertexEXT(mode,
                                       start,
                                       end,
                                       count,
                                       type,
                                       voidindices,
                                       basevertex,
                                       mode_t=GLenum,
                                       start_t=GLuint,
                                       end_t=GLuint,
                                       count_t=GLsizei,
                                       type_t=GLenum,
                                       voidindices_t=ctypes.c_void_p,
                                       basevertex_t=GLint):
    restype = None
    argtypes = [
      mode_t, start_t, end_t, count_t, type_t, voidindices_t, basevertex_t
    ]
    cfunc = c.glDrawRangeElementsBaseVertexEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, start, end, count, type, voidindices, basevertex)

  # Check if the function actually exists
  f = c.glDrawRangeElementsBaseVertexEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawElementsInstancedBaseVertexEXT(mode,
                                           count,
                                           type,
                                           voidindices,
                                           instancecount,
                                           basevertex,
                                           mode_t=GLenum,
                                           count_t=GLsizei,
                                           type_t=GLenum,
                                           voidindices_t=ctypes.c_void_p,
                                           instancecount_t=GLsizei,
                                           basevertex_t=GLint):
    restype = None
    argtypes = [
      mode_t, count_t, type_t, voidindices_t, instancecount_t, basevertex_t
    ]
    cfunc = c.glDrawElementsInstancedBaseVertexEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, type, voidindices, instancecount, basevertex)

  # Check if the function actually exists
  f = c.glDrawElementsInstancedBaseVertexEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawArraysInstancedEXT(mode,
                               start,
                               count,
                               primcount,
                               mode_t=GLenum,
                               start_t=GLint,
                               count_t=GLsizei,
                               primcount_t=GLsizei):
    restype = None
    argtypes = [mode_t, start_t, count_t, primcount_t]
    cfunc = c.glDrawArraysInstancedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, start, count, primcount)

  # Check if the function actually exists
  f = c.glDrawArraysInstancedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawElementsInstancedEXT(mode,
                                 count,
                                 type,
                                 voidindices,
                                 primcount,
                                 mode_t=GLenum,
                                 count_t=GLsizei,
                                 type_t=GLenum,
                                 voidindices_t=ctypes.c_void_p,
                                 primcount_t=GLsizei):
    restype = None
    argtypes = [mode_t, count_t, type_t, voidindices_t, primcount_t]
    cfunc = c.glDrawElementsInstancedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, type, voidindices, primcount)

  # Check if the function actually exists
  f = c.glDrawElementsInstancedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawTransformFeedbackEXT(mode, id, mode_t=GLenum, id_t=GLuint):
    restype = None
    argtypes = [mode_t, id_t]
    cfunc = c.glDrawTransformFeedbackEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, id)

  # Check if the function actually exists
  f = c.glDrawTransformFeedbackEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawTransformFeedbackInstancedEXT(mode,
                                          id,
                                          instancecount,
                                          mode_t=GLenum,
                                          id_t=GLuint,
                                          instancecount_t=GLsizei):
    restype = None
    argtypes = [mode_t, id_t, instancecount_t]
    cfunc = c.glDrawTransformFeedbackInstancedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, id, instancecount)

  # Check if the function actually exists
  f = c.glDrawTransformFeedbackInstancedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBufferStorageExternalEXT(target,
                                 offset,
                                 size,
                                 clientBuffer,
                                 flags,
                                 target_t=GLenum,
                                 offset_t=GLintptr,
                                 size_t=GLsizeiptr,
                                 clientBuffer_t=GLeglClientBufferEXT,
                                 flags_t=GLbitfield):
    restype = None
    argtypes = [target_t, offset_t, size_t, clientBuffer_t, flags_t]
    cfunc = c.glBufferStorageExternalEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, offset, size, clientBuffer, flags)

  # Check if the function actually exists
  f = c.glBufferStorageExternalEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glNamedBufferStorageExternalEXT(buffer,
                                      offset,
                                      size,
                                      clientBuffer,
                                      flags,
                                      buffer_t=GLuint,
                                      offset_t=GLintptr,
                                      size_t=GLsizeiptr,
                                      clientBuffer_t=GLeglClientBufferEXT,
                                      flags_t=GLbitfield):
    restype = None
    argtypes = [buffer_t, offset_t, size_t, clientBuffer_t, flags_t]
    cfunc = c.glNamedBufferStorageExternalEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buffer, offset, size, clientBuffer, flags)

  # Check if the function actually exists
  f = c.glNamedBufferStorageExternalEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferTextureEXT(target,
                              attachment,
                              texture,
                              level,
                              target_t=GLenum,
                              attachment_t=GLenum,
                              texture_t=GLuint,
                              level_t=GLint):
    restype = None
    argtypes = [target_t, attachment_t, texture_t, level_t]
    cfunc = c.glFramebufferTextureEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, attachment, texture, level)

  # Check if the function actually exists
  f = c.glFramebufferTextureEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glVertexAttribDivisorEXT(index,
                               divisor,
                               index_t=GLuint,
                               divisor_t=GLuint):
    restype = None
    argtypes = [index_t, divisor_t]
    cfunc = c.glVertexAttribDivisorEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, divisor)

  # Check if the function actually exists
  f = c.glVertexAttribDivisorEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFlushMappedBufferRangeEXT(target,
                                  offset,
                                  length,
                                  target_t=GLenum,
                                  offset_t=GLintptr,
                                  length_t=GLsizeiptr):
    restype = None
    argtypes = [target_t, offset_t, length_t]
    cfunc = c.glFlushMappedBufferRangeEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, offset, length)

  # Check if the function actually exists
  f = c.glFlushMappedBufferRangeEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetUnsignedBytevEXT(pname, param0, pname_t=GLenum, param0_t=GLubyte):
    restype = None
    argtypes = [pname_t, param0_t]
    cfunc = c.glGetUnsignedBytevEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pname, param0)

  # Check if the function actually exists
  f = c.glGetUnsignedBytevEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetUnsignedBytei_vEXT(target,
                              index,
                              param0,
                              target_t=GLenum,
                              index_t=GLuint,
                              param0_t=GLubyte):
    restype = None
    argtypes = [target_t, index_t, param0_t]
    cfunc = c.glGetUnsignedBytei_vEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index, param0)

  # Check if the function actually exists
  f = c.glGetUnsignedBytei_vEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDeleteMemoryObjectsEXT(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glDeleteMemoryObjectsEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glDeleteMemoryObjectsEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsMemoryObjectEXT(memoryObject, memoryObject_t=GLuint):
    restype = GLboolean
    argtypes = [memoryObject_t]
    cfunc = c.glIsMemoryObjectEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memoryObject)

  # Check if the function actually exists
  f = c.glIsMemoryObjectEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCreateMemoryObjectsEXT(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glCreateMemoryObjectsEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glCreateMemoryObjectsEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMemoryObjectParameterivEXT(memoryObject,
                                   pname,
                                   param0,
                                   memoryObject_t=GLuint,
                                   pname_t=GLenum,
                                   param0_t=GLint):
    restype = None
    argtypes = [memoryObject_t, pname_t, param0_t]
    cfunc = c.glMemoryObjectParameterivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memoryObject, pname, param0)

  # Check if the function actually exists
  f = c.glMemoryObjectParameterivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetMemoryObjectParameterivEXT(memoryObject,
                                      pname,
                                      param0,
                                      memoryObject_t=GLuint,
                                      pname_t=GLenum,
                                      param0_t=GLint):
    restype = None
    argtypes = [memoryObject_t, pname_t, param0_t]
    cfunc = c.glGetMemoryObjectParameterivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memoryObject, pname, param0)

  # Check if the function actually exists
  f = c.glGetMemoryObjectParameterivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexStorageMem2DEXT(target,
                           levels,
                           internalFormat,
                           width,
                           height,
                           memory,
                           offset,
                           target_t=GLenum,
                           levels_t=GLsizei,
                           internalFormat_t=GLenum,
                           width_t=GLsizei,
                           height_t=GLsizei,
                           memory_t=GLuint,
                           offset_t=GLuint64):
    restype = None
    argtypes = [
      target_t, levels_t, internalFormat_t, width_t, height_t, memory_t,
      offset_t
    ]
    cfunc = c.glTexStorageMem2DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, levels, internalFormat, width, height, memory, offset)

  # Check if the function actually exists
  f = c.glTexStorageMem2DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexStorageMem2DMultisampleEXT(target,
                                      samples,
                                      internalFormat,
                                      width,
                                      height,
                                      fixedSampleLocations,
                                      memory,
                                      offset,
                                      target_t=GLenum,
                                      samples_t=GLsizei,
                                      internalFormat_t=GLenum,
                                      width_t=GLsizei,
                                      height_t=GLsizei,
                                      fixedSampleLocations_t=GLboolean,
                                      memory_t=GLuint,
                                      offset_t=GLuint64):
    restype = None
    argtypes = [
      target_t, samples_t, internalFormat_t, width_t, height_t,
      fixedSampleLocations_t, memory_t, offset_t
    ]
    cfunc = c.glTexStorageMem2DMultisampleEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, samples, internalFormat, width, height,
                 fixedSampleLocations, memory, offset)

  # Check if the function actually exists
  f = c.glTexStorageMem2DMultisampleEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexStorageMem3DEXT(target,
                           levels,
                           internalFormat,
                           width,
                           height,
                           depth,
                           memory,
                           offset,
                           target_t=GLenum,
                           levels_t=GLsizei,
                           internalFormat_t=GLenum,
                           width_t=GLsizei,
                           height_t=GLsizei,
                           depth_t=GLsizei,
                           memory_t=GLuint,
                           offset_t=GLuint64):
    restype = None
    argtypes = [
      target_t, levels_t, internalFormat_t, width_t, height_t, depth_t,
      memory_t, offset_t
    ]
    cfunc = c.glTexStorageMem3DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, levels, internalFormat, width, height, depth, memory,
                 offset)

  # Check if the function actually exists
  f = c.glTexStorageMem3DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexStorageMem3DMultisampleEXT(target,
                                      samples,
                                      internalFormat,
                                      width,
                                      height,
                                      depth,
                                      fixedSampleLocations,
                                      memory,
                                      offset,
                                      target_t=GLenum,
                                      samples_t=GLsizei,
                                      internalFormat_t=GLenum,
                                      width_t=GLsizei,
                                      height_t=GLsizei,
                                      depth_t=GLsizei,
                                      fixedSampleLocations_t=GLboolean,
                                      memory_t=GLuint,
                                      offset_t=GLuint64):
    restype = None
    argtypes = [
      target_t, samples_t, internalFormat_t, width_t, height_t, depth_t,
      fixedSampleLocations_t, memory_t, offset_t
    ]
    cfunc = c.glTexStorageMem3DMultisampleEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, samples, internalFormat, width, height, depth,
                 fixedSampleLocations, memory, offset)

  # Check if the function actually exists
  f = c.glTexStorageMem3DMultisampleEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBufferStorageMemEXT(target,
                            size,
                            memory,
                            offset,
                            target_t=GLenum,
                            size_t=GLsizeiptr,
                            memory_t=GLuint,
                            offset_t=GLuint64):
    restype = None
    argtypes = [target_t, size_t, memory_t, offset_t]
    cfunc = c.glBufferStorageMemEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, size, memory, offset)

  # Check if the function actually exists
  f = c.glBufferStorageMemEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureStorageMem2DEXT(texture,
                               levels,
                               internalFormat,
                               width,
                               height,
                               memory,
                               offset,
                               texture_t=GLuint,
                               levels_t=GLsizei,
                               internalFormat_t=GLenum,
                               width_t=GLsizei,
                               height_t=GLsizei,
                               memory_t=GLuint,
                               offset_t=GLuint64):
    restype = None
    argtypes = [
      texture_t, levels_t, internalFormat_t, width_t, height_t, memory_t,
      offset_t
    ]
    cfunc = c.glTextureStorageMem2DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, levels, internalFormat, width, height, memory,
                 offset)

  # Check if the function actually exists
  f = c.glTextureStorageMem2DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureStorageMem2DMultisampleEXT(texture,
                                          samples,
                                          internalFormat,
                                          width,
                                          height,
                                          fixedSampleLocations,
                                          memory,
                                          offset,
                                          texture_t=GLuint,
                                          samples_t=GLsizei,
                                          internalFormat_t=GLenum,
                                          width_t=GLsizei,
                                          height_t=GLsizei,
                                          fixedSampleLocations_t=GLboolean,
                                          memory_t=GLuint,
                                          offset_t=GLuint64):
    restype = None
    argtypes = [
      texture_t, samples_t, internalFormat_t, width_t, height_t,
      fixedSampleLocations_t, memory_t, offset_t
    ]
    cfunc = c.glTextureStorageMem2DMultisampleEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, samples, internalFormat, width, height,
                 fixedSampleLocations, memory, offset)

  # Check if the function actually exists
  f = c.glTextureStorageMem2DMultisampleEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureStorageMem3DEXT(texture,
                               levels,
                               internalFormat,
                               width,
                               height,
                               depth,
                               memory,
                               offset,
                               texture_t=GLuint,
                               levels_t=GLsizei,
                               internalFormat_t=GLenum,
                               width_t=GLsizei,
                               height_t=GLsizei,
                               depth_t=GLsizei,
                               memory_t=GLuint,
                               offset_t=GLuint64):
    restype = None
    argtypes = [
      texture_t, levels_t, internalFormat_t, width_t, height_t, depth_t,
      memory_t, offset_t
    ]
    cfunc = c.glTextureStorageMem3DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, levels, internalFormat, width, height, depth, memory,
                 offset)

  # Check if the function actually exists
  f = c.glTextureStorageMem3DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureStorageMem3DMultisampleEXT(texture,
                                          samples,
                                          internalFormat,
                                          width,
                                          height,
                                          depth,
                                          fixedSampleLocations,
                                          memory,
                                          offset,
                                          texture_t=GLuint,
                                          samples_t=GLsizei,
                                          internalFormat_t=GLenum,
                                          width_t=GLsizei,
                                          height_t=GLsizei,
                                          depth_t=GLsizei,
                                          fixedSampleLocations_t=GLboolean,
                                          memory_t=GLuint,
                                          offset_t=GLuint64):
    restype = None
    argtypes = [
      texture_t, samples_t, internalFormat_t, width_t, height_t, depth_t,
      fixedSampleLocations_t, memory_t, offset_t
    ]
    cfunc = c.glTextureStorageMem3DMultisampleEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, samples, internalFormat, width, height, depth,
                 fixedSampleLocations, memory, offset)

  # Check if the function actually exists
  f = c.glTextureStorageMem3DMultisampleEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glNamedBufferStorageMemEXT(buffer,
                                 size,
                                 memory,
                                 offset,
                                 buffer_t=GLuint,
                                 size_t=GLsizeiptr,
                                 memory_t=GLuint,
                                 offset_t=GLuint64):
    restype = None
    argtypes = [buffer_t, size_t, memory_t, offset_t]
    cfunc = c.glNamedBufferStorageMemEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buffer, size, memory, offset)

  # Check if the function actually exists
  f = c.glNamedBufferStorageMemEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glImportMemoryFdEXT(memory,
                          size,
                          handleType,
                          fd,
                          memory_t=GLuint,
                          size_t=GLuint64,
                          handleType_t=GLenum,
                          fd_t=GLint):
    restype = None
    argtypes = [memory_t, size_t, handleType_t, fd_t]
    cfunc = c.glImportMemoryFdEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memory, size, handleType, fd)

  # Check if the function actually exists
  f = c.glImportMemoryFdEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glImportMemoryWin32HandleEXT(memory,
                                   size,
                                   handleType,
                                   voidhandle,
                                   memory_t=GLuint,
                                   size_t=GLuint64,
                                   handleType_t=GLenum,
                                   voidhandle_t=ctypes.c_void_p):
    restype = None
    argtypes = [memory_t, size_t, handleType_t, voidhandle_t]
    cfunc = c.glImportMemoryWin32HandleEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memory, size, handleType, voidhandle)

  # Check if the function actually exists
  f = c.glImportMemoryWin32HandleEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glImportMemoryWin32NameEXT(memory,
                                 size,
                                 handleType,
                                 voidname,
                                 memory_t=GLuint,
                                 size_t=GLuint64,
                                 handleType_t=GLenum,
                                 voidname_t=ctypes.c_void_p):
    restype = None
    argtypes = [memory_t, size_t, handleType_t, voidname_t]
    cfunc = c.glImportMemoryWin32NameEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memory, size, handleType, voidname)

  # Check if the function actually exists
  f = c.glImportMemoryWin32NameEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMultiDrawArraysEXT(mode,
                           param0,
                           param1,
                           primcount,
                           mode_t=GLenum,
                           param0_t=GLint,
                           param1_t=GLsizei,
                           primcount_t=GLsizei):
    restype = None
    argtypes = [mode_t, param0_t, param1_t, primcount_t]
    cfunc = c.glMultiDrawArraysEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0, param1, primcount)

  # Check if the function actually exists
  f = c.glMultiDrawArraysEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMultiDrawElementsEXT(mode,
                             param0,
                             type,
                             voidconstindices,
                             primcount,
                             mode_t=GLenum,
                             param0_t=GLsizei,
                             type_t=GLenum,
                             voidconstindices_t=ctypes.c_void_p,
                             primcount_t=GLsizei):
    restype = None
    argtypes = [mode_t, param0_t, type_t, voidconstindices_t, primcount_t]
    cfunc = c.glMultiDrawElementsEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0, type, voidconstindices, primcount)

  # Check if the function actually exists
  f = c.glMultiDrawElementsEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMultiDrawArraysIndirectEXT(mode,
                                   voidindirect,
                                   drawcount,
                                   stride,
                                   mode_t=GLenum,
                                   voidindirect_t=ctypes.c_void_p,
                                   drawcount_t=GLsizei,
                                   stride_t=GLsizei):
    restype = None
    argtypes = [mode_t, voidindirect_t, drawcount_t, stride_t]
    cfunc = c.glMultiDrawArraysIndirectEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, voidindirect, drawcount, stride)

  # Check if the function actually exists
  f = c.glMultiDrawArraysIndirectEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMultiDrawElementsIndirectEXT(mode,
                                     type,
                                     voidindirect,
                                     drawcount,
                                     stride,
                                     mode_t=GLenum,
                                     type_t=GLenum,
                                     voidindirect_t=ctypes.c_void_p,
                                     drawcount_t=GLsizei,
                                     stride_t=GLsizei):
    restype = None
    argtypes = [mode_t, type_t, voidindirect_t, drawcount_t, stride_t]
    cfunc = c.glMultiDrawElementsIndirectEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, type, voidindirect, drawcount, stride)

  # Check if the function actually exists
  f = c.glMultiDrawElementsIndirectEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glRenderbufferStorageMultisampleEXT(target,
                                          samples,
                                          internalformat,
                                          width,
                                          height,
                                          target_t=GLenum,
                                          samples_t=GLsizei,
                                          internalformat_t=GLenum,
                                          width_t=GLsizei,
                                          height_t=GLsizei):
    restype = None
    argtypes = [target_t, samples_t, internalformat_t, width_t, height_t]
    cfunc = c.glRenderbufferStorageMultisampleEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, samples, internalformat, width, height)

  # Check if the function actually exists
  f = c.glRenderbufferStorageMultisampleEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferTexture2DMultisampleEXT(target,
                                           attachment,
                                           textarget,
                                           texture,
                                           level,
                                           samples,
                                           target_t=GLenum,
                                           attachment_t=GLenum,
                                           textarget_t=GLenum,
                                           texture_t=GLuint,
                                           level_t=GLint,
                                           samples_t=GLsizei):
    restype = None
    argtypes = [
      target_t, attachment_t, textarget_t, texture_t, level_t, samples_t
    ]
    cfunc = c.glFramebufferTexture2DMultisampleEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, attachment, textarget, texture, level, samples)

  # Check if the function actually exists
  f = c.glFramebufferTexture2DMultisampleEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glReadBufferIndexedEXT(src, index, src_t=GLenum, index_t=GLint):
    restype = None
    argtypes = [src_t, index_t]
    cfunc = c.glReadBufferIndexedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(src, index)

  # Check if the function actually exists
  f = c.glReadBufferIndexedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawBuffersIndexedEXT(n,
                              param0,
                              param1,
                              n_t=GLint,
                              param0_t=GLenum,
                              param1_t=GLint):
    restype = None
    argtypes = [n_t, param0_t, param1_t]
    cfunc = c.glDrawBuffersIndexedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0, param1)

  # Check if the function actually exists
  f = c.glDrawBuffersIndexedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetIntegeri_vEXT(target,
                         index,
                         param0,
                         target_t=GLenum,
                         index_t=GLuint,
                         param0_t=GLint):
    restype = None
    argtypes = [target_t, index_t, param0_t]
    cfunc = c.glGetIntegeri_vEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index, param0)

  # Check if the function actually exists
  f = c.glGetIntegeri_vEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPolygonOffsetClampEXT(factor,
                              units,
                              clamp,
                              factor_t=GLfloat,
                              units_t=GLfloat,
                              clamp_t=GLfloat):
    restype = None
    argtypes = [factor_t, units_t, clamp_t]
    cfunc = c.glPolygonOffsetClampEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(factor, units, clamp)

  # Check if the function actually exists
  f = c.glPolygonOffsetClampEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPrimitiveBoundingBoxEXT(minX,
                                minY,
                                minZ,
                                minW,
                                maxX,
                                maxY,
                                maxZ,
                                maxW,
                                minX_t=GLfloat,
                                minY_t=GLfloat,
                                minZ_t=GLfloat,
                                minW_t=GLfloat,
                                maxX_t=GLfloat,
                                maxY_t=GLfloat,
                                maxZ_t=GLfloat,
                                maxW_t=GLfloat):
    restype = None
    argtypes = [minX_t, minY_t, minZ_t, minW_t, maxX_t, maxY_t, maxZ_t, maxW_t]
    cfunc = c.glPrimitiveBoundingBoxEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW)

  # Check if the function actually exists
  f = c.glPrimitiveBoundingBoxEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glRasterSamplesEXT(samples,
                         fixedsamplelocations,
                         samples_t=GLuint,
                         fixedsamplelocations_t=GLboolean):
    restype = None
    argtypes = [samples_t, fixedsamplelocations_t]
    cfunc = c.glRasterSamplesEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(samples, fixedsamplelocations)

  # Check if the function actually exists
  f = c.glRasterSamplesEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetGraphicsResetStatusEXT(void, void_t=ctypes.c_void_p):
    restype = GLenum
    argtypes = [void_t]
    cfunc = c.glGetGraphicsResetStatusEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glGetGraphicsResetStatusEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glReadnPixelsEXT(x,
                       y,
                       width,
                       height,
                       format,
                       type,
                       bufSize,
                       voiddata,
                       x_t=GLint,
                       y_t=GLint,
                       width_t=GLsizei,
                       height_t=GLsizei,
                       format_t=GLenum,
                       type_t=GLenum,
                       bufSize_t=GLsizei,
                       voiddata_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      x_t, y_t, width_t, height_t, format_t, type_t, bufSize_t, voiddata_t
    ]
    cfunc = c.glReadnPixelsEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(x, y, width, height, format, type, bufSize, voiddata)

  # Check if the function actually exists
  f = c.glReadnPixelsEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetnUniformfvEXT(program,
                         location,
                         bufSize,
                         param0,
                         program_t=GLuint,
                         location_t=GLint,
                         bufSize_t=GLsizei,
                         param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, bufSize_t, param0_t]
    cfunc = c.glGetnUniformfvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, bufSize, param0)

  # Check if the function actually exists
  f = c.glGetnUniformfvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetnUniformivEXT(program,
                         location,
                         bufSize,
                         param0,
                         program_t=GLuint,
                         location_t=GLint,
                         bufSize_t=GLsizei,
                         param0_t=GLint):
    restype = None
    argtypes = [program_t, location_t, bufSize_t, param0_t]
    cfunc = c.glGetnUniformivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, bufSize, param0)

  # Check if the function actually exists
  f = c.glGetnUniformivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGenSemaphoresEXT(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glGenSemaphoresEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glGenSemaphoresEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDeleteSemaphoresEXT(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glDeleteSemaphoresEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glDeleteSemaphoresEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsSemaphoreEXT(semaphore, semaphore_t=GLuint):
    restype = GLboolean
    argtypes = [semaphore_t]
    cfunc = c.glIsSemaphoreEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore)

  # Check if the function actually exists
  f = c.glIsSemaphoreEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSemaphoreParameterui64vEXT(semaphore,
                                   pname,
                                   param0,
                                   semaphore_t=GLuint,
                                   pname_t=GLenum,
                                   param0_t=GLuint64):
    restype = None
    argtypes = [semaphore_t, pname_t, param0_t]
    cfunc = c.glSemaphoreParameterui64vEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore, pname, param0)

  # Check if the function actually exists
  f = c.glSemaphoreParameterui64vEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetSemaphoreParameterui64vEXT(semaphore,
                                      pname,
                                      param0,
                                      semaphore_t=GLuint,
                                      pname_t=GLenum,
                                      param0_t=GLuint64):
    restype = None
    argtypes = [semaphore_t, pname_t, param0_t]
    cfunc = c.glGetSemaphoreParameterui64vEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore, pname, param0)

  # Check if the function actually exists
  f = c.glGetSemaphoreParameterui64vEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glWaitSemaphoreEXT(semaphore,
                         numBufferBarriers,
                         param0,
                         numTextureBarriers,
                         param1,
                         param2,
                         semaphore_t=GLuint,
                         numBufferBarriers_t=GLuint,
                         param0_t=GLuint,
                         numTextureBarriers_t=GLuint,
                         param1_t=GLuint,
                         param2_t=GLenum):
    restype = None
    argtypes = [
      semaphore_t, numBufferBarriers_t, param0_t, numTextureBarriers_t,
      param1_t, param2_t
    ]
    cfunc = c.glWaitSemaphoreEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore, numBufferBarriers, param0, numTextureBarriers,
                 param1, param2)

  # Check if the function actually exists
  f = c.glWaitSemaphoreEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSignalSemaphoreEXT(semaphore,
                           numBufferBarriers,
                           param0,
                           numTextureBarriers,
                           param1,
                           param2,
                           semaphore_t=GLuint,
                           numBufferBarriers_t=GLuint,
                           param0_t=GLuint,
                           numTextureBarriers_t=GLuint,
                           param1_t=GLuint,
                           param2_t=GLenum):
    restype = None
    argtypes = [
      semaphore_t, numBufferBarriers_t, param0_t, numTextureBarriers_t,
      param1_t, param2_t
    ]
    cfunc = c.glSignalSemaphoreEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore, numBufferBarriers, param0, numTextureBarriers,
                 param1, param2)

  # Check if the function actually exists
  f = c.glSignalSemaphoreEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glImportSemaphoreFdEXT(semaphore,
                             handleType,
                             fd,
                             semaphore_t=GLuint,
                             handleType_t=GLenum,
                             fd_t=GLint):
    restype = None
    argtypes = [semaphore_t, handleType_t, fd_t]
    cfunc = c.glImportSemaphoreFdEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore, handleType, fd)

  # Check if the function actually exists
  f = c.glImportSemaphoreFdEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glImportSemaphoreWin32HandleEXT(semaphore,
                                      handleType,
                                      voidhandle,
                                      semaphore_t=GLuint,
                                      handleType_t=GLenum,
                                      voidhandle_t=ctypes.c_void_p):
    restype = None
    argtypes = [semaphore_t, handleType_t, voidhandle_t]
    cfunc = c.glImportSemaphoreWin32HandleEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore, handleType, voidhandle)

  # Check if the function actually exists
  f = c.glImportSemaphoreWin32HandleEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glImportSemaphoreWin32NameEXT(semaphore,
                                    handleType,
                                    voidname,
                                    semaphore_t=GLuint,
                                    handleType_t=GLenum,
                                    voidname_t=ctypes.c_void_p):
    restype = None
    argtypes = [semaphore_t, handleType_t, voidname_t]
    cfunc = c.glImportSemaphoreWin32NameEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore, handleType, voidname)

  # Check if the function actually exists
  f = c.glImportSemaphoreWin32NameEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glActiveShaderProgramEXT(pipeline,
                               program,
                               pipeline_t=GLuint,
                               program_t=GLuint):
    restype = None
    argtypes = [pipeline_t, program_t]
    cfunc = c.glActiveShaderProgramEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pipeline, program)

  # Check if the function actually exists
  f = c.glActiveShaderProgramEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBindProgramPipelineEXT(pipeline, pipeline_t=GLuint):
    restype = None
    argtypes = [pipeline_t]
    cfunc = c.glBindProgramPipelineEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pipeline)

  # Check if the function actually exists
  f = c.glBindProgramPipelineEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCreateShaderProgramvEXT(type,
                                count,
                                param0,
                                type_t=GLenum,
                                count_t=GLsizei,
                                param0_t=GLchar):
    restype = GLuint
    argtypes = [type_t, count_t, param0_t]
    cfunc = c.glCreateShaderProgramvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(type, count, param0)

  # Check if the function actually exists
  f = c.glCreateShaderProgramvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDeleteProgramPipelinesEXT(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glDeleteProgramPipelinesEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glDeleteProgramPipelinesEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGenProgramPipelinesEXT(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glGenProgramPipelinesEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glGenProgramPipelinesEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetProgramPipelineInfoLogEXT(pipeline,
                                     bufSize,
                                     param0,
                                     param1,
                                     pipeline_t=GLuint,
                                     bufSize_t=GLsizei,
                                     param0_t=GLsizei,
                                     param1_t=GLchar):
    restype = None
    argtypes = [pipeline_t, bufSize_t, param0_t, param1_t]
    cfunc = c.glGetProgramPipelineInfoLogEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pipeline, bufSize, param0, param1)

  # Check if the function actually exists
  f = c.glGetProgramPipelineInfoLogEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetProgramPipelineivEXT(pipeline,
                                pname,
                                param0,
                                pipeline_t=GLuint,
                                pname_t=GLenum,
                                param0_t=GLint):
    restype = None
    argtypes = [pipeline_t, pname_t, param0_t]
    cfunc = c.glGetProgramPipelineivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pipeline, pname, param0)

  # Check if the function actually exists
  f = c.glGetProgramPipelineivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsProgramPipelineEXT(pipeline, pipeline_t=GLuint):
    restype = GLboolean
    argtypes = [pipeline_t]
    cfunc = c.glIsProgramPipelineEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pipeline)

  # Check if the function actually exists
  f = c.glIsProgramPipelineEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramParameteriEXT(program,
                             pname,
                             value,
                             program_t=GLuint,
                             pname_t=GLenum,
                             value_t=GLint):
    restype = None
    argtypes = [program_t, pname_t, value_t]
    cfunc = c.glProgramParameteriEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, pname, value)

  # Check if the function actually exists
  f = c.glProgramParameteriEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1fEXT(program,
                            location,
                            v0,
                            program_t=GLuint,
                            location_t=GLint,
                            v0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, v0_t]
    cfunc = c.glProgramUniform1fEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0)

  # Check if the function actually exists
  f = c.glProgramUniform1fEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1fvEXT(program,
                             location,
                             count,
                             param0,
                             program_t=GLuint,
                             location_t=GLint,
                             count_t=GLsizei,
                             param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform1fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform1fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1iEXT(program,
                            location,
                            v0,
                            program_t=GLuint,
                            location_t=GLint,
                            v0_t=GLint):
    restype = None
    argtypes = [program_t, location_t, v0_t]
    cfunc = c.glProgramUniform1iEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0)

  # Check if the function actually exists
  f = c.glProgramUniform1iEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1ivEXT(program,
                             location,
                             count,
                             param0,
                             program_t=GLuint,
                             location_t=GLint,
                             count_t=GLsizei,
                             param0_t=GLint):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform1ivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform1ivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2fEXT(program,
                            location,
                            v0,
                            v1,
                            program_t=GLuint,
                            location_t=GLint,
                            v0_t=GLfloat,
                            v1_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, v0_t, v1_t]
    cfunc = c.glProgramUniform2fEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0, v1)

  # Check if the function actually exists
  f = c.glProgramUniform2fEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2fvEXT(program,
                             location,
                             count,
                             param0,
                             program_t=GLuint,
                             location_t=GLint,
                             count_t=GLsizei,
                             param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform2fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform2fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2iEXT(program,
                            location,
                            v0,
                            v1,
                            program_t=GLuint,
                            location_t=GLint,
                            v0_t=GLint,
                            v1_t=GLint):
    restype = None
    argtypes = [program_t, location_t, v0_t, v1_t]
    cfunc = c.glProgramUniform2iEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0, v1)

  # Check if the function actually exists
  f = c.glProgramUniform2iEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2ivEXT(program,
                             location,
                             count,
                             param0,
                             program_t=GLuint,
                             location_t=GLint,
                             count_t=GLsizei,
                             param0_t=GLint):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform2ivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform2ivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3fEXT(program,
                            location,
                            v0,
                            v1,
                            v2,
                            program_t=GLuint,
                            location_t=GLint,
                            v0_t=GLfloat,
                            v1_t=GLfloat,
                            v2_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, v0_t, v1_t, v2_t]
    cfunc = c.glProgramUniform3fEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0, v1, v2)

  # Check if the function actually exists
  f = c.glProgramUniform3fEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3fvEXT(program,
                             location,
                             count,
                             param0,
                             program_t=GLuint,
                             location_t=GLint,
                             count_t=GLsizei,
                             param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform3fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform3fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3iEXT(program,
                            location,
                            v0,
                            v1,
                            v2,
                            program_t=GLuint,
                            location_t=GLint,
                            v0_t=GLint,
                            v1_t=GLint,
                            v2_t=GLint):
    restype = None
    argtypes = [program_t, location_t, v0_t, v1_t, v2_t]
    cfunc = c.glProgramUniform3iEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0, v1, v2)

  # Check if the function actually exists
  f = c.glProgramUniform3iEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3ivEXT(program,
                             location,
                             count,
                             param0,
                             program_t=GLuint,
                             location_t=GLint,
                             count_t=GLsizei,
                             param0_t=GLint):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform3ivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform3ivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4fEXT(program,
                            location,
                            v0,
                            v1,
                            v2,
                            v3,
                            program_t=GLuint,
                            location_t=GLint,
                            v0_t=GLfloat,
                            v1_t=GLfloat,
                            v2_t=GLfloat,
                            v3_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, v0_t, v1_t, v2_t, v3_t]
    cfunc = c.glProgramUniform4fEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0, v1, v2, v3)

  # Check if the function actually exists
  f = c.glProgramUniform4fEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4fvEXT(program,
                             location,
                             count,
                             param0,
                             program_t=GLuint,
                             location_t=GLint,
                             count_t=GLsizei,
                             param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform4fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform4fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4iEXT(program,
                            location,
                            v0,
                            v1,
                            v2,
                            v3,
                            program_t=GLuint,
                            location_t=GLint,
                            v0_t=GLint,
                            v1_t=GLint,
                            v2_t=GLint,
                            v3_t=GLint):
    restype = None
    argtypes = [program_t, location_t, v0_t, v1_t, v2_t, v3_t]
    cfunc = c.glProgramUniform4iEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0, v1, v2, v3)

  # Check if the function actually exists
  f = c.glProgramUniform4iEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4ivEXT(program,
                             location,
                             count,
                             param0,
                             program_t=GLuint,
                             location_t=GLint,
                             count_t=GLsizei,
                             param0_t=GLint):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform4ivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform4ivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformMatrix2fvEXT(program,
                                   location,
                                   count,
                                   transpose,
                                   param0,
                                   program_t=GLuint,
                                   location_t=GLint,
                                   count_t=GLsizei,
                                   transpose_t=GLboolean,
                                   param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, transpose_t, param0_t]
    cfunc = c.glProgramUniformMatrix2fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glProgramUniformMatrix2fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformMatrix3fvEXT(program,
                                   location,
                                   count,
                                   transpose,
                                   param0,
                                   program_t=GLuint,
                                   location_t=GLint,
                                   count_t=GLsizei,
                                   transpose_t=GLboolean,
                                   param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, transpose_t, param0_t]
    cfunc = c.glProgramUniformMatrix3fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glProgramUniformMatrix3fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformMatrix4fvEXT(program,
                                   location,
                                   count,
                                   transpose,
                                   param0,
                                   program_t=GLuint,
                                   location_t=GLint,
                                   count_t=GLsizei,
                                   transpose_t=GLboolean,
                                   param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, transpose_t, param0_t]
    cfunc = c.glProgramUniformMatrix4fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glProgramUniformMatrix4fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUseProgramStagesEXT(pipeline,
                            stages,
                            program,
                            pipeline_t=GLuint,
                            stages_t=GLbitfield,
                            program_t=GLuint):
    restype = None
    argtypes = [pipeline_t, stages_t, program_t]
    cfunc = c.glUseProgramStagesEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pipeline, stages, program)

  # Check if the function actually exists
  f = c.glUseProgramStagesEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glValidateProgramPipelineEXT(pipeline, pipeline_t=GLuint):
    restype = None
    argtypes = [pipeline_t]
    cfunc = c.glValidateProgramPipelineEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pipeline)

  # Check if the function actually exists
  f = c.glValidateProgramPipelineEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1uiEXT(program,
                             location,
                             v0,
                             program_t=GLuint,
                             location_t=GLint,
                             v0_t=GLuint):
    restype = None
    argtypes = [program_t, location_t, v0_t]
    cfunc = c.glProgramUniform1uiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0)

  # Check if the function actually exists
  f = c.glProgramUniform1uiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2uiEXT(program,
                             location,
                             v0,
                             v1,
                             program_t=GLuint,
                             location_t=GLint,
                             v0_t=GLuint,
                             v1_t=GLuint):
    restype = None
    argtypes = [program_t, location_t, v0_t, v1_t]
    cfunc = c.glProgramUniform2uiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0, v1)

  # Check if the function actually exists
  f = c.glProgramUniform2uiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3uiEXT(program,
                             location,
                             v0,
                             v1,
                             v2,
                             program_t=GLuint,
                             location_t=GLint,
                             v0_t=GLuint,
                             v1_t=GLuint,
                             v2_t=GLuint):
    restype = None
    argtypes = [program_t, location_t, v0_t, v1_t, v2_t]
    cfunc = c.glProgramUniform3uiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0, v1, v2)

  # Check if the function actually exists
  f = c.glProgramUniform3uiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4uiEXT(program,
                             location,
                             v0,
                             v1,
                             v2,
                             v3,
                             program_t=GLuint,
                             location_t=GLint,
                             v0_t=GLuint,
                             v1_t=GLuint,
                             v2_t=GLuint,
                             v3_t=GLuint):
    restype = None
    argtypes = [program_t, location_t, v0_t, v1_t, v2_t, v3_t]
    cfunc = c.glProgramUniform4uiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, v0, v1, v2, v3)

  # Check if the function actually exists
  f = c.glProgramUniform4uiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1uivEXT(program,
                              location,
                              count,
                              param0,
                              program_t=GLuint,
                              location_t=GLint,
                              count_t=GLsizei,
                              param0_t=GLuint):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform1uivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform1uivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2uivEXT(program,
                              location,
                              count,
                              param0,
                              program_t=GLuint,
                              location_t=GLint,
                              count_t=GLsizei,
                              param0_t=GLuint):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform2uivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform2uivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3uivEXT(program,
                              location,
                              count,
                              param0,
                              program_t=GLuint,
                              location_t=GLint,
                              count_t=GLsizei,
                              param0_t=GLuint):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform3uivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform3uivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4uivEXT(program,
                              location,
                              count,
                              param0,
                              program_t=GLuint,
                              location_t=GLint,
                              count_t=GLsizei,
                              param0_t=GLuint):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform4uivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform4uivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformMatrix2x3fvEXT(program,
                                     location,
                                     count,
                                     transpose,
                                     param0,
                                     program_t=GLuint,
                                     location_t=GLint,
                                     count_t=GLsizei,
                                     transpose_t=GLboolean,
                                     param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, transpose_t, param0_t]
    cfunc = c.glProgramUniformMatrix2x3fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glProgramUniformMatrix2x3fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformMatrix3x2fvEXT(program,
                                     location,
                                     count,
                                     transpose,
                                     param0,
                                     program_t=GLuint,
                                     location_t=GLint,
                                     count_t=GLsizei,
                                     transpose_t=GLboolean,
                                     param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, transpose_t, param0_t]
    cfunc = c.glProgramUniformMatrix3x2fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glProgramUniformMatrix3x2fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformMatrix2x4fvEXT(program,
                                     location,
                                     count,
                                     transpose,
                                     param0,
                                     program_t=GLuint,
                                     location_t=GLint,
                                     count_t=GLsizei,
                                     transpose_t=GLboolean,
                                     param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, transpose_t, param0_t]
    cfunc = c.glProgramUniformMatrix2x4fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glProgramUniformMatrix2x4fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformMatrix4x2fvEXT(program,
                                     location,
                                     count,
                                     transpose,
                                     param0,
                                     program_t=GLuint,
                                     location_t=GLint,
                                     count_t=GLsizei,
                                     transpose_t=GLboolean,
                                     param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, transpose_t, param0_t]
    cfunc = c.glProgramUniformMatrix4x2fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glProgramUniformMatrix4x2fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformMatrix3x4fvEXT(program,
                                     location,
                                     count,
                                     transpose,
                                     param0,
                                     program_t=GLuint,
                                     location_t=GLint,
                                     count_t=GLsizei,
                                     transpose_t=GLboolean,
                                     param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, transpose_t, param0_t]
    cfunc = c.glProgramUniformMatrix3x4fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glProgramUniformMatrix3x4fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformMatrix4x3fvEXT(program,
                                     location,
                                     count,
                                     transpose,
                                     param0,
                                     program_t=GLuint,
                                     location_t=GLint,
                                     count_t=GLsizei,
                                     transpose_t=GLboolean,
                                     param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, count_t, transpose_t, param0_t]
    cfunc = c.glProgramUniformMatrix4x3fvEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glProgramUniformMatrix4x3fvEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferFetchBarrierEXT(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glFramebufferFetchBarrierEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glFramebufferFetchBarrierEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferPixelLocalStorageSizeEXT(target,
                                            size,
                                            target_t=GLuint,
                                            size_t=GLsizei):
    restype = None
    argtypes = [target_t, size_t]
    cfunc = c.glFramebufferPixelLocalStorageSizeEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, size)

  # Check if the function actually exists
  f = c.glFramebufferPixelLocalStorageSizeEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetFramebufferPixelLocalStorageSizeEXT(target, target_t=GLuint):
    restype = GLsizei
    argtypes = [target_t]
    cfunc = c.glGetFramebufferPixelLocalStorageSizeEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target)

  # Check if the function actually exists
  f = c.glGetFramebufferPixelLocalStorageSizeEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glClearPixelLocalStorageuiEXT(offset,
                                    n,
                                    param0,
                                    offset_t=GLsizei,
                                    n_t=GLsizei,
                                    param0_t=GLuint):
    restype = None
    argtypes = [offset_t, n_t, param0_t]
    cfunc = c.glClearPixelLocalStorageuiEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(offset, n, param0)

  # Check if the function actually exists
  f = c.glClearPixelLocalStorageuiEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexPageCommitmentEXT(target,
                             level,
                             xoffset,
                             yoffset,
                             zoffset,
                             width,
                             height,
                             depth,
                             commit,
                             target_t=GLenum,
                             level_t=GLint,
                             xoffset_t=GLint,
                             yoffset_t=GLint,
                             zoffset_t=GLint,
                             width_t=GLsizei,
                             height_t=GLsizei,
                             depth_t=GLsizei,
                             commit_t=GLboolean):
    restype = None
    argtypes = [
      target_t, level_t, xoffset_t, yoffset_t, zoffset_t, width_t, height_t,
      depth_t, commit_t
    ]
    cfunc = c.glTexPageCommitmentEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, level, xoffset, yoffset, zoffset, width, height,
                 depth, commit)

  # Check if the function actually exists
  f = c.glTexPageCommitmentEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPatchParameteriEXT(pname, value, pname_t=GLenum, value_t=GLint):
    restype = None
    argtypes = [pname_t, value_t]
    cfunc = c.glPatchParameteriEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pname, value)

  # Check if the function actually exists
  f = c.glPatchParameteriEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexParameterIivEXT(target,
                           pname,
                           param0,
                           target_t=GLenum,
                           pname_t=GLenum,
                           param0_t=GLint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glTexParameterIivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glTexParameterIivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexParameterIuivEXT(target,
                            pname,
                            param0,
                            target_t=GLenum,
                            pname_t=GLenum,
                            param0_t=GLuint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glTexParameterIuivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glTexParameterIuivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetTexParameterIivEXT(target,
                              pname,
                              param0,
                              target_t=GLenum,
                              pname_t=GLenum,
                              param0_t=GLint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glGetTexParameterIivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glGetTexParameterIivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetTexParameterIuivEXT(target,
                               pname,
                               param0,
                               target_t=GLenum,
                               pname_t=GLenum,
                               param0_t=GLuint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glGetTexParameterIuivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glGetTexParameterIuivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSamplerParameterIivEXT(sampler,
                               pname,
                               param0,
                               sampler_t=GLuint,
                               pname_t=GLenum,
                               param0_t=GLint):
    restype = None
    argtypes = [sampler_t, pname_t, param0_t]
    cfunc = c.glSamplerParameterIivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(sampler, pname, param0)

  # Check if the function actually exists
  f = c.glSamplerParameterIivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSamplerParameterIuivEXT(sampler,
                                pname,
                                param0,
                                sampler_t=GLuint,
                                pname_t=GLenum,
                                param0_t=GLuint):
    restype = None
    argtypes = [sampler_t, pname_t, param0_t]
    cfunc = c.glSamplerParameterIuivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(sampler, pname, param0)

  # Check if the function actually exists
  f = c.glSamplerParameterIuivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetSamplerParameterIivEXT(sampler,
                                  pname,
                                  param0,
                                  sampler_t=GLuint,
                                  pname_t=GLenum,
                                  param0_t=GLint):
    restype = None
    argtypes = [sampler_t, pname_t, param0_t]
    cfunc = c.glGetSamplerParameterIivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(sampler, pname, param0)

  # Check if the function actually exists
  f = c.glGetSamplerParameterIivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetSamplerParameterIuivEXT(sampler,
                                   pname,
                                   param0,
                                   sampler_t=GLuint,
                                   pname_t=GLenum,
                                   param0_t=GLuint):
    restype = None
    argtypes = [sampler_t, pname_t, param0_t]
    cfunc = c.glGetSamplerParameterIuivEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(sampler, pname, param0)

  # Check if the function actually exists
  f = c.glGetSamplerParameterIuivEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexBufferEXT(target,
                     internalformat,
                     buffer,
                     target_t=GLenum,
                     internalformat_t=GLenum,
                     buffer_t=GLuint):
    restype = None
    argtypes = [target_t, internalformat_t, buffer_t]
    cfunc = c.glTexBufferEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, internalformat, buffer)

  # Check if the function actually exists
  f = c.glTexBufferEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexBufferRangeEXT(target,
                          internalformat,
                          buffer,
                          offset,
                          size,
                          target_t=GLenum,
                          internalformat_t=GLenum,
                          buffer_t=GLuint,
                          offset_t=GLintptr,
                          size_t=GLsizeiptr):
    restype = None
    argtypes = [target_t, internalformat_t, buffer_t, offset_t, size_t]
    cfunc = c.glTexBufferRangeEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, internalformat, buffer, offset, size)

  # Check if the function actually exists
  f = c.glTexBufferRangeEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexStorage1DEXT(target,
                        levels,
                        internalformat,
                        width,
                        target_t=GLenum,
                        levels_t=GLsizei,
                        internalformat_t=GLenum,
                        width_t=GLsizei):
    restype = None
    argtypes = [target_t, levels_t, internalformat_t, width_t]
    cfunc = c.glTexStorage1DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, levels, internalformat, width)

  # Check if the function actually exists
  f = c.glTexStorage1DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexStorage2DEXT(target,
                        levels,
                        internalformat,
                        width,
                        height,
                        target_t=GLenum,
                        levels_t=GLsizei,
                        internalformat_t=GLenum,
                        width_t=GLsizei,
                        height_t=GLsizei):
    restype = None
    argtypes = [target_t, levels_t, internalformat_t, width_t, height_t]
    cfunc = c.glTexStorage2DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, levels, internalformat, width, height)

  # Check if the function actually exists
  f = c.glTexStorage2DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexStorage3DEXT(target,
                        levels,
                        internalformat,
                        width,
                        height,
                        depth,
                        target_t=GLenum,
                        levels_t=GLsizei,
                        internalformat_t=GLenum,
                        width_t=GLsizei,
                        height_t=GLsizei,
                        depth_t=GLsizei):
    restype = None
    argtypes = [
      target_t, levels_t, internalformat_t, width_t, height_t, depth_t
    ]
    cfunc = c.glTexStorage3DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, levels, internalformat, width, height, depth)

  # Check if the function actually exists
  f = c.glTexStorage3DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureStorage1DEXT(texture,
                            target,
                            levels,
                            internalformat,
                            width,
                            texture_t=GLuint,
                            target_t=GLenum,
                            levels_t=GLsizei,
                            internalformat_t=GLenum,
                            width_t=GLsizei):
    restype = None
    argtypes = [texture_t, target_t, levels_t, internalformat_t, width_t]
    cfunc = c.glTextureStorage1DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, target, levels, internalformat, width)

  # Check if the function actually exists
  f = c.glTextureStorage1DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureStorage2DEXT(texture,
                            target,
                            levels,
                            internalformat,
                            width,
                            height,
                            texture_t=GLuint,
                            target_t=GLenum,
                            levels_t=GLsizei,
                            internalformat_t=GLenum,
                            width_t=GLsizei,
                            height_t=GLsizei):
    restype = None
    argtypes = [
      texture_t, target_t, levels_t, internalformat_t, width_t, height_t
    ]
    cfunc = c.glTextureStorage2DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, target, levels, internalformat, width, height)

  # Check if the function actually exists
  f = c.glTextureStorage2DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureStorage3DEXT(texture,
                            target,
                            levels,
                            internalformat,
                            width,
                            height,
                            depth,
                            texture_t=GLuint,
                            target_t=GLenum,
                            levels_t=GLsizei,
                            internalformat_t=GLenum,
                            width_t=GLsizei,
                            height_t=GLsizei,
                            depth_t=GLsizei):
    restype = None
    argtypes = [
      texture_t, target_t, levels_t, internalformat_t, width_t, height_t,
      depth_t
    ]
    cfunc = c.glTextureStorage3DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, target, levels, internalformat, width, height, depth)

  # Check if the function actually exists
  f = c.glTextureStorage3DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def TexStorageAttribs2DEXT(target,
                             levels,
                             internalformat,
                             width,
                             height,
                             intattrib_list,
                             target_t=GLenum,
                             levels_t=GLsizei,
                             internalformat_t=GLenum,
                             width_t=GLsizei,
                             height_t=GLsizei,
                             intattrib_list_t=int):
    restype = None
    argtypes = [
      target_t, levels_t, internalformat_t, width_t, height_t, intattrib_list_t
    ]
    cfunc = c.TexStorageAttribs2DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, levels, internalformat, width, height, intattrib_list)

  # Check if the function actually exists
  f = c.TexStorageAttribs2DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def TexStorageAttribs3DEXT(target,
                             levels,
                             internalformat,
                             width,
                             height,
                             depth,
                             intattrib_list,
                             target_t=GLenum,
                             levels_t=GLsizei,
                             internalformat_t=GLenum,
                             width_t=GLsizei,
                             height_t=GLsizei,
                             depth_t=GLsizei,
                             intattrib_list_t=int):
    restype = None
    argtypes = [
      target_t, levels_t, internalformat_t, width_t, height_t, depth_t,
      intattrib_list_t
    ]
    cfunc = c.TexStorageAttribs3DEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, levels, internalformat, width, height, depth,
                 intattrib_list)

  # Check if the function actually exists
  f = c.TexStorageAttribs3DEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureViewEXT(texture,
                       target,
                       origtexture,
                       internalformat,
                       minlevel,
                       numlevels,
                       minlayer,
                       numlayers,
                       texture_t=GLuint,
                       target_t=GLenum,
                       origtexture_t=GLuint,
                       internalformat_t=GLenum,
                       minlevel_t=GLuint,
                       numlevels_t=GLuint,
                       minlayer_t=GLuint,
                       numlayers_t=GLuint):
    restype = None
    argtypes = [
      texture_t, target_t, origtexture_t, internalformat_t, minlevel_t,
      numlevels_t, minlayer_t, numlayers_t
    ]
    cfunc = c.glTextureViewEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, target, origtexture, internalformat, minlevel,
                 numlevels, minlayer, numlayers)

  # Check if the function actually exists
  f = c.glTextureViewEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glAcquireKeyedMutexWin32EXT(memory,
                                  key,
                                  timeout,
                                  memory_t=GLuint,
                                  key_t=GLuint64,
                                  timeout_t=GLuint):
    restype = GLboolean
    argtypes = [memory_t, key_t, timeout_t]
    cfunc = c.glAcquireKeyedMutexWin32EXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memory, key, timeout)

  # Check if the function actually exists
  f = c.glAcquireKeyedMutexWin32EXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glReleaseKeyedMutexWin32EXT(memory, key, memory_t=GLuint,
                                  key_t=GLuint64):
    restype = GLboolean
    argtypes = [memory_t, key_t]
    cfunc = c.glReleaseKeyedMutexWin32EXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memory, key)

  # Check if the function actually exists
  f = c.glReleaseKeyedMutexWin32EXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glWindowRectanglesEXT(mode,
                            count,
                            param0,
                            mode_t=GLenum,
                            count_t=GLsizei,
                            param0_t=GLint):
    restype = None
    argtypes = [mode_t, count_t, param0_t]
    cfunc = c.glWindowRectanglesEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, param0)

  # Check if the function actually exists
  f = c.glWindowRectanglesEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetTextureHandleIMG(texture, texture_t=GLuint):
    restype = GLuint64
    argtypes = [texture_t]
    cfunc = c.glGetTextureHandleIMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture)

  # Check if the function actually exists
  f = c.glGetTextureHandleIMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetTextureSamplerHandleIMG(texture,
                                   sampler,
                                   texture_t=GLuint,
                                   sampler_t=GLuint):
    restype = GLuint64
    argtypes = [texture_t, sampler_t]
    cfunc = c.glGetTextureSamplerHandleIMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, sampler)

  # Check if the function actually exists
  f = c.glGetTextureSamplerHandleIMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformHandleui64IMG(location,
                             value,
                             location_t=GLint,
                             value_t=GLuint64):
    restype = None
    argtypes = [location_t, value_t]
    cfunc = c.glUniformHandleui64IMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, value)

  # Check if the function actually exists
  f = c.glUniformHandleui64IMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformHandleui64vIMG(location,
                              count,
                              param0,
                              location_t=GLint,
                              count_t=GLsizei,
                              param0_t=GLuint64):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniformHandleui64vIMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniformHandleui64vIMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformHandleui64IMG(program,
                                    location,
                                    value,
                                    program_t=GLuint,
                                    location_t=GLint,
                                    value_t=GLuint64):
    restype = None
    argtypes = [program_t, location_t, value_t]
    cfunc = c.glProgramUniformHandleui64IMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, value)

  # Check if the function actually exists
  f = c.glProgramUniformHandleui64IMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformHandleui64vIMG(program,
                                     location,
                                     count,
                                     param0,
                                     program_t=GLuint,
                                     location_t=GLint,
                                     count_t=GLsizei,
                                     param0_t=GLuint64):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniformHandleui64vIMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniformHandleui64vIMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferTexture2DDownsampleIMG(target,
                                          attachment,
                                          textarget,
                                          texture,
                                          level,
                                          xscale,
                                          yscale,
                                          target_t=GLenum,
                                          attachment_t=GLenum,
                                          textarget_t=GLenum,
                                          texture_t=GLuint,
                                          level_t=GLint,
                                          xscale_t=GLint,
                                          yscale_t=GLint):
    restype = None
    argtypes = [
      target_t, attachment_t, textarget_t, texture_t, level_t, xscale_t,
      yscale_t
    ]
    cfunc = c.glFramebufferTexture2DDownsampleIMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, attachment, textarget, texture, level, xscale, yscale)

  # Check if the function actually exists
  f = c.glFramebufferTexture2DDownsampleIMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferTextureLayerDownsampleIMG(target,
                                             attachment,
                                             texture,
                                             level,
                                             layer,
                                             xscale,
                                             yscale,
                                             target_t=GLenum,
                                             attachment_t=GLenum,
                                             texture_t=GLuint,
                                             level_t=GLint,
                                             layer_t=GLint,
                                             xscale_t=GLint,
                                             yscale_t=GLint):
    restype = None
    argtypes = [
      target_t, attachment_t, texture_t, level_t, layer_t, xscale_t, yscale_t
    ]
    cfunc = c.glFramebufferTextureLayerDownsampleIMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, attachment, texture, level, layer, xscale, yscale)

  # Check if the function actually exists
  f = c.glFramebufferTextureLayerDownsampleIMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glRenderbufferStorageMultisampleIMG(target,
                                          samples,
                                          internalformat,
                                          width,
                                          height,
                                          target_t=GLenum,
                                          samples_t=GLsizei,
                                          internalformat_t=GLenum,
                                          width_t=GLsizei,
                                          height_t=GLsizei):
    restype = None
    argtypes = [target_t, samples_t, internalformat_t, width_t, height_t]
    cfunc = c.glRenderbufferStorageMultisampleIMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, samples, internalformat, width, height)

  # Check if the function actually exists
  f = c.glRenderbufferStorageMultisampleIMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferTexture2DMultisampleIMG(target,
                                           attachment,
                                           textarget,
                                           texture,
                                           level,
                                           samples,
                                           target_t=GLenum,
                                           attachment_t=GLenum,
                                           textarget_t=GLenum,
                                           texture_t=GLuint,
                                           level_t=GLint,
                                           samples_t=GLsizei):
    restype = None
    argtypes = [
      target_t, attachment_t, textarget_t, texture_t, level_t, samples_t
    ]
    cfunc = c.glFramebufferTexture2DMultisampleIMG
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, attachment, textarget, texture, level, samples)

  # Check if the function actually exists
  f = c.glFramebufferTexture2DMultisampleIMG
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glApplyFramebufferAttachmentCMAAINTEL(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glApplyFramebufferAttachmentCMAAINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glApplyFramebufferAttachmentCMAAINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBeginPerfQueryINTEL(queryHandle, queryHandle_t=GLuint):
    restype = None
    argtypes = [queryHandle_t]
    cfunc = c.glBeginPerfQueryINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(queryHandle)

  # Check if the function actually exists
  f = c.glBeginPerfQueryINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCreatePerfQueryINTEL(queryId,
                             param0,
                             queryId_t=GLuint,
                             param0_t=GLuint):
    restype = None
    argtypes = [queryId_t, param0_t]
    cfunc = c.glCreatePerfQueryINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(queryId, param0)

  # Check if the function actually exists
  f = c.glCreatePerfQueryINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDeletePerfQueryINTEL(queryHandle, queryHandle_t=GLuint):
    restype = None
    argtypes = [queryHandle_t]
    cfunc = c.glDeletePerfQueryINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(queryHandle)

  # Check if the function actually exists
  f = c.glDeletePerfQueryINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEndPerfQueryINTEL(queryHandle, queryHandle_t=GLuint):
    restype = None
    argtypes = [queryHandle_t]
    cfunc = c.glEndPerfQueryINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(queryHandle)

  # Check if the function actually exists
  f = c.glEndPerfQueryINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetFirstPerfQueryIdINTEL(param0, param0_t=GLuint):
    restype = None
    argtypes = [param0_t]
    cfunc = c.glGetFirstPerfQueryIdINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0)

  # Check if the function actually exists
  f = c.glGetFirstPerfQueryIdINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetNextPerfQueryIdINTEL(queryId,
                                param0,
                                queryId_t=GLuint,
                                param0_t=GLuint):
    restype = None
    argtypes = [queryId_t, param0_t]
    cfunc = c.glGetNextPerfQueryIdINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(queryId, param0)

  # Check if the function actually exists
  f = c.glGetNextPerfQueryIdINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfCounterInfoINTEL(queryId,
                                counterId,
                                counterNameLength,
                                param0,
                                counterDescLength,
                                param1,
                                param2,
                                param3,
                                param4,
                                param5,
                                param6,
                                queryId_t=GLuint,
                                counterId_t=GLuint,
                                counterNameLength_t=GLuint,
                                param0_t=GLchar,
                                counterDescLength_t=GLuint,
                                param1_t=GLchar,
                                param2_t=GLuint,
                                param3_t=GLuint,
                                param4_t=GLuint,
                                param5_t=GLuint,
                                param6_t=GLuint64):
    restype = None
    argtypes = [
      queryId_t, counterId_t, counterNameLength_t, param0_t,
      counterDescLength_t, param1_t, param2_t, param3_t, param4_t, param5_t,
      param6_t
    ]
    cfunc = c.glGetPerfCounterInfoINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(queryId, counterId, counterNameLength, param0,
                 counterDescLength, param1, param2, param3, param4, param5,
                 param6)

  # Check if the function actually exists
  f = c.glGetPerfCounterInfoINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfQueryDataINTEL(queryHandle,
                              flags,
                              dataSize,
                              voiddata,
                              param0,
                              queryHandle_t=GLuint,
                              flags_t=GLuint,
                              dataSize_t=GLsizei,
                              voiddata_t=ctypes.c_void_p,
                              param0_t=GLuint):
    restype = None
    argtypes = [queryHandle_t, flags_t, dataSize_t, voiddata_t, param0_t]
    cfunc = c.glGetPerfQueryDataINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(queryHandle, flags, dataSize, voiddata, param0)

  # Check if the function actually exists
  f = c.glGetPerfQueryDataINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfQueryIdByNameINTEL(param0,
                                  param1,
                                  param0_t=GLchar,
                                  param1_t=GLuint):
    restype = None
    argtypes = [param0_t, param1_t]
    cfunc = c.glGetPerfQueryIdByNameINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0, param1)

  # Check if the function actually exists
  f = c.glGetPerfQueryIdByNameINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPerfQueryInfoINTEL(queryId,
                              queryNameLength,
                              param0,
                              param1,
                              param2,
                              param3,
                              param4,
                              queryId_t=GLuint,
                              queryNameLength_t=GLuint,
                              param0_t=GLchar,
                              param1_t=GLuint,
                              param2_t=GLuint,
                              param3_t=GLuint,
                              param4_t=GLuint):
    restype = None
    argtypes = [
      queryId_t, queryNameLength_t, param0_t, param1_t, param2_t, param3_t,
      param4_t
    ]
    cfunc = c.glGetPerfQueryInfoINTEL
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(queryId, queryNameLength, param0, param1, param2, param3,
                 param4)

  # Check if the function actually exists
  f = c.glGetPerfQueryInfoINTEL
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferParameteriMESA(target,
                                  pname,
                                  param,
                                  target_t=GLenum,
                                  pname_t=GLenum,
                                  param_t=GLint):
    restype = None
    argtypes = [target_t, pname_t, param_t]
    cfunc = c.glFramebufferParameteriMESA
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param)

  # Check if the function actually exists
  f = c.glFramebufferParameteriMESA
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetFramebufferParameterivMESA(target,
                                      pname,
                                      param0,
                                      target_t=GLenum,
                                      pname_t=GLenum,
                                      param0_t=GLint):
    restype = None
    argtypes = [target_t, pname_t, param0_t]
    cfunc = c.glGetFramebufferParameterivMESA
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param0)

  # Check if the function actually exists
  f = c.glGetFramebufferParameterivMESA
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetTextureHandleNV(texture, texture_t=GLuint):
    restype = GLuint64
    argtypes = [texture_t]
    cfunc = c.glGetTextureHandleNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture)

  # Check if the function actually exists
  f = c.glGetTextureHandleNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetTextureSamplerHandleNV(texture,
                                  sampler,
                                  texture_t=GLuint,
                                  sampler_t=GLuint):
    restype = GLuint64
    argtypes = [texture_t, sampler_t]
    cfunc = c.glGetTextureSamplerHandleNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, sampler)

  # Check if the function actually exists
  f = c.glGetTextureSamplerHandleNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMakeTextureHandleResidentNV(handle, handle_t=GLuint64):
    restype = None
    argtypes = [handle_t]
    cfunc = c.glMakeTextureHandleResidentNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(handle)

  # Check if the function actually exists
  f = c.glMakeTextureHandleResidentNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMakeTextureHandleNonResidentNV(handle, handle_t=GLuint64):
    restype = None
    argtypes = [handle_t]
    cfunc = c.glMakeTextureHandleNonResidentNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(handle)

  # Check if the function actually exists
  f = c.glMakeTextureHandleNonResidentNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetImageHandleNV(texture,
                         level,
                         layered,
                         layer,
                         format,
                         texture_t=GLuint,
                         level_t=GLint,
                         layered_t=GLboolean,
                         layer_t=GLint,
                         format_t=GLenum):
    restype = GLuint64
    argtypes = [texture_t, level_t, layered_t, layer_t, format_t]
    cfunc = c.glGetImageHandleNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, level, layered, layer, format)

  # Check if the function actually exists
  f = c.glGetImageHandleNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMakeImageHandleResidentNV(handle,
                                  access,
                                  handle_t=GLuint64,
                                  access_t=GLenum):
    restype = None
    argtypes = [handle_t, access_t]
    cfunc = c.glMakeImageHandleResidentNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(handle, access)

  # Check if the function actually exists
  f = c.glMakeImageHandleResidentNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMakeImageHandleNonResidentNV(handle, handle_t=GLuint64):
    restype = None
    argtypes = [handle_t]
    cfunc = c.glMakeImageHandleNonResidentNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(handle)

  # Check if the function actually exists
  f = c.glMakeImageHandleNonResidentNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformHandleui64NV(location,
                            value,
                            location_t=GLint,
                            value_t=GLuint64):
    restype = None
    argtypes = [location_t, value_t]
    cfunc = c.glUniformHandleui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, value)

  # Check if the function actually exists
  f = c.glUniformHandleui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformHandleui64vNV(location,
                             count,
                             param0,
                             location_t=GLint,
                             count_t=GLsizei,
                             param0_t=GLuint64):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniformHandleui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniformHandleui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformHandleui64NV(program,
                                   location,
                                   value,
                                   program_t=GLuint,
                                   location_t=GLint,
                                   value_t=GLuint64):
    restype = None
    argtypes = [program_t, location_t, value_t]
    cfunc = c.glProgramUniformHandleui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, value)

  # Check if the function actually exists
  f = c.glProgramUniformHandleui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniformHandleui64vNV(program,
                                    location,
                                    count,
                                    param0,
                                    program_t=GLuint,
                                    location_t=GLint,
                                    count_t=GLsizei,
                                    param0_t=GLuint64):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniformHandleui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniformHandleui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsTextureHandleResidentNV(handle, handle_t=GLuint64):
    restype = GLboolean
    argtypes = [handle_t]
    cfunc = c.glIsTextureHandleResidentNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(handle)

  # Check if the function actually exists
  f = c.glIsTextureHandleResidentNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsImageHandleResidentNV(handle, handle_t=GLuint64):
    restype = GLboolean
    argtypes = [handle_t]
    cfunc = c.glIsImageHandleResidentNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(handle)

  # Check if the function actually exists
  f = c.glIsImageHandleResidentNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendParameteriNV(pname, value, pname_t=GLenum, value_t=GLint):
    restype = None
    argtypes = [pname_t, value_t]
    cfunc = c.glBlendParameteriNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pname, value)

  # Check if the function actually exists
  f = c.glBlendParameteriNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlendBarrierNV(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glBlendBarrierNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glBlendBarrierNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glViewportPositionWScaleNV(index,
                                 xcoeff,
                                 ycoeff,
                                 index_t=GLuint,
                                 xcoeff_t=GLfloat,
                                 ycoeff_t=GLfloat):
    restype = None
    argtypes = [index_t, xcoeff_t, ycoeff_t]
    cfunc = c.glViewportPositionWScaleNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, xcoeff, ycoeff)

  # Check if the function actually exists
  f = c.glViewportPositionWScaleNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBeginConditionalRenderNV(id, mode, id_t=GLuint, mode_t=GLenum):
    restype = None
    argtypes = [id_t, mode_t]
    cfunc = c.glBeginConditionalRenderNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(id, mode)

  # Check if the function actually exists
  f = c.glBeginConditionalRenderNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEndConditionalRenderNV(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glEndConditionalRenderNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glEndConditionalRenderNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSubpixelPrecisionBiasNV(xbits, ybits, xbits_t=GLuint, ybits_t=GLuint):
    restype = None
    argtypes = [xbits_t, ybits_t]
    cfunc = c.glSubpixelPrecisionBiasNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(xbits, ybits)

  # Check if the function actually exists
  f = c.glSubpixelPrecisionBiasNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glConservativeRasterParameteriNV(pname,
                                       param,
                                       pname_t=GLenum,
                                       param_t=GLint):
    restype = None
    argtypes = [pname_t, param_t]
    cfunc = c.glConservativeRasterParameteriNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pname, param)

  # Check if the function actually exists
  f = c.glConservativeRasterParameteriNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCopyBufferSubDataNV(readTarget,
                            writeTarget,
                            readOffset,
                            writeOffset,
                            size,
                            readTarget_t=GLenum,
                            writeTarget_t=GLenum,
                            readOffset_t=GLintptr,
                            writeOffset_t=GLintptr,
                            size_t=GLsizeiptr):
    restype = None
    argtypes = [
      readTarget_t, writeTarget_t, readOffset_t, writeOffset_t, size_t
    ]
    cfunc = c.glCopyBufferSubDataNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(readTarget, writeTarget, readOffset, writeOffset, size)

  # Check if the function actually exists
  f = c.glCopyBufferSubDataNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCoverageMaskNV(mask, mask_t=GLboolean):
    restype = None
    argtypes = [mask_t]
    cfunc = c.glCoverageMaskNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mask)

  # Check if the function actually exists
  f = c.glCoverageMaskNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCoverageOperationNV(operation, operation_t=GLenum):
    restype = None
    argtypes = [operation_t]
    cfunc = c.glCoverageOperationNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(operation)

  # Check if the function actually exists
  f = c.glCoverageOperationNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawBuffersNV(n, param0, n_t=GLsizei, param0_t=GLenum):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glDrawBuffersNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glDrawBuffersNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawArraysInstancedNV(mode,
                              first,
                              count,
                              primcount,
                              mode_t=GLenum,
                              first_t=GLint,
                              count_t=GLsizei,
                              primcount_t=GLsizei):
    restype = None
    argtypes = [mode_t, first_t, count_t, primcount_t]
    cfunc = c.glDrawArraysInstancedNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, first, count, primcount)

  # Check if the function actually exists
  f = c.glDrawArraysInstancedNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawElementsInstancedNV(mode,
                                count,
                                type,
                                voidindices,
                                primcount,
                                mode_t=GLenum,
                                count_t=GLsizei,
                                type_t=GLenum,
                                voidindices_t=ctypes.c_void_p,
                                primcount_t=GLsizei):
    restype = None
    argtypes = [mode_t, count_t, type_t, voidindices_t, primcount_t]
    cfunc = c.glDrawElementsInstancedNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, count, type, voidindices, primcount)

  # Check if the function actually exists
  f = c.glDrawElementsInstancedNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawVkImageNV(vkImage,
                      sampler,
                      x0,
                      y0,
                      x1,
                      y1,
                      z,
                      s0,
                      t0,
                      s1,
                      t1,
                      vkImage_t=GLuint64,
                      sampler_t=GLuint,
                      x0_t=GLfloat,
                      y0_t=GLfloat,
                      x1_t=GLfloat,
                      y1_t=GLfloat,
                      z_t=GLfloat,
                      s0_t=GLfloat,
                      t0_t=GLfloat,
                      s1_t=GLfloat,
                      t1_t=GLfloat):
    restype = None
    argtypes = [
      vkImage_t, sampler_t, x0_t, y0_t, x1_t, y1_t, z_t, s0_t, t0_t, s1_t, t1_t
    ]
    cfunc = c.glDrawVkImageNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1)

  # Check if the function actually exists
  f = c.glDrawVkImageNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetVkProcAddrNV(param0, param0_t=GLchar):
    restype = GLVULKANPROCNV
    argtypes = [param0_t]
    cfunc = c.glGetVkProcAddrNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0)

  # Check if the function actually exists
  f = c.glGetVkProcAddrNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glWaitVkSemaphoreNV(vkSemaphore, vkSemaphore_t=GLuint64):
    restype = None
    argtypes = [vkSemaphore_t]
    cfunc = c.glWaitVkSemaphoreNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(vkSemaphore)

  # Check if the function actually exists
  f = c.glWaitVkSemaphoreNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSignalVkSemaphoreNV(vkSemaphore, vkSemaphore_t=GLuint64):
    restype = None
    argtypes = [vkSemaphore_t]
    cfunc = c.glSignalVkSemaphoreNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(vkSemaphore)

  # Check if the function actually exists
  f = c.glSignalVkSemaphoreNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSignalVkFenceNV(vkFence, vkFence_t=GLuint64):
    restype = None
    argtypes = [vkFence_t]
    cfunc = c.glSignalVkFenceNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(vkFence)

  # Check if the function actually exists
  f = c.glSignalVkFenceNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDeleteFencesNV(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glDeleteFencesNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glDeleteFencesNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGenFencesNV(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glGenFencesNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glGenFencesNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsFenceNV(fence, fence_t=GLuint):
    restype = GLboolean
    argtypes = [fence_t]
    cfunc = c.glIsFenceNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(fence)

  # Check if the function actually exists
  f = c.glIsFenceNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTestFenceNV(fence, fence_t=GLuint):
    restype = GLboolean
    argtypes = [fence_t]
    cfunc = c.glTestFenceNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(fence)

  # Check if the function actually exists
  f = c.glTestFenceNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetFenceivNV(fence,
                     pname,
                     param0,
                     fence_t=GLuint,
                     pname_t=GLenum,
                     param0_t=GLint):
    restype = None
    argtypes = [fence_t, pname_t, param0_t]
    cfunc = c.glGetFenceivNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(fence, pname, param0)

  # Check if the function actually exists
  f = c.glGetFenceivNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFinishFenceNV(fence, fence_t=GLuint):
    restype = None
    argtypes = [fence_t]
    cfunc = c.glFinishFenceNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(fence)

  # Check if the function actually exists
  f = c.glFinishFenceNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSetFenceNV(fence, condition, fence_t=GLuint, condition_t=GLenum):
    restype = None
    argtypes = [fence_t, condition_t]
    cfunc = c.glSetFenceNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(fence, condition)

  # Check if the function actually exists
  f = c.glSetFenceNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFragmentCoverageColorNV(color, color_t=GLuint):
    restype = None
    argtypes = [color_t]
    cfunc = c.glFragmentCoverageColorNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(color)

  # Check if the function actually exists
  f = c.glFragmentCoverageColorNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBlitFramebufferNV(srcX0,
                          srcY0,
                          srcX1,
                          srcY1,
                          dstX0,
                          dstY0,
                          dstX1,
                          dstY1,
                          mask,
                          filter,
                          srcX0_t=GLint,
                          srcY0_t=GLint,
                          srcX1_t=GLint,
                          srcY1_t=GLint,
                          dstX0_t=GLint,
                          dstY0_t=GLint,
                          dstX1_t=GLint,
                          dstY1_t=GLint,
                          mask_t=GLbitfield,
                          filter_t=GLenum):
    restype = None
    argtypes = [
      srcX0_t, srcY0_t, srcX1_t, srcY1_t, dstX0_t, dstY0_t, dstX1_t, dstY1_t,
      mask_t, filter_t
    ]
    cfunc = c.glBlitFramebufferNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask,
                 filter)

  # Check if the function actually exists
  f = c.glBlitFramebufferNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCoverageModulationTableNV(n, param0, n_t=GLsizei, param0_t=GLfloat):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glCoverageModulationTableNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glCoverageModulationTableNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetCoverageModulationTableNV(bufSize,
                                     param0,
                                     bufSize_t=GLsizei,
                                     param0_t=GLfloat):
    restype = None
    argtypes = [bufSize_t, param0_t]
    cfunc = c.glGetCoverageModulationTableNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(bufSize, param0)

  # Check if the function actually exists
  f = c.glGetCoverageModulationTableNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCoverageModulationNV(components, components_t=GLenum):
    restype = None
    argtypes = [components_t]
    cfunc = c.glCoverageModulationNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(components)

  # Check if the function actually exists
  f = c.glCoverageModulationNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glRenderbufferStorageMultisampleNV(target,
                                         samples,
                                         internalformat,
                                         width,
                                         height,
                                         target_t=GLenum,
                                         samples_t=GLsizei,
                                         internalformat_t=GLenum,
                                         width_t=GLsizei,
                                         height_t=GLsizei):
    restype = None
    argtypes = [target_t, samples_t, internalformat_t, width_t, height_t]
    cfunc = c.glRenderbufferStorageMultisampleNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, samples, internalformat, width, height)

  # Check if the function actually exists
  f = c.glRenderbufferStorageMultisampleNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform1i64NV(location, x, location_t=GLint, x_t=GLint64EXT):
    restype = None
    argtypes = [location_t, x_t]
    cfunc = c.glUniform1i64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, x)

  # Check if the function actually exists
  f = c.glUniform1i64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform2i64NV(location,
                      x,
                      y,
                      location_t=GLint,
                      x_t=GLint64EXT,
                      y_t=GLint64EXT):
    restype = None
    argtypes = [location_t, x_t, y_t]
    cfunc = c.glUniform2i64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, x, y)

  # Check if the function actually exists
  f = c.glUniform2i64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform3i64NV(location,
                      x,
                      y,
                      z,
                      location_t=GLint,
                      x_t=GLint64EXT,
                      y_t=GLint64EXT,
                      z_t=GLint64EXT):
    restype = None
    argtypes = [location_t, x_t, y_t, z_t]
    cfunc = c.glUniform3i64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, x, y, z)

  # Check if the function actually exists
  f = c.glUniform3i64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform4i64NV(location,
                      x,
                      y,
                      z,
                      w,
                      location_t=GLint,
                      x_t=GLint64EXT,
                      y_t=GLint64EXT,
                      z_t=GLint64EXT,
                      w_t=GLint64EXT):
    restype = None
    argtypes = [location_t, x_t, y_t, z_t, w_t]
    cfunc = c.glUniform4i64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, x, y, z, w)

  # Check if the function actually exists
  f = c.glUniform4i64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform1i64vNV(location,
                       count,
                       param0,
                       location_t=GLint,
                       count_t=GLsizei,
                       param0_t=GLint64EXT):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniform1i64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniform1i64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform2i64vNV(location,
                       count,
                       param0,
                       location_t=GLint,
                       count_t=GLsizei,
                       param0_t=GLint64EXT):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniform2i64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniform2i64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform3i64vNV(location,
                       count,
                       param0,
                       location_t=GLint,
                       count_t=GLsizei,
                       param0_t=GLint64EXT):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniform3i64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniform3i64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform4i64vNV(location,
                       count,
                       param0,
                       location_t=GLint,
                       count_t=GLsizei,
                       param0_t=GLint64EXT):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniform4i64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniform4i64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform1ui64NV(location, x, location_t=GLint, x_t=GLuint64EXT):
    restype = None
    argtypes = [location_t, x_t]
    cfunc = c.glUniform1ui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, x)

  # Check if the function actually exists
  f = c.glUniform1ui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform2ui64NV(location,
                       x,
                       y,
                       location_t=GLint,
                       x_t=GLuint64EXT,
                       y_t=GLuint64EXT):
    restype = None
    argtypes = [location_t, x_t, y_t]
    cfunc = c.glUniform2ui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, x, y)

  # Check if the function actually exists
  f = c.glUniform2ui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform3ui64NV(location,
                       x,
                       y,
                       z,
                       location_t=GLint,
                       x_t=GLuint64EXT,
                       y_t=GLuint64EXT,
                       z_t=GLuint64EXT):
    restype = None
    argtypes = [location_t, x_t, y_t, z_t]
    cfunc = c.glUniform3ui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, x, y, z)

  # Check if the function actually exists
  f = c.glUniform3ui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform4ui64NV(location,
                       x,
                       y,
                       z,
                       w,
                       location_t=GLint,
                       x_t=GLuint64EXT,
                       y_t=GLuint64EXT,
                       z_t=GLuint64EXT,
                       w_t=GLuint64EXT):
    restype = None
    argtypes = [location_t, x_t, y_t, z_t, w_t]
    cfunc = c.glUniform4ui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, x, y, z, w)

  # Check if the function actually exists
  f = c.glUniform4ui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform1ui64vNV(location,
                        count,
                        param0,
                        location_t=GLint,
                        count_t=GLsizei,
                        param0_t=GLuint64EXT):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniform1ui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniform1ui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform2ui64vNV(location,
                        count,
                        param0,
                        location_t=GLint,
                        count_t=GLsizei,
                        param0_t=GLuint64EXT):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniform2ui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniform2ui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform3ui64vNV(location,
                        count,
                        param0,
                        location_t=GLint,
                        count_t=GLsizei,
                        param0_t=GLuint64EXT):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniform3ui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniform3ui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniform4ui64vNV(location,
                        count,
                        param0,
                        location_t=GLint,
                        count_t=GLsizei,
                        param0_t=GLuint64EXT):
    restype = None
    argtypes = [location_t, count_t, param0_t]
    cfunc = c.glUniform4ui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, param0)

  # Check if the function actually exists
  f = c.glUniform4ui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetUniformi64vNV(program,
                         location,
                         param0,
                         program_t=GLuint,
                         location_t=GLint,
                         param0_t=GLint64EXT):
    restype = None
    argtypes = [program_t, location_t, param0_t]
    cfunc = c.glGetUniformi64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, param0)

  # Check if the function actually exists
  f = c.glGetUniformi64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1i64NV(program,
                             location,
                             x,
                             program_t=GLuint,
                             location_t=GLint,
                             x_t=GLint64EXT):
    restype = None
    argtypes = [program_t, location_t, x_t]
    cfunc = c.glProgramUniform1i64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, x)

  # Check if the function actually exists
  f = c.glProgramUniform1i64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2i64NV(program,
                             location,
                             x,
                             y,
                             program_t=GLuint,
                             location_t=GLint,
                             x_t=GLint64EXT,
                             y_t=GLint64EXT):
    restype = None
    argtypes = [program_t, location_t, x_t, y_t]
    cfunc = c.glProgramUniform2i64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, x, y)

  # Check if the function actually exists
  f = c.glProgramUniform2i64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3i64NV(program,
                             location,
                             x,
                             y,
                             z,
                             program_t=GLuint,
                             location_t=GLint,
                             x_t=GLint64EXT,
                             y_t=GLint64EXT,
                             z_t=GLint64EXT):
    restype = None
    argtypes = [program_t, location_t, x_t, y_t, z_t]
    cfunc = c.glProgramUniform3i64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, x, y, z)

  # Check if the function actually exists
  f = c.glProgramUniform3i64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4i64NV(program,
                             location,
                             x,
                             y,
                             z,
                             w,
                             program_t=GLuint,
                             location_t=GLint,
                             x_t=GLint64EXT,
                             y_t=GLint64EXT,
                             z_t=GLint64EXT,
                             w_t=GLint64EXT):
    restype = None
    argtypes = [program_t, location_t, x_t, y_t, z_t, w_t]
    cfunc = c.glProgramUniform4i64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, x, y, z, w)

  # Check if the function actually exists
  f = c.glProgramUniform4i64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1i64vNV(program,
                              location,
                              count,
                              param0,
                              program_t=GLuint,
                              location_t=GLint,
                              count_t=GLsizei,
                              param0_t=GLint64EXT):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform1i64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform1i64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2i64vNV(program,
                              location,
                              count,
                              param0,
                              program_t=GLuint,
                              location_t=GLint,
                              count_t=GLsizei,
                              param0_t=GLint64EXT):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform2i64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform2i64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3i64vNV(program,
                              location,
                              count,
                              param0,
                              program_t=GLuint,
                              location_t=GLint,
                              count_t=GLsizei,
                              param0_t=GLint64EXT):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform3i64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform3i64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4i64vNV(program,
                              location,
                              count,
                              param0,
                              program_t=GLuint,
                              location_t=GLint,
                              count_t=GLsizei,
                              param0_t=GLint64EXT):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform4i64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform4i64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1ui64NV(program,
                              location,
                              x,
                              program_t=GLuint,
                              location_t=GLint,
                              x_t=GLuint64EXT):
    restype = None
    argtypes = [program_t, location_t, x_t]
    cfunc = c.glProgramUniform1ui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, x)

  # Check if the function actually exists
  f = c.glProgramUniform1ui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2ui64NV(program,
                              location,
                              x,
                              y,
                              program_t=GLuint,
                              location_t=GLint,
                              x_t=GLuint64EXT,
                              y_t=GLuint64EXT):
    restype = None
    argtypes = [program_t, location_t, x_t, y_t]
    cfunc = c.glProgramUniform2ui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, x, y)

  # Check if the function actually exists
  f = c.glProgramUniform2ui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3ui64NV(program,
                              location,
                              x,
                              y,
                              z,
                              program_t=GLuint,
                              location_t=GLint,
                              x_t=GLuint64EXT,
                              y_t=GLuint64EXT,
                              z_t=GLuint64EXT):
    restype = None
    argtypes = [program_t, location_t, x_t, y_t, z_t]
    cfunc = c.glProgramUniform3ui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, x, y, z)

  # Check if the function actually exists
  f = c.glProgramUniform3ui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4ui64NV(program,
                              location,
                              x,
                              y,
                              z,
                              w,
                              program_t=GLuint,
                              location_t=GLint,
                              x_t=GLuint64EXT,
                              y_t=GLuint64EXT,
                              z_t=GLuint64EXT,
                              w_t=GLuint64EXT):
    restype = None
    argtypes = [program_t, location_t, x_t, y_t, z_t, w_t]
    cfunc = c.glProgramUniform4ui64NV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, x, y, z, w)

  # Check if the function actually exists
  f = c.glProgramUniform4ui64NV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform1ui64vNV(program,
                               location,
                               count,
                               param0,
                               program_t=GLuint,
                               location_t=GLint,
                               count_t=GLsizei,
                               param0_t=GLuint64EXT):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform1ui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform1ui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform2ui64vNV(program,
                               location,
                               count,
                               param0,
                               program_t=GLuint,
                               location_t=GLint,
                               count_t=GLsizei,
                               param0_t=GLuint64EXT):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform2ui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform2ui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform3ui64vNV(program,
                               location,
                               count,
                               param0,
                               program_t=GLuint,
                               location_t=GLint,
                               count_t=GLsizei,
                               param0_t=GLuint64EXT):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform3ui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform3ui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramUniform4ui64vNV(program,
                               location,
                               count,
                               param0,
                               program_t=GLuint,
                               location_t=GLint,
                               count_t=GLsizei,
                               param0_t=GLuint64EXT):
    restype = None
    argtypes = [program_t, location_t, count_t, param0_t]
    cfunc = c.glProgramUniform4ui64vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, count, param0)

  # Check if the function actually exists
  f = c.glProgramUniform4ui64vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glVertexAttribDivisorNV(index, divisor, index_t=GLuint,
                              divisor_t=GLuint):
    restype = None
    argtypes = [index_t, divisor_t]
    cfunc = c.glVertexAttribDivisorNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, divisor)

  # Check if the function actually exists
  f = c.glVertexAttribDivisorNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetInternalformatSampleivNV(target,
                                    internalformat,
                                    samples,
                                    pname,
                                    count,
                                    param0,
                                    target_t=GLenum,
                                    internalformat_t=GLenum,
                                    samples_t=GLsizei,
                                    pname_t=GLenum,
                                    count_t=GLsizei,
                                    param0_t=GLint):
    restype = None
    argtypes = [
      target_t, internalformat_t, samples_t, pname_t, count_t, param0_t
    ]
    cfunc = c.glGetInternalformatSampleivNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, internalformat, samples, pname, count, param0)

  # Check if the function actually exists
  f = c.glGetInternalformatSampleivNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetMemoryObjectDetachedResourcesuivNV(memory,
                                              pname,
                                              first,
                                              count,
                                              param0,
                                              memory_t=GLuint,
                                              pname_t=GLenum,
                                              first_t=GLint,
                                              count_t=GLsizei,
                                              param0_t=GLuint):
    restype = None
    argtypes = [memory_t, pname_t, first_t, count_t, param0_t]
    cfunc = c.glGetMemoryObjectDetachedResourcesuivNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memory, pname, first, count, param0)

  # Check if the function actually exists
  f = c.glGetMemoryObjectDetachedResourcesuivNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glResetMemoryObjectParameterNV(memory,
                                     pname,
                                     memory_t=GLuint,
                                     pname_t=GLenum):
    restype = None
    argtypes = [memory_t, pname_t]
    cfunc = c.glResetMemoryObjectParameterNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(memory, pname)

  # Check if the function actually exists
  f = c.glResetMemoryObjectParameterNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexAttachMemoryNV(target,
                          memory,
                          offset,
                          target_t=GLenum,
                          memory_t=GLuint,
                          offset_t=GLuint64):
    restype = None
    argtypes = [target_t, memory_t, offset_t]
    cfunc = c.glTexAttachMemoryNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, memory, offset)

  # Check if the function actually exists
  f = c.glTexAttachMemoryNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBufferAttachMemoryNV(target,
                             memory,
                             offset,
                             target_t=GLenum,
                             memory_t=GLuint,
                             offset_t=GLuint64):
    restype = None
    argtypes = [target_t, memory_t, offset_t]
    cfunc = c.glBufferAttachMemoryNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, memory, offset)

  # Check if the function actually exists
  f = c.glBufferAttachMemoryNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureAttachMemoryNV(texture,
                              memory,
                              offset,
                              texture_t=GLuint,
                              memory_t=GLuint,
                              offset_t=GLuint64):
    restype = None
    argtypes = [texture_t, memory_t, offset_t]
    cfunc = c.glTextureAttachMemoryNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, memory, offset)

  # Check if the function actually exists
  f = c.glTextureAttachMemoryNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glNamedBufferAttachMemoryNV(buffer,
                                  memory,
                                  offset,
                                  buffer_t=GLuint,
                                  memory_t=GLuint,
                                  offset_t=GLuint64):
    restype = None
    argtypes = [buffer_t, memory_t, offset_t]
    cfunc = c.glNamedBufferAttachMemoryNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buffer, memory, offset)

  # Check if the function actually exists
  f = c.glNamedBufferAttachMemoryNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBufferPageCommitmentMemNV(target,
                                  offset,
                                  size,
                                  memory,
                                  memOffset,
                                  commit,
                                  target_t=GLenum,
                                  offset_t=GLintptr,
                                  size_t=GLsizeiptr,
                                  memory_t=GLuint,
                                  memOffset_t=GLuint64,
                                  commit_t=GLboolean):
    restype = None
    argtypes = [target_t, offset_t, size_t, memory_t, memOffset_t, commit_t]
    cfunc = c.glBufferPageCommitmentMemNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, offset, size, memory, memOffset, commit)

  # Check if the function actually exists
  f = c.glBufferPageCommitmentMemNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexPageCommitmentMemNV(target,
                               layer,
                               level,
                               xoffset,
                               yoffset,
                               zoffset,
                               width,
                               height,
                               depth,
                               memory,
                               offset,
                               commit,
                               target_t=GLenum,
                               layer_t=GLint,
                               level_t=GLint,
                               xoffset_t=GLint,
                               yoffset_t=GLint,
                               zoffset_t=GLint,
                               width_t=GLsizei,
                               height_t=GLsizei,
                               depth_t=GLsizei,
                               memory_t=GLuint,
                               offset_t=GLuint64,
                               commit_t=GLboolean):
    restype = None
    argtypes = [
      target_t, layer_t, level_t, xoffset_t, yoffset_t, zoffset_t, width_t,
      height_t, depth_t, memory_t, offset_t, commit_t
    ]
    cfunc = c.glTexPageCommitmentMemNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, layer, level, xoffset, yoffset, zoffset, width,
                 height, depth, memory, offset, commit)

  # Check if the function actually exists
  f = c.glTexPageCommitmentMemNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glNamedBufferPageCommitmentMemNV(buffer,
                                       offset,
                                       size,
                                       memory,
                                       memOffset,
                                       commit,
                                       buffer_t=GLuint,
                                       offset_t=GLintptr,
                                       size_t=GLsizeiptr,
                                       memory_t=GLuint,
                                       memOffset_t=GLuint64,
                                       commit_t=GLboolean):
    restype = None
    argtypes = [buffer_t, offset_t, size_t, memory_t, memOffset_t, commit_t]
    cfunc = c.glNamedBufferPageCommitmentMemNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(buffer, offset, size, memory, memOffset, commit)

  # Check if the function actually exists
  f = c.glNamedBufferPageCommitmentMemNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexturePageCommitmentMemNV(texture,
                                   layer,
                                   level,
                                   xoffset,
                                   yoffset,
                                   zoffset,
                                   width,
                                   height,
                                   depth,
                                   memory,
                                   offset,
                                   commit,
                                   texture_t=GLuint,
                                   layer_t=GLint,
                                   level_t=GLint,
                                   xoffset_t=GLint,
                                   yoffset_t=GLint,
                                   zoffset_t=GLint,
                                   width_t=GLsizei,
                                   height_t=GLsizei,
                                   depth_t=GLsizei,
                                   memory_t=GLuint,
                                   offset_t=GLuint64,
                                   commit_t=GLboolean):
    restype = None
    argtypes = [
      texture_t, layer_t, level_t, xoffset_t, yoffset_t, zoffset_t, width_t,
      height_t, depth_t, memory_t, offset_t, commit_t
    ]
    cfunc = c.glTexturePageCommitmentMemNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, layer, level, xoffset, yoffset, zoffset, width,
                 height, depth, memory, offset, commit)

  # Check if the function actually exists
  f = c.glTexturePageCommitmentMemNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawMeshTasksNV(first, count, first_t=GLuint, count_t=GLuint):
    restype = None
    argtypes = [first_t, count_t]
    cfunc = c.glDrawMeshTasksNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(first, count)

  # Check if the function actually exists
  f = c.glDrawMeshTasksNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDrawMeshTasksIndirectNV(indirect, indirect_t=GLintptr):
    restype = None
    argtypes = [indirect_t]
    cfunc = c.glDrawMeshTasksIndirectNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(indirect)

  # Check if the function actually exists
  f = c.glDrawMeshTasksIndirectNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMultiDrawMeshTasksIndirectNV(indirect,
                                     drawcount,
                                     stride,
                                     indirect_t=GLintptr,
                                     drawcount_t=GLsizei,
                                     stride_t=GLsizei):
    restype = None
    argtypes = [indirect_t, drawcount_t, stride_t]
    cfunc = c.glMultiDrawMeshTasksIndirectNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(indirect, drawcount, stride)

  # Check if the function actually exists
  f = c.glMultiDrawMeshTasksIndirectNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMultiDrawMeshTasksIndirectCountNV(indirect,
                                          drawcount,
                                          maxdrawcount,
                                          stride,
                                          indirect_t=GLintptr,
                                          drawcount_t=GLintptr,
                                          maxdrawcount_t=GLsizei,
                                          stride_t=GLsizei):
    restype = None
    argtypes = [indirect_t, drawcount_t, maxdrawcount_t, stride_t]
    cfunc = c.glMultiDrawMeshTasksIndirectCountNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(indirect, drawcount, maxdrawcount, stride)

  # Check if the function actually exists
  f = c.glMultiDrawMeshTasksIndirectCountNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformMatrix2x3fvNV(location,
                             count,
                             transpose,
                             param0,
                             location_t=GLint,
                             count_t=GLsizei,
                             transpose_t=GLboolean,
                             param0_t=GLfloat):
    restype = None
    argtypes = [location_t, count_t, transpose_t, param0_t]
    cfunc = c.glUniformMatrix2x3fvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glUniformMatrix2x3fvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformMatrix3x2fvNV(location,
                             count,
                             transpose,
                             param0,
                             location_t=GLint,
                             count_t=GLsizei,
                             transpose_t=GLboolean,
                             param0_t=GLfloat):
    restype = None
    argtypes = [location_t, count_t, transpose_t, param0_t]
    cfunc = c.glUniformMatrix3x2fvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glUniformMatrix3x2fvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformMatrix2x4fvNV(location,
                             count,
                             transpose,
                             param0,
                             location_t=GLint,
                             count_t=GLsizei,
                             transpose_t=GLboolean,
                             param0_t=GLfloat):
    restype = None
    argtypes = [location_t, count_t, transpose_t, param0_t]
    cfunc = c.glUniformMatrix2x4fvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glUniformMatrix2x4fvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformMatrix4x2fvNV(location,
                             count,
                             transpose,
                             param0,
                             location_t=GLint,
                             count_t=GLsizei,
                             transpose_t=GLboolean,
                             param0_t=GLfloat):
    restype = None
    argtypes = [location_t, count_t, transpose_t, param0_t]
    cfunc = c.glUniformMatrix4x2fvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glUniformMatrix4x2fvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformMatrix3x4fvNV(location,
                             count,
                             transpose,
                             param0,
                             location_t=GLint,
                             count_t=GLsizei,
                             transpose_t=GLboolean,
                             param0_t=GLfloat):
    restype = None
    argtypes = [location_t, count_t, transpose_t, param0_t]
    cfunc = c.glUniformMatrix3x4fvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glUniformMatrix3x4fvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glUniformMatrix4x3fvNV(location,
                             count,
                             transpose,
                             param0,
                             location_t=GLint,
                             count_t=GLsizei,
                             transpose_t=GLboolean,
                             param0_t=GLfloat):
    restype = None
    argtypes = [location_t, count_t, transpose_t, param0_t]
    cfunc = c.glUniformMatrix4x3fvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(location, count, transpose, param0)

  # Check if the function actually exists
  f = c.glUniformMatrix4x3fvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGenPathsNV(range, range_t=GLsizei):
    restype = GLuint
    argtypes = [range_t]
    cfunc = c.glGenPathsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(range)

  # Check if the function actually exists
  f = c.glGenPathsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDeletePathsNV(path, range, path_t=GLuint, range_t=GLsizei):
    restype = None
    argtypes = [path_t, range_t]
    cfunc = c.glDeletePathsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, range)

  # Check if the function actually exists
  f = c.glDeletePathsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsPathNV(path, path_t=GLuint):
    restype = GLboolean
    argtypes = [path_t]
    cfunc = c.glIsPathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path)

  # Check if the function actually exists
  f = c.glIsPathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathCommandsNV(path,
                       numCommands,
                       param0,
                       numCoords,
                       coordType,
                       voidcoords,
                       path_t=GLuint,
                       numCommands_t=GLsizei,
                       param0_t=GLubyte,
                       numCoords_t=GLsizei,
                       coordType_t=GLenum,
                       voidcoords_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      path_t, numCommands_t, param0_t, numCoords_t, coordType_t, voidcoords_t
    ]
    cfunc = c.glPathCommandsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, numCommands, param0, numCoords, coordType, voidcoords)

  # Check if the function actually exists
  f = c.glPathCommandsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathCoordsNV(path,
                     numCoords,
                     coordType,
                     voidcoords,
                     path_t=GLuint,
                     numCoords_t=GLsizei,
                     coordType_t=GLenum,
                     voidcoords_t=ctypes.c_void_p):
    restype = None
    argtypes = [path_t, numCoords_t, coordType_t, voidcoords_t]
    cfunc = c.glPathCoordsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, numCoords, coordType, voidcoords)

  # Check if the function actually exists
  f = c.glPathCoordsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathSubCommandsNV(path,
                          commandStart,
                          commandsToDelete,
                          numCommands,
                          param0,
                          numCoords,
                          coordType,
                          voidcoords,
                          path_t=GLuint,
                          commandStart_t=GLsizei,
                          commandsToDelete_t=GLsizei,
                          numCommands_t=GLsizei,
                          param0_t=GLubyte,
                          numCoords_t=GLsizei,
                          coordType_t=GLenum,
                          voidcoords_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      path_t, commandStart_t, commandsToDelete_t, numCommands_t, param0_t,
      numCoords_t, coordType_t, voidcoords_t
    ]
    cfunc = c.glPathSubCommandsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, commandStart, commandsToDelete, numCommands, param0,
                 numCoords, coordType, voidcoords)

  # Check if the function actually exists
  f = c.glPathSubCommandsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathSubCoordsNV(path,
                        coordStart,
                        numCoords,
                        coordType,
                        voidcoords,
                        path_t=GLuint,
                        coordStart_t=GLsizei,
                        numCoords_t=GLsizei,
                        coordType_t=GLenum,
                        voidcoords_t=ctypes.c_void_p):
    restype = None
    argtypes = [path_t, coordStart_t, numCoords_t, coordType_t, voidcoords_t]
    cfunc = c.glPathSubCoordsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, coordStart, numCoords, coordType, voidcoords)

  # Check if the function actually exists
  f = c.glPathSubCoordsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathStringNV(path,
                     format,
                     length,
                     voidpathString,
                     path_t=GLuint,
                     format_t=GLenum,
                     length_t=GLsizei,
                     voidpathString_t=ctypes.c_void_p):
    restype = None
    argtypes = [path_t, format_t, length_t, voidpathString_t]
    cfunc = c.glPathStringNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, format, length, voidpathString)

  # Check if the function actually exists
  f = c.glPathStringNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathGlyphsNV(firstPathName,
                     fontTarget,
                     voidfontName,
                     fontStyle,
                     numGlyphs,
                     type,
                     voidcharcodes,
                     handleMissingGlyphs,
                     pathParameterTemplate,
                     emScale,
                     firstPathName_t=GLuint,
                     fontTarget_t=GLenum,
                     voidfontName_t=ctypes.c_void_p,
                     fontStyle_t=GLbitfield,
                     numGlyphs_t=GLsizei,
                     type_t=GLenum,
                     voidcharcodes_t=ctypes.c_void_p,
                     handleMissingGlyphs_t=GLenum,
                     pathParameterTemplate_t=GLuint,
                     emScale_t=GLfloat):
    restype = None
    argtypes = [
      firstPathName_t, fontTarget_t, voidfontName_t, fontStyle_t, numGlyphs_t,
      type_t, voidcharcodes_t, handleMissingGlyphs_t, pathParameterTemplate_t,
      emScale_t
    ]
    cfunc = c.glPathGlyphsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(firstPathName, fontTarget, voidfontName, fontStyle, numGlyphs,
                 type, voidcharcodes, handleMissingGlyphs,
                 pathParameterTemplate, emScale)

  # Check if the function actually exists
  f = c.glPathGlyphsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathGlyphRangeNV(firstPathName,
                         fontTarget,
                         voidfontName,
                         fontStyle,
                         firstGlyph,
                         numGlyphs,
                         handleMissingGlyphs,
                         pathParameterTemplate,
                         emScale,
                         firstPathName_t=GLuint,
                         fontTarget_t=GLenum,
                         voidfontName_t=ctypes.c_void_p,
                         fontStyle_t=GLbitfield,
                         firstGlyph_t=GLuint,
                         numGlyphs_t=GLsizei,
                         handleMissingGlyphs_t=GLenum,
                         pathParameterTemplate_t=GLuint,
                         emScale_t=GLfloat):
    restype = None
    argtypes = [
      firstPathName_t, fontTarget_t, voidfontName_t, fontStyle_t, firstGlyph_t,
      numGlyphs_t, handleMissingGlyphs_t, pathParameterTemplate_t, emScale_t
    ]
    cfunc = c.glPathGlyphRangeNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(firstPathName, fontTarget, voidfontName, fontStyle,
                 firstGlyph, numGlyphs, handleMissingGlyphs,
                 pathParameterTemplate, emScale)

  # Check if the function actually exists
  f = c.glPathGlyphRangeNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glWeightPathsNV(resultPath,
                      numPaths,
                      param0,
                      param1,
                      resultPath_t=GLuint,
                      numPaths_t=GLsizei,
                      param0_t=GLuint,
                      param1_t=GLfloat):
    restype = None
    argtypes = [resultPath_t, numPaths_t, param0_t, param1_t]
    cfunc = c.glWeightPathsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(resultPath, numPaths, param0, param1)

  # Check if the function actually exists
  f = c.glWeightPathsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCopyPathNV(resultPath, srcPath, resultPath_t=GLuint, srcPath_t=GLuint):
    restype = None
    argtypes = [resultPath_t, srcPath_t]
    cfunc = c.glCopyPathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(resultPath, srcPath)

  # Check if the function actually exists
  f = c.glCopyPathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glInterpolatePathsNV(resultPath,
                           pathA,
                           pathB,
                           weight,
                           resultPath_t=GLuint,
                           pathA_t=GLuint,
                           pathB_t=GLuint,
                           weight_t=GLfloat):
    restype = None
    argtypes = [resultPath_t, pathA_t, pathB_t, weight_t]
    cfunc = c.glInterpolatePathsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(resultPath, pathA, pathB, weight)

  # Check if the function actually exists
  f = c.glInterpolatePathsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTransformPathNV(resultPath,
                        srcPath,
                        transformType,
                        param0,
                        resultPath_t=GLuint,
                        srcPath_t=GLuint,
                        transformType_t=GLenum,
                        param0_t=GLfloat):
    restype = None
    argtypes = [resultPath_t, srcPath_t, transformType_t, param0_t]
    cfunc = c.glTransformPathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(resultPath, srcPath, transformType, param0)

  # Check if the function actually exists
  f = c.glTransformPathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathParameterivNV(path,
                          pname,
                          param0,
                          path_t=GLuint,
                          pname_t=GLenum,
                          param0_t=GLint):
    restype = None
    argtypes = [path_t, pname_t, param0_t]
    cfunc = c.glPathParameterivNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, pname, param0)

  # Check if the function actually exists
  f = c.glPathParameterivNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathParameteriNV(path,
                         pname,
                         value,
                         path_t=GLuint,
                         pname_t=GLenum,
                         value_t=GLint):
    restype = None
    argtypes = [path_t, pname_t, value_t]
    cfunc = c.glPathParameteriNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, pname, value)

  # Check if the function actually exists
  f = c.glPathParameteriNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathParameterfvNV(path,
                          pname,
                          param0,
                          path_t=GLuint,
                          pname_t=GLenum,
                          param0_t=GLfloat):
    restype = None
    argtypes = [path_t, pname_t, param0_t]
    cfunc = c.glPathParameterfvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, pname, param0)

  # Check if the function actually exists
  f = c.glPathParameterfvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathParameterfNV(path,
                         pname,
                         value,
                         path_t=GLuint,
                         pname_t=GLenum,
                         value_t=GLfloat):
    restype = None
    argtypes = [path_t, pname_t, value_t]
    cfunc = c.glPathParameterfNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, pname, value)

  # Check if the function actually exists
  f = c.glPathParameterfNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathDashArrayNV(path,
                        dashCount,
                        param0,
                        path_t=GLuint,
                        dashCount_t=GLsizei,
                        param0_t=GLfloat):
    restype = None
    argtypes = [path_t, dashCount_t, param0_t]
    cfunc = c.glPathDashArrayNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, dashCount, param0)

  # Check if the function actually exists
  f = c.glPathDashArrayNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathStencilFuncNV(func,
                          ref,
                          mask,
                          func_t=GLenum,
                          ref_t=GLint,
                          mask_t=GLuint):
    restype = None
    argtypes = [func_t, ref_t, mask_t]
    cfunc = c.glPathStencilFuncNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(func, ref, mask)

  # Check if the function actually exists
  f = c.glPathStencilFuncNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathStencilDepthOffsetNV(factor,
                                 units,
                                 factor_t=GLfloat,
                                 units_t=GLfloat):
    restype = None
    argtypes = [factor_t, units_t]
    cfunc = c.glPathStencilDepthOffsetNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(factor, units)

  # Check if the function actually exists
  f = c.glPathStencilDepthOffsetNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glStencilFillPathNV(path,
                          fillMode,
                          mask,
                          path_t=GLuint,
                          fillMode_t=GLenum,
                          mask_t=GLuint):
    restype = None
    argtypes = [path_t, fillMode_t, mask_t]
    cfunc = c.glStencilFillPathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, fillMode, mask)

  # Check if the function actually exists
  f = c.glStencilFillPathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glStencilStrokePathNV(path,
                            reference,
                            mask,
                            path_t=GLuint,
                            reference_t=GLint,
                            mask_t=GLuint):
    restype = None
    argtypes = [path_t, reference_t, mask_t]
    cfunc = c.glStencilStrokePathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, reference, mask)

  # Check if the function actually exists
  f = c.glStencilStrokePathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glStencilFillPathInstancedNV(numPaths,
                                   pathNameType,
                                   voidpaths,
                                   pathBase,
                                   fillMode,
                                   mask,
                                   transformType,
                                   param0,
                                   numPaths_t=GLsizei,
                                   pathNameType_t=GLenum,
                                   voidpaths_t=ctypes.c_void_p,
                                   pathBase_t=GLuint,
                                   fillMode_t=GLenum,
                                   mask_t=GLuint,
                                   transformType_t=GLenum,
                                   param0_t=GLfloat):
    restype = None
    argtypes = [
      numPaths_t, pathNameType_t, voidpaths_t, pathBase_t, fillMode_t, mask_t,
      transformType_t, param0_t
    ]
    cfunc = c.glStencilFillPathInstancedNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(numPaths, pathNameType, voidpaths, pathBase, fillMode, mask,
                 transformType, param0)

  # Check if the function actually exists
  f = c.glStencilFillPathInstancedNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glStencilStrokePathInstancedNV(numPaths,
                                     pathNameType,
                                     voidpaths,
                                     pathBase,
                                     reference,
                                     mask,
                                     transformType,
                                     param0,
                                     numPaths_t=GLsizei,
                                     pathNameType_t=GLenum,
                                     voidpaths_t=ctypes.c_void_p,
                                     pathBase_t=GLuint,
                                     reference_t=GLint,
                                     mask_t=GLuint,
                                     transformType_t=GLenum,
                                     param0_t=GLfloat):
    restype = None
    argtypes = [
      numPaths_t, pathNameType_t, voidpaths_t, pathBase_t, reference_t, mask_t,
      transformType_t, param0_t
    ]
    cfunc = c.glStencilStrokePathInstancedNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(numPaths, pathNameType, voidpaths, pathBase, reference, mask,
                 transformType, param0)

  # Check if the function actually exists
  f = c.glStencilStrokePathInstancedNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathCoverDepthFuncNV(func, func_t=GLenum):
    restype = None
    argtypes = [func_t]
    cfunc = c.glPathCoverDepthFuncNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(func)

  # Check if the function actually exists
  f = c.glPathCoverDepthFuncNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCoverFillPathNV(path, coverMode, path_t=GLuint, coverMode_t=GLenum):
    restype = None
    argtypes = [path_t, coverMode_t]
    cfunc = c.glCoverFillPathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, coverMode)

  # Check if the function actually exists
  f = c.glCoverFillPathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCoverStrokePathNV(path, coverMode, path_t=GLuint, coverMode_t=GLenum):
    restype = None
    argtypes = [path_t, coverMode_t]
    cfunc = c.glCoverStrokePathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, coverMode)

  # Check if the function actually exists
  f = c.glCoverStrokePathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCoverFillPathInstancedNV(numPaths,
                                 pathNameType,
                                 voidpaths,
                                 pathBase,
                                 coverMode,
                                 transformType,
                                 param0,
                                 numPaths_t=GLsizei,
                                 pathNameType_t=GLenum,
                                 voidpaths_t=ctypes.c_void_p,
                                 pathBase_t=GLuint,
                                 coverMode_t=GLenum,
                                 transformType_t=GLenum,
                                 param0_t=GLfloat):
    restype = None
    argtypes = [
      numPaths_t, pathNameType_t, voidpaths_t, pathBase_t, coverMode_t,
      transformType_t, param0_t
    ]
    cfunc = c.glCoverFillPathInstancedNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(numPaths, pathNameType, voidpaths, pathBase, coverMode,
                 transformType, param0)

  # Check if the function actually exists
  f = c.glCoverFillPathInstancedNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCoverStrokePathInstancedNV(numPaths,
                                   pathNameType,
                                   voidpaths,
                                   pathBase,
                                   coverMode,
                                   transformType,
                                   param0,
                                   numPaths_t=GLsizei,
                                   pathNameType_t=GLenum,
                                   voidpaths_t=ctypes.c_void_p,
                                   pathBase_t=GLuint,
                                   coverMode_t=GLenum,
                                   transformType_t=GLenum,
                                   param0_t=GLfloat):
    restype = None
    argtypes = [
      numPaths_t, pathNameType_t, voidpaths_t, pathBase_t, coverMode_t,
      transformType_t, param0_t
    ]
    cfunc = c.glCoverStrokePathInstancedNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(numPaths, pathNameType, voidpaths, pathBase, coverMode,
                 transformType, param0)

  # Check if the function actually exists
  f = c.glCoverStrokePathInstancedNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPathParameterivNV(path,
                             pname,
                             param0,
                             path_t=GLuint,
                             pname_t=GLenum,
                             param0_t=GLint):
    restype = None
    argtypes = [path_t, pname_t, param0_t]
    cfunc = c.glGetPathParameterivNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, pname, param0)

  # Check if the function actually exists
  f = c.glGetPathParameterivNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPathParameterfvNV(path,
                             pname,
                             param0,
                             path_t=GLuint,
                             pname_t=GLenum,
                             param0_t=GLfloat):
    restype = None
    argtypes = [path_t, pname_t, param0_t]
    cfunc = c.glGetPathParameterfvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, pname, param0)

  # Check if the function actually exists
  f = c.glGetPathParameterfvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPathCommandsNV(path, param0, path_t=GLuint, param0_t=GLubyte):
    restype = None
    argtypes = [path_t, param0_t]
    cfunc = c.glGetPathCommandsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, param0)

  # Check if the function actually exists
  f = c.glGetPathCommandsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPathCoordsNV(path, param0, path_t=GLuint, param0_t=GLfloat):
    restype = None
    argtypes = [path_t, param0_t]
    cfunc = c.glGetPathCoordsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, param0)

  # Check if the function actually exists
  f = c.glGetPathCoordsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPathDashArrayNV(path, param0, path_t=GLuint, param0_t=GLfloat):
    restype = None
    argtypes = [path_t, param0_t]
    cfunc = c.glGetPathDashArrayNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, param0)

  # Check if the function actually exists
  f = c.glGetPathDashArrayNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPathMetricsNV(metricQueryMask,
                         numPaths,
                         pathNameType,
                         voidpaths,
                         pathBase,
                         stride,
                         param0,
                         metricQueryMask_t=GLbitfield,
                         numPaths_t=GLsizei,
                         pathNameType_t=GLenum,
                         voidpaths_t=ctypes.c_void_p,
                         pathBase_t=GLuint,
                         stride_t=GLsizei,
                         param0_t=GLfloat):
    restype = None
    argtypes = [
      metricQueryMask_t, numPaths_t, pathNameType_t, voidpaths_t, pathBase_t,
      stride_t, param0_t
    ]
    cfunc = c.glGetPathMetricsNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(metricQueryMask, numPaths, pathNameType, voidpaths, pathBase,
                 stride, param0)

  # Check if the function actually exists
  f = c.glGetPathMetricsNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPathMetricRangeNV(metricQueryMask,
                             firstPathName,
                             numPaths,
                             stride,
                             param0,
                             metricQueryMask_t=GLbitfield,
                             firstPathName_t=GLuint,
                             numPaths_t=GLsizei,
                             stride_t=GLsizei,
                             param0_t=GLfloat):
    restype = None
    argtypes = [
      metricQueryMask_t, firstPathName_t, numPaths_t, stride_t, param0_t
    ]
    cfunc = c.glGetPathMetricRangeNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(metricQueryMask, firstPathName, numPaths, stride, param0)

  # Check if the function actually exists
  f = c.glGetPathMetricRangeNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPathSpacingNV(pathListMode,
                         numPaths,
                         pathNameType,
                         voidpaths,
                         pathBase,
                         advanceScale,
                         kerningScale,
                         transformType,
                         param0,
                         pathListMode_t=GLenum,
                         numPaths_t=GLsizei,
                         pathNameType_t=GLenum,
                         voidpaths_t=ctypes.c_void_p,
                         pathBase_t=GLuint,
                         advanceScale_t=GLfloat,
                         kerningScale_t=GLfloat,
                         transformType_t=GLenum,
                         param0_t=GLfloat):
    restype = None
    argtypes = [
      pathListMode_t, numPaths_t, pathNameType_t, voidpaths_t, pathBase_t,
      advanceScale_t, kerningScale_t, transformType_t, param0_t
    ]
    cfunc = c.glGetPathSpacingNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(pathListMode, numPaths, pathNameType, voidpaths, pathBase,
                 advanceScale, kerningScale, transformType, param0)

  # Check if the function actually exists
  f = c.glGetPathSpacingNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsPointInFillPathNV(path,
                            mask,
                            x,
                            y,
                            path_t=GLuint,
                            mask_t=GLuint,
                            x_t=GLfloat,
                            y_t=GLfloat):
    restype = GLboolean
    argtypes = [path_t, mask_t, x_t, y_t]
    cfunc = c.glIsPointInFillPathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, mask, x, y)

  # Check if the function actually exists
  f = c.glIsPointInFillPathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsPointInStrokePathNV(path,
                              x,
                              y,
                              path_t=GLuint,
                              x_t=GLfloat,
                              y_t=GLfloat):
    restype = GLboolean
    argtypes = [path_t, x_t, y_t]
    cfunc = c.glIsPointInStrokePathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, x, y)

  # Check if the function actually exists
  f = c.glIsPointInStrokePathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetPathLengthNV(path,
                        startSegment,
                        numSegments,
                        path_t=GLuint,
                        startSegment_t=GLsizei,
                        numSegments_t=GLsizei):
    restype = GLfloat
    argtypes = [path_t, startSegment_t, numSegments_t]
    cfunc = c.glGetPathLengthNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, startSegment, numSegments)

  # Check if the function actually exists
  f = c.glGetPathLengthNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPointAlongPathNV(path,
                         startSegment,
                         numSegments,
                         distance,
                         param0,
                         param1,
                         param2,
                         param3,
                         path_t=GLuint,
                         startSegment_t=GLsizei,
                         numSegments_t=GLsizei,
                         distance_t=GLfloat,
                         param0_t=GLfloat,
                         param1_t=GLfloat,
                         param2_t=GLfloat,
                         param3_t=GLfloat):
    restype = GLboolean
    argtypes = [
      path_t, startSegment_t, numSegments_t, distance_t, param0_t, param1_t,
      param2_t, param3_t
    ]
    cfunc = c.glPointAlongPathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, startSegment, numSegments, distance, param0, param1,
                 param2, param3)

  # Check if the function actually exists
  f = c.glPointAlongPathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixLoad3x2fNV(matrixMode,
                         param0,
                         matrixMode_t=GLenum,
                         param0_t=GLfloat):
    restype = None
    argtypes = [matrixMode_t, param0_t]
    cfunc = c.glMatrixLoad3x2fNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(matrixMode, param0)

  # Check if the function actually exists
  f = c.glMatrixLoad3x2fNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixLoad3x3fNV(matrixMode,
                         param0,
                         matrixMode_t=GLenum,
                         param0_t=GLfloat):
    restype = None
    argtypes = [matrixMode_t, param0_t]
    cfunc = c.glMatrixLoad3x3fNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(matrixMode, param0)

  # Check if the function actually exists
  f = c.glMatrixLoad3x3fNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixLoadTranspose3x3fNV(matrixMode,
                                  param0,
                                  matrixMode_t=GLenum,
                                  param0_t=GLfloat):
    restype = None
    argtypes = [matrixMode_t, param0_t]
    cfunc = c.glMatrixLoadTranspose3x3fNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(matrixMode, param0)

  # Check if the function actually exists
  f = c.glMatrixLoadTranspose3x3fNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixMult3x2fNV(matrixMode,
                         param0,
                         matrixMode_t=GLenum,
                         param0_t=GLfloat):
    restype = None
    argtypes = [matrixMode_t, param0_t]
    cfunc = c.glMatrixMult3x2fNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(matrixMode, param0)

  # Check if the function actually exists
  f = c.glMatrixMult3x2fNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixMult3x3fNV(matrixMode,
                         param0,
                         matrixMode_t=GLenum,
                         param0_t=GLfloat):
    restype = None
    argtypes = [matrixMode_t, param0_t]
    cfunc = c.glMatrixMult3x3fNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(matrixMode, param0)

  # Check if the function actually exists
  f = c.glMatrixMult3x3fNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixMultTranspose3x3fNV(matrixMode,
                                  param0,
                                  matrixMode_t=GLenum,
                                  param0_t=GLfloat):
    restype = None
    argtypes = [matrixMode_t, param0_t]
    cfunc = c.glMatrixMultTranspose3x3fNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(matrixMode, param0)

  # Check if the function actually exists
  f = c.glMatrixMultTranspose3x3fNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glStencilThenCoverFillPathNV(path,
                                   fillMode,
                                   mask,
                                   coverMode,
                                   path_t=GLuint,
                                   fillMode_t=GLenum,
                                   mask_t=GLuint,
                                   coverMode_t=GLenum):
    restype = None
    argtypes = [path_t, fillMode_t, mask_t, coverMode_t]
    cfunc = c.glStencilThenCoverFillPathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, fillMode, mask, coverMode)

  # Check if the function actually exists
  f = c.glStencilThenCoverFillPathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glStencilThenCoverStrokePathNV(path,
                                     reference,
                                     mask,
                                     coverMode,
                                     path_t=GLuint,
                                     reference_t=GLint,
                                     mask_t=GLuint,
                                     coverMode_t=GLenum):
    restype = None
    argtypes = [path_t, reference_t, mask_t, coverMode_t]
    cfunc = c.glStencilThenCoverStrokePathNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(path, reference, mask, coverMode)

  # Check if the function actually exists
  f = c.glStencilThenCoverStrokePathNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glStencilThenCoverFillPathInstancedNV(numPaths,
                                            pathNameType,
                                            voidpaths,
                                            pathBase,
                                            fillMode,
                                            mask,
                                            coverMode,
                                            transformType,
                                            param0,
                                            numPaths_t=GLsizei,
                                            pathNameType_t=GLenum,
                                            voidpaths_t=ctypes.c_void_p,
                                            pathBase_t=GLuint,
                                            fillMode_t=GLenum,
                                            mask_t=GLuint,
                                            coverMode_t=GLenum,
                                            transformType_t=GLenum,
                                            param0_t=GLfloat):
    restype = None
    argtypes = [
      numPaths_t, pathNameType_t, voidpaths_t, pathBase_t, fillMode_t, mask_t,
      coverMode_t, transformType_t, param0_t
    ]
    cfunc = c.glStencilThenCoverFillPathInstancedNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(numPaths, pathNameType, voidpaths, pathBase, fillMode, mask,
                 coverMode, transformType, param0)

  # Check if the function actually exists
  f = c.glStencilThenCoverFillPathInstancedNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glStencilThenCoverStrokePathInstancedNV(numPaths,
                                              pathNameType,
                                              voidpaths,
                                              pathBase,
                                              reference,
                                              mask,
                                              coverMode,
                                              transformType,
                                              param0,
                                              numPaths_t=GLsizei,
                                              pathNameType_t=GLenum,
                                              voidpaths_t=ctypes.c_void_p,
                                              pathBase_t=GLuint,
                                              reference_t=GLint,
                                              mask_t=GLuint,
                                              coverMode_t=GLenum,
                                              transformType_t=GLenum,
                                              param0_t=GLfloat):
    restype = None
    argtypes = [
      numPaths_t, pathNameType_t, voidpaths_t, pathBase_t, reference_t, mask_t,
      coverMode_t, transformType_t, param0_t
    ]
    cfunc = c.glStencilThenCoverStrokePathInstancedNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(numPaths, pathNameType, voidpaths, pathBase, reference, mask,
                 coverMode, transformType, param0)

  # Check if the function actually exists
  f = c.glStencilThenCoverStrokePathInstancedNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathGlyphIndexRangeNV(fontTarget,
                              voidfontName,
                              fontStyle,
                              pathParameterTemplate,
                              emScale,
                              param0,
                              fontTarget_t=GLenum,
                              voidfontName_t=ctypes.c_void_p,
                              fontStyle_t=GLbitfield,
                              pathParameterTemplate_t=GLuint,
                              emScale_t=GLfloat,
                              param0_t=GLuint):
    restype = GLenum
    argtypes = [
      fontTarget_t, voidfontName_t, fontStyle_t, pathParameterTemplate_t,
      emScale_t, param0_t
    ]
    cfunc = c.glPathGlyphIndexRangeNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(fontTarget, voidfontName, fontStyle, pathParameterTemplate,
                 emScale, param0)

  # Check if the function actually exists
  f = c.glPathGlyphIndexRangeNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathGlyphIndexArrayNV(firstPathName,
                              fontTarget,
                              voidfontName,
                              fontStyle,
                              firstGlyphIndex,
                              numGlyphs,
                              pathParameterTemplate,
                              emScale,
                              firstPathName_t=GLuint,
                              fontTarget_t=GLenum,
                              voidfontName_t=ctypes.c_void_p,
                              fontStyle_t=GLbitfield,
                              firstGlyphIndex_t=GLuint,
                              numGlyphs_t=GLsizei,
                              pathParameterTemplate_t=GLuint,
                              emScale_t=GLfloat):
    restype = GLenum
    argtypes = [
      firstPathName_t, fontTarget_t, voidfontName_t, fontStyle_t,
      firstGlyphIndex_t, numGlyphs_t, pathParameterTemplate_t, emScale_t
    ]
    cfunc = c.glPathGlyphIndexArrayNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(firstPathName, fontTarget, voidfontName, fontStyle,
                 firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale)

  # Check if the function actually exists
  f = c.glPathGlyphIndexArrayNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPathMemoryGlyphIndexArrayNV(firstPathName,
                                    fontTarget,
                                    fontSize,
                                    voidfontData,
                                    faceIndex,
                                    firstGlyphIndex,
                                    numGlyphs,
                                    pathParameterTemplate,
                                    emScale,
                                    firstPathName_t=GLuint,
                                    fontTarget_t=GLenum,
                                    fontSize_t=GLsizeiptr,
                                    voidfontData_t=ctypes.c_void_p,
                                    faceIndex_t=GLsizei,
                                    firstGlyphIndex_t=GLuint,
                                    numGlyphs_t=GLsizei,
                                    pathParameterTemplate_t=GLuint,
                                    emScale_t=GLfloat):
    restype = GLenum
    argtypes = [
      firstPathName_t, fontTarget_t, fontSize_t, voidfontData_t, faceIndex_t,
      firstGlyphIndex_t, numGlyphs_t, pathParameterTemplate_t, emScale_t
    ]
    cfunc = c.glPathMemoryGlyphIndexArrayNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(firstPathName, fontTarget, fontSize, voidfontData, faceIndex,
                 firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale)

  # Check if the function actually exists
  f = c.glPathMemoryGlyphIndexArrayNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glProgramPathFragmentInputGenNV(program,
                                      location,
                                      genMode,
                                      components,
                                      param0,
                                      program_t=GLuint,
                                      location_t=GLint,
                                      genMode_t=GLenum,
                                      components_t=GLint,
                                      param0_t=GLfloat):
    restype = None
    argtypes = [program_t, location_t, genMode_t, components_t, param0_t]
    cfunc = c.glProgramPathFragmentInputGenNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, location, genMode, components, param0)

  # Check if the function actually exists
  f = c.glProgramPathFragmentInputGenNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetProgramResourcefvNV(program,
                               programInterface,
                               index,
                               propCount,
                               param0,
                               count,
                               param1,
                               param2,
                               program_t=GLuint,
                               programInterface_t=GLenum,
                               index_t=GLuint,
                               propCount_t=GLsizei,
                               param0_t=GLenum,
                               count_t=GLsizei,
                               param1_t=GLsizei,
                               param2_t=GLfloat):
    restype = None
    argtypes = [
      program_t, programInterface_t, index_t, propCount_t, param0_t, count_t,
      param1_t, param2_t
    ]
    cfunc = c.glGetProgramResourcefvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, programInterface, index, propCount, param0, count,
                 param1, param2)

  # Check if the function actually exists
  f = c.glGetProgramResourcefvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixFrustumEXT(mode,
                         left,
                         right,
                         bottom,
                         top,
                         zNear,
                         zFar,
                         mode_t=GLenum,
                         left_t=GLdouble,
                         right_t=GLdouble,
                         bottom_t=GLdouble,
                         top_t=GLdouble,
                         zNear_t=GLdouble,
                         zFar_t=GLdouble):
    restype = None
    argtypes = [mode_t, left_t, right_t, bottom_t, top_t, zNear_t, zFar_t]
    cfunc = c.glMatrixFrustumEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, left, right, bottom, top, zNear, zFar)

  # Check if the function actually exists
  f = c.glMatrixFrustumEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixLoadIdentityEXT(mode, mode_t=GLenum):
    restype = None
    argtypes = [mode_t]
    cfunc = c.glMatrixLoadIdentityEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode)

  # Check if the function actually exists
  f = c.glMatrixLoadIdentityEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixLoadTransposefEXT(mode, param0, mode_t=GLenum, param0_t=GLfloat):
    restype = None
    argtypes = [mode_t, param0_t]
    cfunc = c.glMatrixLoadTransposefEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0)

  # Check if the function actually exists
  f = c.glMatrixLoadTransposefEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixLoadTransposedEXT(mode, param0, mode_t=GLenum,
                                param0_t=GLdouble):
    restype = None
    argtypes = [mode_t, param0_t]
    cfunc = c.glMatrixLoadTransposedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0)

  # Check if the function actually exists
  f = c.glMatrixLoadTransposedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixLoadfEXT(mode, param0, mode_t=GLenum, param0_t=GLfloat):
    restype = None
    argtypes = [mode_t, param0_t]
    cfunc = c.glMatrixLoadfEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0)

  # Check if the function actually exists
  f = c.glMatrixLoadfEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixLoaddEXT(mode, param0, mode_t=GLenum, param0_t=GLdouble):
    restype = None
    argtypes = [mode_t, param0_t]
    cfunc = c.glMatrixLoaddEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0)

  # Check if the function actually exists
  f = c.glMatrixLoaddEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixMultTransposefEXT(mode, param0, mode_t=GLenum, param0_t=GLfloat):
    restype = None
    argtypes = [mode_t, param0_t]
    cfunc = c.glMatrixMultTransposefEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0)

  # Check if the function actually exists
  f = c.glMatrixMultTransposefEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixMultTransposedEXT(mode, param0, mode_t=GLenum,
                                param0_t=GLdouble):
    restype = None
    argtypes = [mode_t, param0_t]
    cfunc = c.glMatrixMultTransposedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0)

  # Check if the function actually exists
  f = c.glMatrixMultTransposedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixMultfEXT(mode, param0, mode_t=GLenum, param0_t=GLfloat):
    restype = None
    argtypes = [mode_t, param0_t]
    cfunc = c.glMatrixMultfEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0)

  # Check if the function actually exists
  f = c.glMatrixMultfEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixMultdEXT(mode, param0, mode_t=GLenum, param0_t=GLdouble):
    restype = None
    argtypes = [mode_t, param0_t]
    cfunc = c.glMatrixMultdEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, param0)

  # Check if the function actually exists
  f = c.glMatrixMultdEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixOrthoEXT(mode,
                       left,
                       right,
                       bottom,
                       top,
                       zNear,
                       zFar,
                       mode_t=GLenum,
                       left_t=GLdouble,
                       right_t=GLdouble,
                       bottom_t=GLdouble,
                       top_t=GLdouble,
                       zNear_t=GLdouble,
                       zFar_t=GLdouble):
    restype = None
    argtypes = [mode_t, left_t, right_t, bottom_t, top_t, zNear_t, zFar_t]
    cfunc = c.glMatrixOrthoEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, left, right, bottom, top, zNear, zFar)

  # Check if the function actually exists
  f = c.glMatrixOrthoEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixPopEXT(mode, mode_t=GLenum):
    restype = None
    argtypes = [mode_t]
    cfunc = c.glMatrixPopEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode)

  # Check if the function actually exists
  f = c.glMatrixPopEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixPushEXT(mode, mode_t=GLenum):
    restype = None
    argtypes = [mode_t]
    cfunc = c.glMatrixPushEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode)

  # Check if the function actually exists
  f = c.glMatrixPushEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixRotatefEXT(mode,
                         angle,
                         x,
                         y,
                         z,
                         mode_t=GLenum,
                         angle_t=GLfloat,
                         x_t=GLfloat,
                         y_t=GLfloat,
                         z_t=GLfloat):
    restype = None
    argtypes = [mode_t, angle_t, x_t, y_t, z_t]
    cfunc = c.glMatrixRotatefEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, angle, x, y, z)

  # Check if the function actually exists
  f = c.glMatrixRotatefEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixRotatedEXT(mode,
                         angle,
                         x,
                         y,
                         z,
                         mode_t=GLenum,
                         angle_t=GLdouble,
                         x_t=GLdouble,
                         y_t=GLdouble,
                         z_t=GLdouble):
    restype = None
    argtypes = [mode_t, angle_t, x_t, y_t, z_t]
    cfunc = c.glMatrixRotatedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, angle, x, y, z)

  # Check if the function actually exists
  f = c.glMatrixRotatedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixScalefEXT(mode,
                        x,
                        y,
                        z,
                        mode_t=GLenum,
                        x_t=GLfloat,
                        y_t=GLfloat,
                        z_t=GLfloat):
    restype = None
    argtypes = [mode_t, x_t, y_t, z_t]
    cfunc = c.glMatrixScalefEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, x, y, z)

  # Check if the function actually exists
  f = c.glMatrixScalefEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixScaledEXT(mode,
                        x,
                        y,
                        z,
                        mode_t=GLenum,
                        x_t=GLdouble,
                        y_t=GLdouble,
                        z_t=GLdouble):
    restype = None
    argtypes = [mode_t, x_t, y_t, z_t]
    cfunc = c.glMatrixScaledEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, x, y, z)

  # Check if the function actually exists
  f = c.glMatrixScaledEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixTranslatefEXT(mode,
                            x,
                            y,
                            z,
                            mode_t=GLenum,
                            x_t=GLfloat,
                            y_t=GLfloat,
                            z_t=GLfloat):
    restype = None
    argtypes = [mode_t, x_t, y_t, z_t]
    cfunc = c.glMatrixTranslatefEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, x, y, z)

  # Check if the function actually exists
  f = c.glMatrixTranslatefEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glMatrixTranslatedEXT(mode,
                            x,
                            y,
                            z,
                            mode_t=GLenum,
                            x_t=GLdouble,
                            y_t=GLdouble,
                            z_t=GLdouble):
    restype = None
    argtypes = [mode_t, x_t, y_t, z_t]
    cfunc = c.glMatrixTranslatedEXT
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode, x, y, z)

  # Check if the function actually exists
  f = c.glMatrixTranslatedEXT
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glPolygonModeNV(face, mode, face_t=GLenum, mode_t=GLenum):
    restype = None
    argtypes = [face_t, mode_t]
    cfunc = c.glPolygonModeNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(face, mode)

  # Check if the function actually exists
  f = c.glPolygonModeNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glReadBufferNV(mode, mode_t=GLenum):
    restype = None
    argtypes = [mode_t]
    cfunc = c.glReadBufferNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(mode)

  # Check if the function actually exists
  f = c.glReadBufferNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferSampleLocationsfvNV(target,
                                       start,
                                       count,
                                       param0,
                                       target_t=GLenum,
                                       start_t=GLuint,
                                       count_t=GLsizei,
                                       param0_t=GLfloat):
    restype = None
    argtypes = [target_t, start_t, count_t, param0_t]
    cfunc = c.glFramebufferSampleLocationsfvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, start, count, param0)

  # Check if the function actually exists
  f = c.glFramebufferSampleLocationsfvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glNamedFramebufferSampleLocationsfvNV(framebuffer,
                                            start,
                                            count,
                                            param0,
                                            framebuffer_t=GLuint,
                                            start_t=GLuint,
                                            count_t=GLsizei,
                                            param0_t=GLfloat):
    restype = None
    argtypes = [framebuffer_t, start_t, count_t, param0_t]
    cfunc = c.glNamedFramebufferSampleLocationsfvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(framebuffer, start, count, param0)

  # Check if the function actually exists
  f = c.glNamedFramebufferSampleLocationsfvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glResolveDepthValuesNV(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glResolveDepthValuesNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glResolveDepthValuesNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glScissorExclusiveNV(x,
                           y,
                           width,
                           height,
                           x_t=GLint,
                           y_t=GLint,
                           width_t=GLsizei,
                           height_t=GLsizei):
    restype = None
    argtypes = [x_t, y_t, width_t, height_t]
    cfunc = c.glScissorExclusiveNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(x, y, width, height)

  # Check if the function actually exists
  f = c.glScissorExclusiveNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glScissorExclusiveArrayvNV(first,
                                 count,
                                 param0,
                                 first_t=GLuint,
                                 count_t=GLsizei,
                                 param0_t=GLint):
    restype = None
    argtypes = [first_t, count_t, param0_t]
    cfunc = c.glScissorExclusiveArrayvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(first, count, param0)

  # Check if the function actually exists
  f = c.glScissorExclusiveArrayvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glBindShadingRateImageNV(texture, texture_t=GLuint):
    restype = None
    argtypes = [texture_t]
    cfunc = c.glBindShadingRateImageNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture)

  # Check if the function actually exists
  f = c.glBindShadingRateImageNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetShadingRateImagePaletteNV(viewport,
                                     entry,
                                     param0,
                                     viewport_t=GLuint,
                                     entry_t=GLuint,
                                     param0_t=GLenum):
    restype = None
    argtypes = [viewport_t, entry_t, param0_t]
    cfunc = c.glGetShadingRateImagePaletteNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(viewport, entry, param0)

  # Check if the function actually exists
  f = c.glGetShadingRateImagePaletteNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetShadingRateSampleLocationivNV(rate,
                                         samples,
                                         index,
                                         param0,
                                         rate_t=GLenum,
                                         samples_t=GLuint,
                                         index_t=GLuint,
                                         param0_t=GLint):
    restype = None
    argtypes = [rate_t, samples_t, index_t, param0_t]
    cfunc = c.glGetShadingRateSampleLocationivNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(rate, samples, index, param0)

  # Check if the function actually exists
  f = c.glGetShadingRateSampleLocationivNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glShadingRateImagePaletteNV(viewport,
                                  first,
                                  count,
                                  param0,
                                  viewport_t=GLuint,
                                  first_t=GLuint,
                                  count_t=GLsizei,
                                  param0_t=GLenum):
    restype = None
    argtypes = [viewport_t, first_t, count_t, param0_t]
    cfunc = c.glShadingRateImagePaletteNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(viewport, first, count, param0)

  # Check if the function actually exists
  f = c.glShadingRateImagePaletteNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glShadingRateSampleOrderNV(order, order_t=GLenum):
    restype = None
    argtypes = [order_t]
    cfunc = c.glShadingRateSampleOrderNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(order)

  # Check if the function actually exists
  f = c.glShadingRateSampleOrderNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glShadingRateSampleOrderCustomNV(rate,
                                       samples,
                                       param0,
                                       rate_t=GLenum,
                                       samples_t=GLuint,
                                       param0_t=GLint):
    restype = None
    argtypes = [rate_t, samples_t, param0_t]
    cfunc = c.glShadingRateSampleOrderCustomNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(rate, samples, param0)

  # Check if the function actually exists
  f = c.glShadingRateSampleOrderCustomNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glCreateSemaphoresNV(n, param0, n_t=GLsizei, param0_t=GLuint):
    restype = None
    argtypes = [n_t, param0_t]
    cfunc = c.glCreateSemaphoresNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(n, param0)

  # Check if the function actually exists
  f = c.glCreateSemaphoresNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glSemaphoreParameterivNV(semaphore,
                               pname,
                               param0,
                               semaphore_t=GLuint,
                               pname_t=GLenum,
                               param0_t=GLint):
    restype = None
    argtypes = [semaphore_t, pname_t, param0_t]
    cfunc = c.glSemaphoreParameterivNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore, pname, param0)

  # Check if the function actually exists
  f = c.glSemaphoreParameterivNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetSemaphoreParameterivNV(semaphore,
                                  pname,
                                  param0,
                                  semaphore_t=GLuint,
                                  pname_t=GLenum,
                                  param0_t=GLint):
    restype = None
    argtypes = [semaphore_t, pname_t, param0_t]
    cfunc = c.glGetSemaphoreParameterivNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(semaphore, pname, param0)

  # Check if the function actually exists
  f = c.glGetSemaphoreParameterivNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glViewportArrayvNV(first,
                         count,
                         param0,
                         first_t=GLuint,
                         count_t=GLsizei,
                         param0_t=GLfloat):
    restype = None
    argtypes = [first_t, count_t, param0_t]
    cfunc = c.glViewportArrayvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(first, count, param0)

  # Check if the function actually exists
  f = c.glViewportArrayvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glViewportIndexedfNV(index,
                           x,
                           y,
                           w,
                           h,
                           index_t=GLuint,
                           x_t=GLfloat,
                           y_t=GLfloat,
                           w_t=GLfloat,
                           h_t=GLfloat):
    restype = None
    argtypes = [index_t, x_t, y_t, w_t, h_t]
    cfunc = c.glViewportIndexedfNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, x, y, w, h)

  # Check if the function actually exists
  f = c.glViewportIndexedfNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glViewportIndexedfvNV(index, param0, index_t=GLuint, param0_t=GLfloat):
    restype = None
    argtypes = [index_t, param0_t]
    cfunc = c.glViewportIndexedfvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, param0)

  # Check if the function actually exists
  f = c.glViewportIndexedfvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glScissorArrayvNV(first,
                        count,
                        param0,
                        first_t=GLuint,
                        count_t=GLsizei,
                        param0_t=GLint):
    restype = None
    argtypes = [first_t, count_t, param0_t]
    cfunc = c.glScissorArrayvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(first, count, param0)

  # Check if the function actually exists
  f = c.glScissorArrayvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glScissorIndexedNV(index,
                         left,
                         bottom,
                         width,
                         height,
                         index_t=GLuint,
                         left_t=GLint,
                         bottom_t=GLint,
                         width_t=GLsizei,
                         height_t=GLsizei):
    restype = None
    argtypes = [index_t, left_t, bottom_t, width_t, height_t]
    cfunc = c.glScissorIndexedNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, left, bottom, width, height)

  # Check if the function actually exists
  f = c.glScissorIndexedNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glScissorIndexedvNV(index, param0, index_t=GLuint, param0_t=GLint):
    restype = None
    argtypes = [index_t, param0_t]
    cfunc = c.glScissorIndexedvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, param0)

  # Check if the function actually exists
  f = c.glScissorIndexedvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDepthRangeArrayfvNV(first,
                            count,
                            param0,
                            first_t=GLuint,
                            count_t=GLsizei,
                            param0_t=GLfloat):
    restype = None
    argtypes = [first_t, count_t, param0_t]
    cfunc = c.glDepthRangeArrayfvNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(first, count, param0)

  # Check if the function actually exists
  f = c.glDepthRangeArrayfvNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDepthRangeIndexedfNV(index,
                             n,
                             f,
                             index_t=GLuint,
                             n_t=GLfloat,
                             f_t=GLfloat):
    restype = None
    argtypes = [index_t, n_t, f_t]
    cfunc = c.glDepthRangeIndexedfNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, n, f)

  # Check if the function actually exists
  f = c.glDepthRangeIndexedfNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetFloati_vNV(target,
                      index,
                      param0,
                      target_t=GLenum,
                      index_t=GLuint,
                      param0_t=GLfloat):
    restype = None
    argtypes = [target_t, index_t, param0_t]
    cfunc = c.glGetFloati_vNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index, param0)

  # Check if the function actually exists
  f = c.glGetFloati_vNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEnableiNV(target, index, target_t=GLenum, index_t=GLuint):
    restype = None
    argtypes = [target_t, index_t]
    cfunc = c.glEnableiNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index)

  # Check if the function actually exists
  f = c.glEnableiNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDisableiNV(target, index, target_t=GLenum, index_t=GLuint):
    restype = None
    argtypes = [target_t, index_t]
    cfunc = c.glDisableiNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index)

  # Check if the function actually exists
  f = c.glDisableiNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glIsEnablediNV(target, index, target_t=GLenum, index_t=GLuint):
    restype = GLboolean
    argtypes = [target_t, index_t]
    cfunc = c.glIsEnablediNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, index)

  # Check if the function actually exists
  f = c.glIsEnablediNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glViewportSwizzleNV(index,
                          swizzlex,
                          swizzley,
                          swizzlez,
                          swizzlew,
                          index_t=GLuint,
                          swizzlex_t=GLenum,
                          swizzley_t=GLenum,
                          swizzlez_t=GLenum,
                          swizzlew_t=GLenum):
    restype = None
    argtypes = [index_t, swizzlex_t, swizzley_t, swizzlez_t, swizzlew_t]
    cfunc = c.glViewportSwizzleNV
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(index, swizzlex, swizzley, swizzlez, swizzlew)

  # Check if the function actually exists
  f = c.glViewportSwizzleNV
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferTextureMultiviewOVR(target,
                                       attachment,
                                       texture,
                                       level,
                                       baseViewIndex,
                                       numViews,
                                       target_t=GLenum,
                                       attachment_t=GLenum,
                                       texture_t=GLuint,
                                       level_t=GLint,
                                       baseViewIndex_t=GLint,
                                       numViews_t=GLsizei):
    restype = None
    argtypes = [
      target_t, attachment_t, texture_t, level_t, baseViewIndex_t, numViews_t
    ]
    cfunc = c.glFramebufferTextureMultiviewOVR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, attachment, texture, level, baseViewIndex, numViews)

  # Check if the function actually exists
  f = c.glFramebufferTextureMultiviewOVR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferTextureMultisampleMultiviewOVR(target,
                                                  attachment,
                                                  texture,
                                                  level,
                                                  samples,
                                                  baseViewIndex,
                                                  numViews,
                                                  target_t=GLenum,
                                                  attachment_t=GLenum,
                                                  texture_t=GLuint,
                                                  level_t=GLint,
                                                  samples_t=GLsizei,
                                                  baseViewIndex_t=GLint,
                                                  numViews_t=GLsizei):
    restype = None
    argtypes = [
      target_t, attachment_t, texture_t, level_t, samples_t, baseViewIndex_t,
      numViews_t
    ]
    cfunc = c.glFramebufferTextureMultisampleMultiviewOVR
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, attachment, texture, level, samples, baseViewIndex,
                 numViews)

  # Check if the function actually exists
  f = c.glFramebufferTextureMultisampleMultiviewOVR
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glAlphaFuncQCOM(func, ref, func_t=GLenum, ref_t=GLclampf):
    restype = None
    argtypes = [func_t, ref_t]
    cfunc = c.glAlphaFuncQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(func, ref)

  # Check if the function actually exists
  f = c.glAlphaFuncQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetDriverControlsQCOM(param0,
                              size,
                              param1,
                              param0_t=GLint,
                              size_t=GLsizei,
                              param1_t=GLuint):
    restype = None
    argtypes = [param0_t, size_t, param1_t]
    cfunc = c.glGetDriverControlsQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0, size, param1)

  # Check if the function actually exists
  f = c.glGetDriverControlsQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glGetDriverControlStringQCOM(driverControl,
                                   bufSize,
                                   param0,
                                   param1,
                                   driverControl_t=GLuint,
                                   bufSize_t=GLsizei,
                                   param0_t=GLsizei,
                                   param1_t=GLchar):
    restype = None
    argtypes = [driverControl_t, bufSize_t, param0_t, param1_t]
    cfunc = c.glGetDriverControlStringQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(driverControl, bufSize, param0, param1)

  # Check if the function actually exists
  f = c.glGetDriverControlStringQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEnableDriverControlQCOM(driverControl, driverControl_t=GLuint):
    restype = None
    argtypes = [driverControl_t]
    cfunc = c.glEnableDriverControlQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(driverControl)

  # Check if the function actually exists
  f = c.glEnableDriverControlQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glDisableDriverControlQCOM(driverControl, driverControl_t=GLuint):
    restype = None
    argtypes = [driverControl_t]
    cfunc = c.glDisableDriverControlQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(driverControl)

  # Check if the function actually exists
  f = c.glDisableDriverControlQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetTexturesQCOM(param0,
                           maxTextures,
                           param1,
                           param0_t=GLuint,
                           maxTextures_t=GLint,
                           param1_t=GLint):
    restype = None
    argtypes = [param0_t, maxTextures_t, param1_t]
    cfunc = c.glExtGetTexturesQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0, maxTextures, param1)

  # Check if the function actually exists
  f = c.glExtGetTexturesQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetBuffersQCOM(param0,
                          maxBuffers,
                          param1,
                          param0_t=GLuint,
                          maxBuffers_t=GLint,
                          param1_t=GLint):
    restype = None
    argtypes = [param0_t, maxBuffers_t, param1_t]
    cfunc = c.glExtGetBuffersQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0, maxBuffers, param1)

  # Check if the function actually exists
  f = c.glExtGetBuffersQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetRenderbuffersQCOM(param0,
                                maxRenderbuffers,
                                param1,
                                param0_t=GLuint,
                                maxRenderbuffers_t=GLint,
                                param1_t=GLint):
    restype = None
    argtypes = [param0_t, maxRenderbuffers_t, param1_t]
    cfunc = c.glExtGetRenderbuffersQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0, maxRenderbuffers, param1)

  # Check if the function actually exists
  f = c.glExtGetRenderbuffersQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetFramebuffersQCOM(param0,
                               maxFramebuffers,
                               param1,
                               param0_t=GLuint,
                               maxFramebuffers_t=GLint,
                               param1_t=GLint):
    restype = None
    argtypes = [param0_t, maxFramebuffers_t, param1_t]
    cfunc = c.glExtGetFramebuffersQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0, maxFramebuffers, param1)

  # Check if the function actually exists
  f = c.glExtGetFramebuffersQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetTexLevelParameterivQCOM(texture,
                                      face,
                                      level,
                                      pname,
                                      param0,
                                      texture_t=GLuint,
                                      face_t=GLenum,
                                      level_t=GLint,
                                      pname_t=GLenum,
                                      param0_t=GLint):
    restype = None
    argtypes = [texture_t, face_t, level_t, pname_t, param0_t]
    cfunc = c.glExtGetTexLevelParameterivQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, face, level, pname, param0)

  # Check if the function actually exists
  f = c.glExtGetTexLevelParameterivQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtTexObjectStateOverrideiQCOM(target,
                                       pname,
                                       param,
                                       target_t=GLenum,
                                       pname_t=GLenum,
                                       param_t=GLint):
    restype = None
    argtypes = [target_t, pname_t, param_t]
    cfunc = c.glExtTexObjectStateOverrideiQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, pname, param)

  # Check if the function actually exists
  f = c.glExtTexObjectStateOverrideiQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetTexSubImageQCOM(target,
                              level,
                              xoffset,
                              yoffset,
                              zoffset,
                              width,
                              height,
                              depth,
                              format,
                              type,
                              voidtexels,
                              target_t=GLenum,
                              level_t=GLint,
                              xoffset_t=GLint,
                              yoffset_t=GLint,
                              zoffset_t=GLint,
                              width_t=GLsizei,
                              height_t=GLsizei,
                              depth_t=GLsizei,
                              format_t=GLenum,
                              type_t=GLenum,
                              voidtexels_t=ctypes.c_void_p):
    restype = None
    argtypes = [
      target_t, level_t, xoffset_t, yoffset_t, zoffset_t, width_t, height_t,
      depth_t, format_t, type_t, voidtexels_t
    ]
    cfunc = c.glExtGetTexSubImageQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, level, xoffset, yoffset, zoffset, width, height,
                 depth, format, type, voidtexels)

  # Check if the function actually exists
  f = c.glExtGetTexSubImageQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetBufferPointervQCOM(target,
                                 voidparams,
                                 target_t=GLenum,
                                 voidparams_t=ctypes.c_void_p):
    restype = None
    argtypes = [target_t, voidparams_t]
    cfunc = c.glExtGetBufferPointervQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(target, voidparams)

  # Check if the function actually exists
  f = c.glExtGetBufferPointervQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetShadersQCOM(param0,
                          maxShaders,
                          param1,
                          param0_t=GLuint,
                          maxShaders_t=GLint,
                          param1_t=GLint):
    restype = None
    argtypes = [param0_t, maxShaders_t, param1_t]
    cfunc = c.glExtGetShadersQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0, maxShaders, param1)

  # Check if the function actually exists
  f = c.glExtGetShadersQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetProgramsQCOM(param0,
                           maxPrograms,
                           param1,
                           param0_t=GLuint,
                           maxPrograms_t=GLint,
                           param1_t=GLint):
    restype = None
    argtypes = [param0_t, maxPrograms_t, param1_t]
    cfunc = c.glExtGetProgramsQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(param0, maxPrograms, param1)

  # Check if the function actually exists
  f = c.glExtGetProgramsQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtIsProgramBinaryQCOM(program, program_t=GLuint):
    restype = GLboolean
    argtypes = [program_t]
    cfunc = c.glExtIsProgramBinaryQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program)

  # Check if the function actually exists
  f = c.glExtIsProgramBinaryQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtGetProgramBinarySourceQCOM(program,
                                      shadertype,
                                      param0,
                                      param1,
                                      program_t=GLuint,
                                      shadertype_t=GLenum,
                                      param0_t=GLchar,
                                      param1_t=GLint):
    restype = None
    argtypes = [program_t, shadertype_t, param0_t, param1_t]
    cfunc = c.glExtGetProgramBinarySourceQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(program, shadertype, param0, param1)

  # Check if the function actually exists
  f = c.glExtGetProgramBinarySourceQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glExtrapolateTex2DQCOM(src1,
                             src2,
                             output,
                             scaleFactor,
                             src1_t=GLuint,
                             src2_t=GLuint,
                             output_t=GLuint,
                             scaleFactor_t=GLfloat):
    restype = None
    argtypes = [src1_t, src2_t, output_t, scaleFactor_t]
    cfunc = c.glExtrapolateTex2DQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(src1, src2, output, scaleFactor)

  # Check if the function actually exists
  f = c.glExtrapolateTex2DQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferFoveationConfigQCOM(framebuffer,
                                       numLayers,
                                       focalPointsPerLayer,
                                       requestedFeatures,
                                       param0,
                                       framebuffer_t=GLuint,
                                       numLayers_t=GLuint,
                                       focalPointsPerLayer_t=GLuint,
                                       requestedFeatures_t=GLuint,
                                       param0_t=GLuint):
    restype = None
    argtypes = [
      framebuffer_t, numLayers_t, focalPointsPerLayer_t, requestedFeatures_t,
      param0_t
    ]
    cfunc = c.glFramebufferFoveationConfigQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(framebuffer, numLayers, focalPointsPerLayer,
                 requestedFeatures, param0)

  # Check if the function actually exists
  f = c.glFramebufferFoveationConfigQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferFoveationParametersQCOM(framebuffer,
                                           layer,
                                           focalPoint,
                                           focalX,
                                           focalY,
                                           gainX,
                                           gainY,
                                           foveaArea,
                                           framebuffer_t=GLuint,
                                           layer_t=GLuint,
                                           focalPoint_t=GLuint,
                                           focalX_t=GLfloat,
                                           focalY_t=GLfloat,
                                           gainX_t=GLfloat,
                                           gainY_t=GLfloat,
                                           foveaArea_t=GLfloat):
    restype = None
    argtypes = [
      framebuffer_t, layer_t, focalPoint_t, focalX_t, focalY_t, gainX_t,
      gainY_t, foveaArea_t
    ]
    cfunc = c.glFramebufferFoveationParametersQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY,
                 foveaArea)

  # Check if the function actually exists
  f = c.glFramebufferFoveationParametersQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexEstimateMotionQCOM(ref,
                              target,
                              output,
                              ref_t=GLuint,
                              target_t=GLuint,
                              output_t=GLuint):
    restype = None
    argtypes = [ref_t, target_t, output_t]
    cfunc = c.glTexEstimateMotionQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(ref, target, output)

  # Check if the function actually exists
  f = c.glTexEstimateMotionQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTexEstimateMotionRegionsQCOM(ref,
                                     target,
                                     output,
                                     mask,
                                     ref_t=GLuint,
                                     target_t=GLuint,
                                     output_t=GLuint,
                                     mask_t=GLuint):
    restype = None
    argtypes = [ref_t, target_t, output_t, mask_t]
    cfunc = c.glTexEstimateMotionRegionsQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(ref, target, output, mask)

  # Check if the function actually exists
  f = c.glTexEstimateMotionRegionsQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glFramebufferFetchBarrierQCOM(void, void_t=ctypes.c_void_p):
    restype = None
    argtypes = [void_t]
    cfunc = c.glFramebufferFetchBarrierQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(void)

  # Check if the function actually exists
  f = c.glFramebufferFetchBarrierQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glShadingRateQCOM(rate, rate_t=GLenum):
    restype = None
    argtypes = [rate_t]
    cfunc = c.glShadingRateQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(rate)

  # Check if the function actually exists
  f = c.glShadingRateQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glTextureFoveationParametersQCOM(texture,
                                       layer,
                                       focalPoint,
                                       focalX,
                                       focalY,
                                       gainX,
                                       gainY,
                                       foveaArea,
                                       texture_t=GLuint,
                                       layer_t=GLuint,
                                       focalPoint_t=GLuint,
                                       focalX_t=GLfloat,
                                       focalY_t=GLfloat,
                                       gainX_t=GLfloat,
                                       gainY_t=GLfloat,
                                       foveaArea_t=GLfloat):
    restype = None
    argtypes = [
      texture_t, layer_t, focalPoint_t, focalX_t, focalY_t, gainX_t, gainY_t,
      foveaArea_t
    ]
    cfunc = c.glTextureFoveationParametersQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(texture, layer, focalPoint, focalX, focalY, gainX, gainY,
                 foveaArea)

  # Check if the function actually exists
  f = c.glTextureFoveationParametersQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glStartTilingQCOM(x,
                        y,
                        width,
                        height,
                        preserveMask,
                        x_t=GLuint,
                        y_t=GLuint,
                        width_t=GLuint,
                        height_t=GLuint,
                        preserveMask_t=GLbitfield):
    restype = None
    argtypes = [x_t, y_t, width_t, height_t, preserveMask_t]
    cfunc = c.glStartTilingQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(x, y, width, height, preserveMask)

  # Check if the function actually exists
  f = c.glStartTilingQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

try:

  def glEndTilingQCOM(preserveMask, preserveMask_t=GLbitfield):
    restype = None
    argtypes = [preserveMask_t]
    cfunc = c.glEndTilingQCOM
    cfunc.restype = restype
    cfunc.argtypes = argtypes
    return cfunc(preserveMask)

  # Check if the function actually exists
  f = c.glEndTilingQCOM
  del f
  loaded[0] += 1
except AttributeError as e:
  loaded[1] += 1
  if DEBUG > 0:
    print('could not load the function')
    print(e)

print(
  'Loaded %i functions and failed to load %i functions of %i functions in the header gl2ext.h'
  % (loaded[0], loaded[1], sum(loaded)))

__all__ = [
  'glBlendBarrierKHR', 'glDebugMessageControlKHR', 'glDebugMessageInsertKHR',
  'glDebugMessageCallbackKHR', 'glGetDebugMessageLogKHR',
  'glPushDebugGroupKHR', 'glPopDebugGroupKHR', 'glObjectLabelKHR',
  'glGetObjectLabelKHR', 'glObjectPtrLabelKHR', 'glGetObjectPtrLabelKHR',
  'glGetPointervKHR', 'glMaxShaderCompilerThreadsKHR',
  'glGetGraphicsResetStatusKHR', 'glReadnPixelsKHR', 'glGetnUniformfvKHR',
  'glGetnUniformivKHR', 'glGetnUniformuivKHR', 'glEGLImageTargetTexture2DOES',
  'glEGLImageTargetRenderbufferStorageOES', 'glCopyImageSubDataOES',
  'glEnableiOES', 'glDisableiOES', 'glBlendEquationiOES',
  'glBlendEquationSeparateiOES', 'glBlendFunciOES', 'glBlendFuncSeparateiOES',
  'glColorMaskiOES', 'glIsEnablediOES', 'glDrawElementsBaseVertexOES',
  'glDrawRangeElementsBaseVertexOES', 'glDrawElementsInstancedBaseVertexOES',
  'glMultiDrawElementsBaseVertexEXT', 'glFramebufferTextureOES',
  'glGetProgramBinaryOES', 'glProgramBinaryOES', 'glUnmapBufferOES',
  'glGetBufferPointervOES', 'glPrimitiveBoundingBoxOES',
  'glMinSampleShadingOES', 'glPatchParameteriOES', 'glTexImage3DOES',
  'glTexSubImage3DOES', 'glCopyTexSubImage3DOES', 'glCompressedTexImage3DOES',
  'glCompressedTexSubImage3DOES', 'glFramebufferTexture3DOES',
  'glTexParameterIivOES', 'glTexParameterIuivOES', 'glGetTexParameterIivOES',
  'glGetTexParameterIuivOES', 'glSamplerParameterIivOES',
  'glSamplerParameterIuivOES', 'glGetSamplerParameterIivOES',
  'glGetSamplerParameterIuivOES', 'glTexBufferOES', 'glTexBufferRangeOES',
  'glTexStorage3DMultisampleOES', 'glTextureViewOES', 'glBindVertexArrayOES',
  'glDeleteVertexArraysOES', 'glGenVertexArraysOES', 'glIsVertexArrayOES',
  'glViewportArrayvOES', 'glViewportIndexedfOES', 'glViewportIndexedfvOES',
  'glScissorArrayvOES', 'glScissorIndexedOES', 'glScissorIndexedvOES',
  'glDepthRangeArrayfvOES', 'glDepthRangeIndexedfOES', 'glGetFloati_vOES',
  'glRenderbufferStorageMultisampleAdvancedAMD',
  'glNamedRenderbufferStorageMultisampleAdvancedAMD',
  'glGetPerfMonitorGroupsAMD', 'glGetPerfMonitorCountersAMD',
  'glGetPerfMonitorGroupStringAMD', 'glGetPerfMonitorCounterStringAMD',
  'glGetPerfMonitorCounterInfoAMD', 'glGenPerfMonitorsAMD',
  'glDeletePerfMonitorsAMD', 'glSelectPerfMonitorCountersAMD',
  'glBeginPerfMonitorAMD', 'glEndPerfMonitorAMD',
  'glGetPerfMonitorCounterDataAMD', 'glBlitFramebufferANGLE',
  'glRenderbufferStorageMultisampleANGLE', 'glDrawArraysInstancedANGLE',
  'glDrawElementsInstancedANGLE', 'glVertexAttribDivisorANGLE',
  'glGetTranslatedShaderSourceANGLE', 'glCopyTextureLevelsAPPLE',
  'glRenderbufferStorageMultisampleAPPLE',
  'glResolveMultisampleFramebufferAPPLE', 'glGetInteger64vAPPLE',
  'glEGLImageTargetTexStorageEXT', 'glEGLImageTargetTextureStorageEXT',
  'glDrawArraysInstancedBaseInstanceEXT',
  'glDrawElementsInstancedBaseInstanceEXT',
  'glDrawElementsInstancedBaseVertexBaseInstanceEXT',
  'glBindFragDataLocationIndexedEXT', 'glBindFragDataLocationEXT',
  'glGetProgramResourceLocationIndexEXT', 'glGetFragDataIndexEXT',
  'glBufferStorageEXT', 'glClearTexImageEXT', 'glClearTexSubImageEXT',
  'glClipControlEXT', 'glCopyImageSubDataEXT', 'glLabelObjectEXT',
  'glGetObjectLabelEXT', 'glInsertEventMarkerEXT', 'glPushGroupMarkerEXT',
  'glPopGroupMarkerEXT', 'glDiscardFramebufferEXT', 'glGenQueriesEXT',
  'glDeleteQueriesEXT', 'glIsQueryEXT', 'glBeginQueryEXT', 'glEndQueryEXT',
  'glQueryCounterEXT', 'glGetQueryivEXT', 'glGetQueryObjectivEXT',
  'glGetQueryObjectuivEXT', 'glGetQueryObjecti64vEXT',
  'glGetQueryObjectui64vEXT', 'glGetInteger64vEXT', 'glDrawBuffersEXT',
  'glEnableiEXT', 'glDisableiEXT', 'glBlendEquationiEXT',
  'glBlendEquationSeparateiEXT', 'glBlendFunciEXT', 'glBlendFuncSeparateiEXT',
  'glColorMaskiEXT', 'glIsEnablediEXT', 'glDrawElementsBaseVertexEXT',
  'glDrawRangeElementsBaseVertexEXT', 'glDrawElementsInstancedBaseVertexEXT',
  'glDrawArraysInstancedEXT', 'glDrawElementsInstancedEXT',
  'glDrawTransformFeedbackEXT', 'glDrawTransformFeedbackInstancedEXT',
  'glBufferStorageExternalEXT', 'glNamedBufferStorageExternalEXT',
  'glFramebufferTextureEXT', 'glVertexAttribDivisorEXT',
  'glFlushMappedBufferRangeEXT', 'glGetUnsignedBytevEXT',
  'glGetUnsignedBytei_vEXT', 'glDeleteMemoryObjectsEXT', 'glIsMemoryObjectEXT',
  'glCreateMemoryObjectsEXT', 'glMemoryObjectParameterivEXT',
  'glGetMemoryObjectParameterivEXT', 'glTexStorageMem2DEXT',
  'glTexStorageMem2DMultisampleEXT', 'glTexStorageMem3DEXT',
  'glTexStorageMem3DMultisampleEXT', 'glBufferStorageMemEXT',
  'glTextureStorageMem2DEXT', 'glTextureStorageMem2DMultisampleEXT',
  'glTextureStorageMem3DEXT', 'glTextureStorageMem3DMultisampleEXT',
  'glNamedBufferStorageMemEXT', 'glImportMemoryFdEXT',
  'glImportMemoryWin32HandleEXT', 'glImportMemoryWin32NameEXT',
  'glMultiDrawArraysEXT', 'glMultiDrawElementsEXT',
  'glMultiDrawArraysIndirectEXT', 'glMultiDrawElementsIndirectEXT',
  'glRenderbufferStorageMultisampleEXT',
  'glFramebufferTexture2DMultisampleEXT', 'glReadBufferIndexedEXT',
  'glDrawBuffersIndexedEXT', 'glGetIntegeri_vEXT', 'glPolygonOffsetClampEXT',
  'glPrimitiveBoundingBoxEXT', 'glRasterSamplesEXT',
  'glGetGraphicsResetStatusEXT', 'glReadnPixelsEXT', 'glGetnUniformfvEXT',
  'glGetnUniformivEXT', 'glGenSemaphoresEXT', 'glDeleteSemaphoresEXT',
  'glIsSemaphoreEXT', 'glSemaphoreParameterui64vEXT',
  'glGetSemaphoreParameterui64vEXT', 'glWaitSemaphoreEXT',
  'glSignalSemaphoreEXT', 'glImportSemaphoreFdEXT',
  'glImportSemaphoreWin32HandleEXT', 'glImportSemaphoreWin32NameEXT',
  'glActiveShaderProgramEXT', 'glBindProgramPipelineEXT',
  'glCreateShaderProgramvEXT', 'glDeleteProgramPipelinesEXT',
  'glGenProgramPipelinesEXT', 'glGetProgramPipelineInfoLogEXT',
  'glGetProgramPipelineivEXT', 'glIsProgramPipelineEXT',
  'glProgramParameteriEXT', 'glProgramUniform1fEXT', 'glProgramUniform1fvEXT',
  'glProgramUniform1iEXT', 'glProgramUniform1ivEXT', 'glProgramUniform2fEXT',
  'glProgramUniform2fvEXT', 'glProgramUniform2iEXT', 'glProgramUniform2ivEXT',
  'glProgramUniform3fEXT', 'glProgramUniform3fvEXT', 'glProgramUniform3iEXT',
  'glProgramUniform3ivEXT', 'glProgramUniform4fEXT', 'glProgramUniform4fvEXT',
  'glProgramUniform4iEXT', 'glProgramUniform4ivEXT',
  'glProgramUniformMatrix2fvEXT', 'glProgramUniformMatrix3fvEXT',
  'glProgramUniformMatrix4fvEXT', 'glUseProgramStagesEXT',
  'glValidateProgramPipelineEXT', 'glProgramUniform1uiEXT',
  'glProgramUniform2uiEXT', 'glProgramUniform3uiEXT', 'glProgramUniform4uiEXT',
  'glProgramUniform1uivEXT', 'glProgramUniform2uivEXT',
  'glProgramUniform3uivEXT', 'glProgramUniform4uivEXT',
  'glProgramUniformMatrix2x3fvEXT', 'glProgramUniformMatrix3x2fvEXT',
  'glProgramUniformMatrix2x4fvEXT', 'glProgramUniformMatrix4x2fvEXT',
  'glProgramUniformMatrix3x4fvEXT', 'glProgramUniformMatrix4x3fvEXT',
  'glFramebufferFetchBarrierEXT', 'glFramebufferPixelLocalStorageSizeEXT',
  'glGetFramebufferPixelLocalStorageSizeEXT', 'glClearPixelLocalStorageuiEXT',
  'glTexPageCommitmentEXT', 'glPatchParameteriEXT', 'glTexParameterIivEXT',
  'glTexParameterIuivEXT', 'glGetTexParameterIivEXT',
  'glGetTexParameterIuivEXT', 'glSamplerParameterIivEXT',
  'glSamplerParameterIuivEXT', 'glGetSamplerParameterIivEXT',
  'glGetSamplerParameterIuivEXT', 'glTexBufferEXT', 'glTexBufferRangeEXT',
  'glTexStorage1DEXT', 'glTexStorage2DEXT', 'glTexStorage3DEXT',
  'glTextureStorage1DEXT', 'glTextureStorage2DEXT', 'glTextureStorage3DEXT',
  'TexStorageAttribs2DEXT', 'TexStorageAttribs3DEXT', 'glTextureViewEXT',
  'glAcquireKeyedMutexWin32EXT', 'glReleaseKeyedMutexWin32EXT',
  'glWindowRectanglesEXT', 'glGetTextureHandleIMG',
  'glGetTextureSamplerHandleIMG', 'glUniformHandleui64IMG',
  'glUniformHandleui64vIMG', 'glProgramUniformHandleui64IMG',
  'glProgramUniformHandleui64vIMG', 'glFramebufferTexture2DDownsampleIMG',
  'glFramebufferTextureLayerDownsampleIMG',
  'glRenderbufferStorageMultisampleIMG', 'glFramebufferTexture2DMultisampleIMG',
  'glApplyFramebufferAttachmentCMAAINTEL', 'glBeginPerfQueryINTEL',
  'glCreatePerfQueryINTEL', 'glDeletePerfQueryINTEL', 'glEndPerfQueryINTEL',
  'glGetFirstPerfQueryIdINTEL', 'glGetNextPerfQueryIdINTEL',
  'glGetPerfCounterInfoINTEL', 'glGetPerfQueryDataINTEL',
  'glGetPerfQueryIdByNameINTEL', 'glGetPerfQueryInfoINTEL',
  'glFramebufferParameteriMESA', 'glGetFramebufferParameterivMESA',
  'glGetTextureHandleNV', 'glGetTextureSamplerHandleNV',
  'glMakeTextureHandleResidentNV', 'glMakeTextureHandleNonResidentNV',
  'glGetImageHandleNV', 'glMakeImageHandleResidentNV',
  'glMakeImageHandleNonResidentNV', 'glUniformHandleui64NV',
  'glUniformHandleui64vNV', 'glProgramUniformHandleui64NV',
  'glProgramUniformHandleui64vNV', 'glIsTextureHandleResidentNV',
  'glIsImageHandleResidentNV', 'glBlendParameteriNV', 'glBlendBarrierNV',
  'glViewportPositionWScaleNV', 'glBeginConditionalRenderNV',
  'glEndConditionalRenderNV', 'glSubpixelPrecisionBiasNV',
  'glConservativeRasterParameteriNV', 'glCopyBufferSubDataNV',
  'glCoverageMaskNV', 'glCoverageOperationNV', 'glDrawBuffersNV',
  'glDrawArraysInstancedNV', 'glDrawElementsInstancedNV', 'glDrawVkImageNV',
  'glGetVkProcAddrNV', 'glWaitVkSemaphoreNV', 'glSignalVkSemaphoreNV',
  'glSignalVkFenceNV', 'glDeleteFencesNV', 'glGenFencesNV', 'glIsFenceNV',
  'glTestFenceNV', 'glGetFenceivNV', 'glFinishFenceNV', 'glSetFenceNV',
  'glFragmentCoverageColorNV', 'glBlitFramebufferNV',
  'glCoverageModulationTableNV', 'glGetCoverageModulationTableNV',
  'glCoverageModulationNV', 'glRenderbufferStorageMultisampleNV',
  'glUniform1i64NV', 'glUniform2i64NV', 'glUniform3i64NV', 'glUniform4i64NV',
  'glUniform1i64vNV', 'glUniform2i64vNV', 'glUniform3i64vNV',
  'glUniform4i64vNV', 'glUniform1ui64NV', 'glUniform2ui64NV',
  'glUniform3ui64NV', 'glUniform4ui64NV', 'glUniform1ui64vNV',
  'glUniform2ui64vNV', 'glUniform3ui64vNV', 'glUniform4ui64vNV',
  'glGetUniformi64vNV', 'glProgramUniform1i64NV', 'glProgramUniform2i64NV',
  'glProgramUniform3i64NV', 'glProgramUniform4i64NV',
  'glProgramUniform1i64vNV', 'glProgramUniform2i64vNV',
  'glProgramUniform3i64vNV', 'glProgramUniform4i64vNV',
  'glProgramUniform1ui64NV', 'glProgramUniform2ui64NV',
  'glProgramUniform3ui64NV', 'glProgramUniform4ui64NV',
  'glProgramUniform1ui64vNV', 'glProgramUniform2ui64vNV',
  'glProgramUniform3ui64vNV', 'glProgramUniform4ui64vNV',
  'glVertexAttribDivisorNV', 'glGetInternalformatSampleivNV',
  'glGetMemoryObjectDetachedResourcesuivNV', 'glResetMemoryObjectParameterNV',
  'glTexAttachMemoryNV', 'glBufferAttachMemoryNV', 'glTextureAttachMemoryNV',
  'glNamedBufferAttachMemoryNV', 'glBufferPageCommitmentMemNV',
  'glTexPageCommitmentMemNV', 'glNamedBufferPageCommitmentMemNV',
  'glTexturePageCommitmentMemNV', 'glDrawMeshTasksNV',
  'glDrawMeshTasksIndirectNV', 'glMultiDrawMeshTasksIndirectNV',
  'glMultiDrawMeshTasksIndirectCountNV', 'glUniformMatrix2x3fvNV',
  'glUniformMatrix3x2fvNV', 'glUniformMatrix2x4fvNV', 'glUniformMatrix4x2fvNV',
  'glUniformMatrix3x4fvNV', 'glUniformMatrix4x3fvNV', 'glGenPathsNV',
  'glDeletePathsNV', 'glIsPathNV', 'glPathCommandsNV', 'glPathCoordsNV',
  'glPathSubCommandsNV', 'glPathSubCoordsNV', 'glPathStringNV',
  'glPathGlyphsNV', 'glPathGlyphRangeNV', 'glWeightPathsNV', 'glCopyPathNV',
  'glInterpolatePathsNV', 'glTransformPathNV', 'glPathParameterivNV',
  'glPathParameteriNV', 'glPathParameterfvNV', 'glPathParameterfNV',
  'glPathDashArrayNV', 'glPathStencilFuncNV', 'glPathStencilDepthOffsetNV',
  'glStencilFillPathNV', 'glStencilStrokePathNV',
  'glStencilFillPathInstancedNV', 'glStencilStrokePathInstancedNV',
  'glPathCoverDepthFuncNV', 'glCoverFillPathNV', 'glCoverStrokePathNV',
  'glCoverFillPathInstancedNV', 'glCoverStrokePathInstancedNV',
  'glGetPathParameterivNV', 'glGetPathParameterfvNV', 'glGetPathCommandsNV',
  'glGetPathCoordsNV', 'glGetPathDashArrayNV', 'glGetPathMetricsNV',
  'glGetPathMetricRangeNV', 'glGetPathSpacingNV', 'glIsPointInFillPathNV',
  'glIsPointInStrokePathNV', 'glGetPathLengthNV', 'glPointAlongPathNV',
  'glMatrixLoad3x2fNV', 'glMatrixLoad3x3fNV', 'glMatrixLoadTranspose3x3fNV',
  'glMatrixMult3x2fNV', 'glMatrixMult3x3fNV', 'glMatrixMultTranspose3x3fNV',
  'glStencilThenCoverFillPathNV', 'glStencilThenCoverStrokePathNV',
  'glStencilThenCoverFillPathInstancedNV',
  'glStencilThenCoverStrokePathInstancedNV', 'glPathGlyphIndexRangeNV',
  'glPathGlyphIndexArrayNV', 'glPathMemoryGlyphIndexArrayNV',
  'glProgramPathFragmentInputGenNV', 'glGetProgramResourcefvNV',
  'glMatrixFrustumEXT', 'glMatrixLoadIdentityEXT', 'glMatrixLoadTransposefEXT',
  'glMatrixLoadTransposedEXT', 'glMatrixLoadfEXT', 'glMatrixLoaddEXT',
  'glMatrixMultTransposefEXT', 'glMatrixMultTransposedEXT', 'glMatrixMultfEXT',
  'glMatrixMultdEXT', 'glMatrixOrthoEXT', 'glMatrixPopEXT', 'glMatrixPushEXT',
  'glMatrixRotatefEXT', 'glMatrixRotatedEXT', 'glMatrixScalefEXT',
  'glMatrixScaledEXT', 'glMatrixTranslatefEXT', 'glMatrixTranslatedEXT',
  'glPolygonModeNV', 'glReadBufferNV', 'glFramebufferSampleLocationsfvNV',
  'glNamedFramebufferSampleLocationsfvNV', 'glResolveDepthValuesNV',
  'glScissorExclusiveNV', 'glScissorExclusiveArrayvNV',
  'glBindShadingRateImageNV', 'glGetShadingRateImagePaletteNV',
  'glGetShadingRateSampleLocationivNV', 'glShadingRateImagePaletteNV',
  'glShadingRateSampleOrderNV', 'glShadingRateSampleOrderCustomNV',
  'glCreateSemaphoresNV', 'glSemaphoreParameterivNV',
  'glGetSemaphoreParameterivNV', 'glViewportArrayvNV', 'glViewportIndexedfNV',
  'glViewportIndexedfvNV', 'glScissorArrayvNV', 'glScissorIndexedNV',
  'glScissorIndexedvNV', 'glDepthRangeArrayfvNV', 'glDepthRangeIndexedfNV',
  'glGetFloati_vNV', 'glEnableiNV', 'glDisableiNV', 'glIsEnablediNV',
  'glViewportSwizzleNV', 'glFramebufferTextureMultiviewOVR',
  'glFramebufferTextureMultisampleMultiviewOVR', 'glAlphaFuncQCOM',
  'glGetDriverControlsQCOM', 'glGetDriverControlStringQCOM',
  'glEnableDriverControlQCOM', 'glDisableDriverControlQCOM',
  'glExtGetTexturesQCOM', 'glExtGetBuffersQCOM', 'glExtGetRenderbuffersQCOM',
  'glExtGetFramebuffersQCOM', 'glExtGetTexLevelParameterivQCOM',
  'glExtTexObjectStateOverrideiQCOM', 'glExtGetTexSubImageQCOM',
  'glExtGetBufferPointervQCOM', 'glExtGetShadersQCOM', 'glExtGetProgramsQCOM',
  'glExtIsProgramBinaryQCOM', 'glExtGetProgramBinarySourceQCOM',
  'glExtrapolateTex2DQCOM', 'glFramebufferFoveationConfigQCOM',
  'glFramebufferFoveationParametersQCOM', 'glTexEstimateMotionQCOM',
  'glTexEstimateMotionRegionsQCOM', 'glFramebufferFetchBarrierQCOM',
  'glShadingRateQCOM', 'glTextureFoveationParametersQCOM', 'glStartTilingQCOM',
  'glEndTilingQCOM', '__gles2_gl2ext_h_', 'GL_KHR_blend_equation_advanced',
  'GL_MULTIPLY_KHR', 'GL_SCREEN_KHR', 'GL_OVERLAY_KHR', 'GL_DARKEN_KHR',
  'GL_LIGHTEN_KHR', 'GL_COLORDODGE_KHR', 'GL_COLORBURN_KHR',
  'GL_HARDLIGHT_KHR', 'GL_SOFTLIGHT_KHR', 'GL_DIFFERENCE_KHR',
  'GL_EXCLUSION_KHR', 'GL_HSL_HUE_KHR', 'GL_HSL_SATURATION_KHR',
  'GL_HSL_COLOR_KHR', 'GL_HSL_LUMINOSITY_KHR',
  'GL_KHR_blend_equation_advanced_coherent', 'GL_BLEND_ADVANCED_COHERENT_KHR',
  'GL_KHR_context_flush_control', 'GL_CONTEXT_RELEASE_BEHAVIOR_KHR',
  'GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR', 'GL_KHR_debug', 'GL_SAMPLER',
  'GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR', 'GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR',
  'GL_DEBUG_CALLBACK_FUNCTION_KHR', 'GL_DEBUG_CALLBACK_USER_PARAM_KHR',
  'GL_DEBUG_SOURCE_API_KHR', 'GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR',
  'GL_DEBUG_SOURCE_SHADER_COMPILER_KHR', 'GL_DEBUG_SOURCE_THIRD_PARTY_KHR',
  'GL_DEBUG_SOURCE_APPLICATION_KHR', 'GL_DEBUG_SOURCE_OTHER_KHR',
  'GL_DEBUG_TYPE_ERROR_KHR', 'GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR',
  'GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR', 'GL_DEBUG_TYPE_PORTABILITY_KHR',
  'GL_DEBUG_TYPE_PERFORMANCE_KHR', 'GL_DEBUG_TYPE_OTHER_KHR',
  'GL_DEBUG_TYPE_MARKER_KHR', 'GL_DEBUG_TYPE_PUSH_GROUP_KHR',
  'GL_DEBUG_TYPE_POP_GROUP_KHR', 'GL_DEBUG_SEVERITY_NOTIFICATION_KHR',
  'GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR', 'GL_DEBUG_GROUP_STACK_DEPTH_KHR',
  'GL_BUFFER_KHR', 'GL_SHADER_KHR', 'GL_PROGRAM_KHR', 'GL_VERTEX_ARRAY_KHR',
  'GL_QUERY_KHR', 'GL_PROGRAM_PIPELINE_KHR', 'GL_SAMPLER_KHR',
  'GL_MAX_LABEL_LENGTH_KHR', 'GL_MAX_DEBUG_MESSAGE_LENGTH_KHR',
  'GL_MAX_DEBUG_LOGGED_MESSAGES_KHR', 'GL_DEBUG_LOGGED_MESSAGES_KHR',
  'GL_DEBUG_SEVERITY_HIGH_KHR', 'GL_DEBUG_SEVERITY_MEDIUM_KHR',
  'GL_DEBUG_SEVERITY_LOW_KHR', 'GL_DEBUG_OUTPUT_KHR',
  'GL_CONTEXT_FLAG_DEBUG_BIT_KHR', 'GL_STACK_OVERFLOW_KHR',
  'GL_STACK_UNDERFLOW_KHR', 'GL_KHR_no_error',
  'GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR', 'GL_KHR_parallel_shader_compile',
  'GL_MAX_SHADER_COMPILER_THREADS_KHR', 'GL_COMPLETION_STATUS_KHR',
  'GL_KHR_robust_buffer_access_behavior', 'GL_KHR_robustness',
  'GL_CONTEXT_ROBUST_ACCESS_KHR', 'GL_LOSE_CONTEXT_ON_RESET_KHR',
  'GL_GUILTY_CONTEXT_RESET_KHR', 'GL_INNOCENT_CONTEXT_RESET_KHR',
  'GL_UNKNOWN_CONTEXT_RESET_KHR', 'GL_RESET_NOTIFICATION_STRATEGY_KHR',
  'GL_NO_RESET_NOTIFICATION_KHR', 'GL_CONTEXT_LOST_KHR',
  'GL_KHR_shader_subgroup', 'GL_SUBGROUP_SIZE_KHR',
  'GL_SUBGROUP_SUPPORTED_STAGES_KHR', 'GL_SUBGROUP_SUPPORTED_FEATURES_KHR',
  'GL_SUBGROUP_QUAD_ALL_STAGES_KHR', 'GL_SUBGROUP_FEATURE_BASIC_BIT_KHR',
  'GL_SUBGROUP_FEATURE_VOTE_BIT_KHR', 'GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR',
  'GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR', 'GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR',
  'GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR',
  'GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR', 'GL_SUBGROUP_FEATURE_QUAD_BIT_KHR',
  'GL_KHR_texture_compression_astc_hdr', 'GL_COMPRESSED_RGBA_ASTC_4x4_KHR',
  'GL_COMPRESSED_RGBA_ASTC_5x4_KHR', 'GL_COMPRESSED_RGBA_ASTC_5x5_KHR',
  'GL_COMPRESSED_RGBA_ASTC_6x5_KHR', 'GL_COMPRESSED_RGBA_ASTC_6x6_KHR',
  'GL_COMPRESSED_RGBA_ASTC_8x5_KHR', 'GL_COMPRESSED_RGBA_ASTC_8x6_KHR',
  'GL_COMPRESSED_RGBA_ASTC_8x8_KHR', 'GL_COMPRESSED_RGBA_ASTC_10x5_KHR',
  'GL_COMPRESSED_RGBA_ASTC_10x6_KHR', 'GL_COMPRESSED_RGBA_ASTC_10x8_KHR',
  'GL_COMPRESSED_RGBA_ASTC_10x10_KHR', 'GL_COMPRESSED_RGBA_ASTC_12x10_KHR',
  'GL_COMPRESSED_RGBA_ASTC_12x12_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR',
  'GL_KHR_texture_compression_astc_ldr',
  'GL_KHR_texture_compression_astc_sliced_3d', 'GL_OES_EGL_image',
  'GL_OES_EGL_image_external', 'GL_TEXTURE_EXTERNAL_OES',
  'GL_TEXTURE_BINDING_EXTERNAL_OES', 'GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES',
  'GL_SAMPLER_EXTERNAL_OES', 'GL_OES_EGL_image_external_essl3',
  'GL_OES_compressed_ETC1_RGB8_sub_texture',
  'GL_OES_compressed_ETC1_RGB8_texture', 'GL_ETC1_RGB8_OES',
  'GL_OES_compressed_paletted_texture', 'GL_PALETTE4_RGB8_OES',
  'GL_PALETTE4_RGBA8_OES', 'GL_PALETTE4_R5_G6_B5_OES', 'GL_PALETTE4_RGBA4_OES',
  'GL_PALETTE4_RGB5_A1_OES', 'GL_PALETTE8_RGB8_OES', 'GL_PALETTE8_RGBA8_OES',
  'GL_PALETTE8_R5_G6_B5_OES', 'GL_PALETTE8_RGBA4_OES',
  'GL_PALETTE8_RGB5_A1_OES', 'GL_OES_copy_image', 'GL_OES_depth24',
  'GL_DEPTH_COMPONENT24_OES', 'GL_OES_depth32', 'GL_DEPTH_COMPONENT32_OES',
  'GL_OES_depth_texture', 'GL_OES_draw_buffers_indexed', 'GL_MIN', 'GL_MAX',
  'GL_OES_draw_elements_base_vertex', 'GL_OES_element_index_uint',
  'GL_OES_fbo_render_mipmap', 'GL_OES_fragment_precision_high',
  'GL_OES_geometry_point_size', 'GL_OES_geometry_shader',
  'GL_GEOMETRY_SHADER_OES', 'GL_GEOMETRY_SHADER_BIT_OES',
  'GL_GEOMETRY_LINKED_VERTICES_OUT_OES', 'GL_GEOMETRY_LINKED_INPUT_TYPE_OES',
  'GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES', 'GL_GEOMETRY_SHADER_INVOCATIONS_OES',
  'GL_LAYER_PROVOKING_VERTEX_OES', 'GL_LINES_ADJACENCY_OES',
  'GL_LINE_STRIP_ADJACENCY_OES', 'GL_TRIANGLES_ADJACENCY_OES',
  'GL_TRIANGLE_STRIP_ADJACENCY_OES', 'GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES',
  'GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES',
  'GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES',
  'GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES',
  'GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES',
  'GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES',
  'GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES',
  'GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES',
  'GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES',
  'GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES',
  'GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES', 'GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES',
  'GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES',
  'GL_FIRST_VERTEX_CONVENTION_OES', 'GL_LAST_VERTEX_CONVENTION_OES',
  'GL_UNDEFINED_VERTEX_OES', 'GL_PRIMITIVES_GENERATED_OES',
  'GL_FRAMEBUFFER_DEFAULT_LAYERS_OES', 'GL_MAX_FRAMEBUFFER_LAYERS_OES',
  'GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES',
  'GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES',
  'GL_REFERENCED_BY_GEOMETRY_SHADER_OES', 'GL_OES_get_program_binary',
  'GL_PROGRAM_BINARY_LENGTH_OES', 'GL_NUM_PROGRAM_BINARY_FORMATS_OES',
  'GL_PROGRAM_BINARY_FORMATS_OES', 'GL_OES_gpu_shader5', 'GL_OES_mapbuffer',
  'GL_WRITE_ONLY_OES', 'GL_BUFFER_ACCESS_OES', 'GL_BUFFER_MAPPED_OES',
  'GL_BUFFER_MAP_POINTER_OES', 'GL_OES_packed_depth_stencil',
  'GL_DEPTH_STENCIL_OES', 'GL_UNSIGNED_INT_24_8_OES', 'GL_DEPTH24_STENCIL8_OES',
  'GL_OES_primitive_bounding_box', 'GL_PRIMITIVE_BOUNDING_BOX_OES',
  'GL_OES_required_internalformat', 'GL_ALPHA8_OES', 'GL_DEPTH_COMPONENT16_OES',
  'GL_LUMINANCE4_ALPHA4_OES', 'GL_LUMINANCE8_ALPHA8_OES', 'GL_LUMINANCE8_OES',
  'GL_RGBA4_OES', 'GL_RGB5_A1_OES', 'GL_RGB565_OES', 'GL_RGB8_OES',
  'GL_RGBA8_OES', 'GL_RGB10_EXT', 'GL_RGB10_A2_EXT', 'GL_OES_rgb8_rgba8',
  'GL_OES_sample_shading', 'GL_SAMPLE_SHADING_OES',
  'GL_MIN_SAMPLE_SHADING_VALUE_OES', 'GL_OES_sample_variables',
  'GL_OES_shader_image_atomic', 'GL_OES_shader_io_blocks',
  'GL_OES_shader_multisample_interpolation',
  'GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES',
  'GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES',
  'GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES', 'GL_OES_standard_derivatives',
  'GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES', 'GL_OES_stencil1',
  'GL_STENCIL_INDEX1_OES', 'GL_OES_stencil4', 'GL_STENCIL_INDEX4_OES',
  'GL_OES_surfaceless_context', 'GL_FRAMEBUFFER_UNDEFINED_OES',
  'GL_OES_tessellation_point_size', 'GL_OES_tessellation_shader',
  'GL_PATCHES_OES', 'GL_PATCH_VERTICES_OES',
  'GL_TESS_CONTROL_OUTPUT_VERTICES_OES', 'GL_TESS_GEN_MODE_OES',
  'GL_TESS_GEN_SPACING_OES', 'GL_TESS_GEN_VERTEX_ORDER_OES',
  'GL_TESS_GEN_POINT_MODE_OES', 'GL_ISOLINES_OES', 'GL_QUADS_OES',
  'GL_FRACTIONAL_ODD_OES', 'GL_FRACTIONAL_EVEN_OES',
  'GL_MAX_PATCH_VERTICES_OES', 'GL_MAX_TESS_GEN_LEVEL_OES',
  'GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES',
  'GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES',
  'GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES',
  'GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES',
  'GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES',
  'GL_MAX_TESS_PATCH_COMPONENTS_OES',
  'GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES',
  'GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES',
  'GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES',
  'GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES',
  'GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES',
  'GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES',
  'GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES',
  'GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES',
  'GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES',
  'GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES',
  'GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES',
  'GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES',
  'GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES',
  'GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES',
  'GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES',
  'GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES',
  'GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES', 'GL_IS_PER_PATCH_OES',
  'GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES',
  'GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES', 'GL_TESS_CONTROL_SHADER_OES',
  'GL_TESS_EVALUATION_SHADER_OES', 'GL_TESS_CONTROL_SHADER_BIT_OES',
  'GL_TESS_EVALUATION_SHADER_BIT_OES', 'GL_OES_texture_3D',
  'GL_TEXTURE_WRAP_R_OES', 'GL_TEXTURE_3D_OES', 'GL_TEXTURE_BINDING_3D_OES',
  'GL_MAX_3D_TEXTURE_SIZE_OES', 'GL_SAMPLER_3D_OES',
  'GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES',
  'GL_OES_texture_border_clamp', 'GL_TEXTURE_BORDER_COLOR_OES',
  'GL_CLAMP_TO_BORDER_OES', 'GL_OES_texture_buffer', 'GL_TEXTURE_BUFFER_OES',
  'GL_TEXTURE_BUFFER_BINDING_OES', 'GL_MAX_TEXTURE_BUFFER_SIZE_OES',
  'GL_TEXTURE_BINDING_BUFFER_OES', 'GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES',
  'GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES', 'GL_SAMPLER_BUFFER_OES',
  'GL_INT_SAMPLER_BUFFER_OES', 'GL_UNSIGNED_INT_SAMPLER_BUFFER_OES',
  'GL_IMAGE_BUFFER_OES', 'GL_INT_IMAGE_BUFFER_OES',
  'GL_UNSIGNED_INT_IMAGE_BUFFER_OES', 'GL_TEXTURE_BUFFER_OFFSET_OES',
  'GL_TEXTURE_BUFFER_SIZE_OES', 'GL_OES_texture_compression_astc',
  'GL_COMPRESSED_RGBA_ASTC_3x3x3_OES', 'GL_COMPRESSED_RGBA_ASTC_4x3x3_OES',
  'GL_COMPRESSED_RGBA_ASTC_4x4x3_OES', 'GL_COMPRESSED_RGBA_ASTC_4x4x4_OES',
  'GL_COMPRESSED_RGBA_ASTC_5x4x4_OES', 'GL_COMPRESSED_RGBA_ASTC_5x5x4_OES',
  'GL_COMPRESSED_RGBA_ASTC_5x5x5_OES', 'GL_COMPRESSED_RGBA_ASTC_6x5x5_OES',
  'GL_COMPRESSED_RGBA_ASTC_6x6x5_OES', 'GL_COMPRESSED_RGBA_ASTC_6x6x6_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES',
  'GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES', 'GL_OES_texture_cube_map_array',
  'GL_TEXTURE_CUBE_MAP_ARRAY_OES', 'GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES',
  'GL_SAMPLER_CUBE_MAP_ARRAY_OES', 'GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES',
  'GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES',
  'GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES', 'GL_IMAGE_CUBE_MAP_ARRAY_OES',
  'GL_INT_IMAGE_CUBE_MAP_ARRAY_OES',
  'GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES', 'GL_OES_texture_float',
  'GL_OES_texture_float_linear', 'GL_OES_texture_half_float',
  'GL_HALF_FLOAT_OES', 'GL_OES_texture_half_float_linear',
  'GL_OES_texture_npot', 'GL_OES_texture_stencil8', 'GL_STENCIL_INDEX_OES',
  'GL_STENCIL_INDEX8_OES', 'GL_OES_texture_storage_multisample_2d_array',
  'GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES',
  'GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES',
  'GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES',
  'GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES',
  'GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES', 'GL_OES_texture_view',
  'GL_TEXTURE_VIEW_MIN_LEVEL_OES', 'GL_TEXTURE_VIEW_NUM_LEVELS_OES',
  'GL_TEXTURE_VIEW_MIN_LAYER_OES', 'GL_TEXTURE_VIEW_NUM_LAYERS_OES',
  'GL_TEXTURE_IMMUTABLE_LEVELS', 'GL_OES_vertex_array_object',
  'GL_VERTEX_ARRAY_BINDING_OES', 'GL_OES_vertex_half_float',
  'GL_OES_vertex_type_10_10_10_2', 'GL_UNSIGNED_INT_10_10_10_2_OES',
  'GL_INT_10_10_10_2_OES', 'GL_OES_viewport_array', 'GL_MAX_VIEWPORTS_OES',
  'GL_VIEWPORT_SUBPIXEL_BITS_OES', 'GL_VIEWPORT_BOUNDS_RANGE_OES',
  'GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES', 'GL_AMD_compressed_3DC_texture',
  'GL_3DC_X_AMD', 'GL_3DC_XY_AMD', 'GL_AMD_compressed_ATC_texture',
  'GL_ATC_RGB_AMD', 'GL_ATC_RGBA_EXPLICIT_ALPHA_AMD',
  'GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD',
  'GL_AMD_framebuffer_multisample_advanced',
  'GL_RENDERBUFFER_STORAGE_SAMPLES_AMD', 'GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD',
  'GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD',
  'GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD',
  'GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD', 'GL_SUPPORTED_MULTISAMPLE_MODES_AMD',
  'GL_AMD_performance_monitor', 'GL_COUNTER_TYPE_AMD', 'GL_COUNTER_RANGE_AMD',
  'GL_UNSIGNED_INT64_AMD', 'GL_PERCENTAGE_AMD',
  'GL_PERFMON_RESULT_AVAILABLE_AMD', 'GL_PERFMON_RESULT_SIZE_AMD',
  'GL_PERFMON_RESULT_AMD', 'GL_AMD_program_binary_Z400', 'GL_Z400_BINARY_AMD',
  'GL_ANDROID_extension_pack_es31a', 'GL_ANGLE_depth_texture',
  'GL_ANGLE_framebuffer_blit', 'GL_READ_FRAMEBUFFER_ANGLE',
  'GL_DRAW_FRAMEBUFFER_ANGLE', 'GL_DRAW_FRAMEBUFFER_BINDING_ANGLE',
  'GL_READ_FRAMEBUFFER_BINDING_ANGLE', 'GL_ANGLE_framebuffer_multisample',
  'GL_RENDERBUFFER_SAMPLES_ANGLE',
  'GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE', 'GL_MAX_SAMPLES_ANGLE',
  'GL_ANGLE_instanced_arrays', 'GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE',
  'GL_ANGLE_pack_reverse_row_order', 'GL_PACK_REVERSE_ROW_ORDER_ANGLE',
  'GL_ANGLE_program_binary', 'GL_PROGRAM_BINARY_ANGLE',
  'GL_ANGLE_texture_compression_dxt3', 'GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE',
  'GL_ANGLE_texture_compression_dxt5', 'GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE',
  'GL_ANGLE_texture_usage', 'GL_TEXTURE_USAGE_ANGLE',
  'GL_FRAMEBUFFER_ATTACHMENT_ANGLE', 'GL_ANGLE_translated_shader_source',
  'GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE', 'GL_APPLE_clip_distance',
  'GL_MAX_CLIP_DISTANCES_APPLE', 'GL_CLIP_DISTANCE0_APPLE',
  'GL_CLIP_DISTANCE1_APPLE', 'GL_CLIP_DISTANCE2_APPLE',
  'GL_CLIP_DISTANCE3_APPLE', 'GL_CLIP_DISTANCE4_APPLE',
  'GL_CLIP_DISTANCE5_APPLE', 'GL_CLIP_DISTANCE6_APPLE',
  'GL_CLIP_DISTANCE7_APPLE', 'GL_APPLE_color_buffer_packed_float',
  'GL_APPLE_copy_texture_levels', 'GL_APPLE_framebuffer_multisample',
  'GL_RENDERBUFFER_SAMPLES_APPLE', 'GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE',
  'GL_MAX_SAMPLES_APPLE', 'GL_READ_FRAMEBUFFER_APPLE',
  'GL_DRAW_FRAMEBUFFER_APPLE', 'GL_DRAW_FRAMEBUFFER_BINDING_APPLE',
  'GL_READ_FRAMEBUFFER_BINDING_APPLE', 'GL_APPLE_rgb_422', 'GL_RGB_422_APPLE',
  'GL_UNSIGNED_SHORT_8_8_APPLE', 'GL_UNSIGNED_SHORT_8_8_REV_APPLE',
  'GL_RGB_RAW_422_APPLE', 'GL_APPLE_sync', 'GL_SYNC_OBJECT_APPLE',
  'GL_MAX_SERVER_WAIT_TIMEOUT_APPLE', 'GL_OBJECT_TYPE_APPLE',
  'GL_SYNC_CONDITION_APPLE', 'GL_SYNC_STATUS_APPLE', 'GL_SYNC_FLAGS_APPLE',
  'GL_SYNC_FENCE_APPLE', 'GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE',
  'GL_UNSIGNALED_APPLE', 'GL_SIGNALED_APPLE', 'GL_ALREADY_SIGNALED_APPLE',
  'GL_TIMEOUT_EXPIRED_APPLE', 'GL_CONDITION_SATISFIED_APPLE',
  'GL_WAIT_FAILED_APPLE', 'GL_SYNC_FLUSH_COMMANDS_BIT_APPLE',
  'GL_TIMEOUT_IGNORED_APPLE', 'GL_APPLE_texture_format_BGRA8888',
  'GL_BGRA_EXT', 'GL_BGRA8_EXT', 'GL_APPLE_texture_max_level',
  'GL_TEXTURE_MAX_LEVEL_APPLE', 'GL_APPLE_texture_packed_float',
  'GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE', 'GL_UNSIGNED_INT_5_9_9_9_REV_APPLE',
  'GL_R11F_G11F_B10F_APPLE', 'GL_RGB9_E5_APPLE', 'GL_ARM_mali_program_binary',
  'GL_MALI_PROGRAM_BINARY_ARM', 'GL_ARM_mali_shader_binary',
  'GL_MALI_SHADER_BINARY_ARM', 'GL_ARM_rgba8', 'GL_ARM_shader_framebuffer_fetch',
  'GL_FETCH_PER_SAMPLE_ARM', 'GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM',
  'GL_ARM_shader_framebuffer_fetch_depth_stencil',
  'GL_ARM_texture_unnormalized_coordinates',
  'GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM', 'GL_DMP_program_binary',
  'GL_SMAPHS30_PROGRAM_BINARY_DMP', 'GL_SMAPHS_PROGRAM_BINARY_DMP',
  'GL_DMP_PROGRAM_BINARY_DMP', 'GL_DMP_shader_binary', 'GL_SHADER_BINARY_DMP',
  'GL_EXT_EGL_image_array', 'GL_EXT_EGL_image_storage',
  'GL_EXT_EGL_image_storage_compression', 'GL_SURFACE_COMPRESSION_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT', 'GL_EXT_YUV_target',
  'GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT', 'GL_EXT_base_instance',
  'GL_EXT_blend_func_extended', 'GL_SRC1_COLOR_EXT', 'GL_SRC1_ALPHA_EXT',
  'GL_ONE_MINUS_SRC1_COLOR_EXT', 'GL_ONE_MINUS_SRC1_ALPHA_EXT',
  'GL_SRC_ALPHA_SATURATE_EXT', 'GL_LOCATION_INDEX_EXT',
  'GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT', 'GL_EXT_blend_minmax', 'GL_MIN_EXT',
  'GL_MAX_EXT', 'GL_EXT_buffer_storage', 'GL_MAP_READ_BIT', 'GL_MAP_WRITE_BIT',
  'GL_MAP_PERSISTENT_BIT_EXT', 'GL_MAP_COHERENT_BIT_EXT',
  'GL_DYNAMIC_STORAGE_BIT_EXT', 'GL_CLIENT_STORAGE_BIT_EXT',
  'GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT', 'GL_BUFFER_IMMUTABLE_STORAGE_EXT',
  'GL_BUFFER_STORAGE_FLAGS_EXT', 'GL_EXT_clear_texture', 'GL_EXT_clip_control',
  'GL_LOWER_LEFT_EXT', 'GL_UPPER_LEFT_EXT', 'GL_NEGATIVE_ONE_TO_ONE_EXT',
  'GL_ZERO_TO_ONE_EXT', 'GL_CLIP_ORIGIN_EXT', 'GL_CLIP_DEPTH_MODE_EXT',
  'GL_EXT_clip_cull_distance', 'GL_MAX_CLIP_DISTANCES_EXT',
  'GL_MAX_CULL_DISTANCES_EXT', 'GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT',
  'GL_CLIP_DISTANCE0_EXT', 'GL_CLIP_DISTANCE1_EXT', 'GL_CLIP_DISTANCE2_EXT',
  'GL_CLIP_DISTANCE3_EXT', 'GL_CLIP_DISTANCE4_EXT', 'GL_CLIP_DISTANCE5_EXT',
  'GL_CLIP_DISTANCE6_EXT', 'GL_CLIP_DISTANCE7_EXT', 'GL_EXT_color_buffer_float',
  'GL_EXT_color_buffer_half_float', 'GL_RGBA16F_EXT', 'GL_RGB16F_EXT',
  'GL_RG16F_EXT', 'GL_R16F_EXT', 'GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT',
  'GL_UNSIGNED_NORMALIZED_EXT', 'GL_EXT_conservative_depth',
  'GL_EXT_copy_image', 'GL_EXT_debug_label', 'GL_PROGRAM_PIPELINE_OBJECT_EXT',
  'GL_PROGRAM_OBJECT_EXT', 'GL_SHADER_OBJECT_EXT', 'GL_BUFFER_OBJECT_EXT',
  'GL_QUERY_OBJECT_EXT', 'GL_VERTEX_ARRAY_OBJECT_EXT', 'GL_TRANSFORM_FEEDBACK',
  'GL_EXT_debug_marker', 'GL_EXT_depth_clamp', 'GL_DEPTH_CLAMP_EXT',
  'GL_EXT_discard_framebuffer', 'GL_COLOR_EXT', 'GL_DEPTH_EXT',
  'GL_STENCIL_EXT', 'GL_EXT_disjoint_timer_query', 'GL_QUERY_COUNTER_BITS_EXT',
  'GL_CURRENT_QUERY_EXT', 'GL_QUERY_RESULT_EXT',
  'GL_QUERY_RESULT_AVAILABLE_EXT', 'GL_TIME_ELAPSED_EXT', 'GL_TIMESTAMP_EXT',
  'GL_GPU_DISJOINT_EXT', 'GL_EXT_draw_buffers', 'GL_MAX_COLOR_ATTACHMENTS_EXT',
  'GL_MAX_DRAW_BUFFERS_EXT', 'GL_DRAW_BUFFER0_EXT', 'GL_DRAW_BUFFER1_EXT',
  'GL_DRAW_BUFFER2_EXT', 'GL_DRAW_BUFFER3_EXT', 'GL_DRAW_BUFFER4_EXT',
  'GL_DRAW_BUFFER5_EXT', 'GL_DRAW_BUFFER6_EXT', 'GL_DRAW_BUFFER7_EXT',
  'GL_DRAW_BUFFER8_EXT', 'GL_DRAW_BUFFER9_EXT', 'GL_DRAW_BUFFER10_EXT',
  'GL_DRAW_BUFFER11_EXT', 'GL_DRAW_BUFFER12_EXT', 'GL_DRAW_BUFFER13_EXT',
  'GL_DRAW_BUFFER14_EXT', 'GL_DRAW_BUFFER15_EXT', 'GL_COLOR_ATTACHMENT0_EXT',
  'GL_COLOR_ATTACHMENT1_EXT', 'GL_COLOR_ATTACHMENT2_EXT',
  'GL_COLOR_ATTACHMENT3_EXT', 'GL_COLOR_ATTACHMENT4_EXT',
  'GL_COLOR_ATTACHMENT5_EXT', 'GL_COLOR_ATTACHMENT6_EXT',
  'GL_COLOR_ATTACHMENT7_EXT', 'GL_COLOR_ATTACHMENT8_EXT',
  'GL_COLOR_ATTACHMENT9_EXT', 'GL_COLOR_ATTACHMENT10_EXT',
  'GL_COLOR_ATTACHMENT11_EXT', 'GL_COLOR_ATTACHMENT12_EXT',
  'GL_COLOR_ATTACHMENT13_EXT', 'GL_COLOR_ATTACHMENT14_EXT',
  'GL_COLOR_ATTACHMENT15_EXT', 'GL_EXT_draw_buffers_indexed',
  'GL_EXT_draw_elements_base_vertex', 'GL_EXT_draw_instanced',
  'GL_EXT_draw_transform_feedback', 'GL_EXT_external_buffer',
  'GL_EXT_float_blend', 'GL_EXT_geometry_point_size', 'GL_EXT_geometry_shader',
  'GL_GEOMETRY_SHADER_EXT', 'GL_GEOMETRY_SHADER_BIT_EXT',
  'GL_GEOMETRY_LINKED_VERTICES_OUT_EXT', 'GL_GEOMETRY_LINKED_INPUT_TYPE_EXT',
  'GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT', 'GL_GEOMETRY_SHADER_INVOCATIONS_EXT',
  'GL_LAYER_PROVOKING_VERTEX_EXT', 'GL_LINES_ADJACENCY_EXT',
  'GL_LINE_STRIP_ADJACENCY_EXT', 'GL_TRIANGLES_ADJACENCY_EXT',
  'GL_TRIANGLE_STRIP_ADJACENCY_EXT', 'GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT',
  'GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT',
  'GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT',
  'GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT',
  'GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT', 'GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT',
  'GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT',
  'GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT',
  'GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT',
  'GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT',
  'GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT', 'GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT',
  'GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT', 'GL_FIRST_VERTEX_CONVENTION_EXT',
  'GL_LAST_VERTEX_CONVENTION_EXT', 'GL_UNDEFINED_VERTEX_EXT',
  'GL_PRIMITIVES_GENERATED_EXT', 'GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT',
  'GL_MAX_FRAMEBUFFER_LAYERS_EXT', 'GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT',
  'GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT',
  'GL_REFERENCED_BY_GEOMETRY_SHADER_EXT', 'GL_EXT_gpu_shader5',
  'GL_EXT_instanced_arrays', 'GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT',
  'GL_EXT_map_buffer_range', 'GL_MAP_READ_BIT_EXT', 'GL_MAP_WRITE_BIT_EXT',
  'GL_MAP_INVALIDATE_RANGE_BIT_EXT', 'GL_MAP_INVALIDATE_BUFFER_BIT_EXT',
  'GL_MAP_FLUSH_EXPLICIT_BIT_EXT', 'GL_MAP_UNSYNCHRONIZED_BIT_EXT',
  'GL_EXT_memory_object', 'GL_TEXTURE_TILING_EXT',
  'GL_DEDICATED_MEMORY_OBJECT_EXT', 'GL_PROTECTED_MEMORY_OBJECT_EXT',
  'GL_NUM_TILING_TYPES_EXT', 'GL_TILING_TYPES_EXT', 'GL_OPTIMAL_TILING_EXT',
  'GL_LINEAR_TILING_EXT', 'GL_NUM_DEVICE_UUIDS_EXT', 'GL_DEVICE_UUID_EXT',
  'GL_DRIVER_UUID_EXT', 'GL_UUID_SIZE_EXT', 'GL_EXT_memory_object_fd',
  'GL_HANDLE_TYPE_OPAQUE_FD_EXT', 'GL_EXT_memory_object_win32',
  'GL_HANDLE_TYPE_OPAQUE_WIN32_EXT', 'GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT',
  'GL_DEVICE_LUID_EXT', 'GL_DEVICE_NODE_MASK_EXT', 'GL_LUID_SIZE_EXT',
  'GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT', 'GL_HANDLE_TYPE_D3D12_RESOURCE_EXT',
  'GL_HANDLE_TYPE_D3D11_IMAGE_EXT', 'GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT',
  'GL_EXT_multi_draw_arrays', 'GL_EXT_multi_draw_indirect',
  'GL_EXT_multisampled_compatibility', 'GL_MULTISAMPLE_EXT',
  'GL_SAMPLE_ALPHA_TO_ONE_EXT', 'GL_EXT_multisampled_render_to_texture',
  'GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT', 'GL_RENDERBUFFER_SAMPLES_EXT',
  'GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT', 'GL_MAX_SAMPLES_EXT',
  'GL_EXT_multisampled_render_to_texture2', 'GL_EXT_multiview_draw_buffers',
  'GL_COLOR_ATTACHMENT_EXT', 'GL_MULTIVIEW_EXT', 'GL_DRAW_BUFFER_EXT',
  'GL_READ_BUFFER_EXT', 'GL_MAX_MULTIVIEW_BUFFERS_EXT',
  'GL_EXT_multiview_tessellation_geometry_shader',
  'GL_EXT_multiview_texture_multisample', 'GL_EXT_multiview_timer_query',
  'GL_EXT_occlusion_query_boolean', 'GL_ANY_SAMPLES_PASSED_EXT',
  'GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT', 'GL_EXT_polygon_offset_clamp',
  'GL_POLYGON_OFFSET_CLAMP_EXT', 'GL_EXT_post_depth_coverage',
  'GL_EXT_primitive_bounding_box', 'GL_PRIMITIVE_BOUNDING_BOX_EXT',
  'GL_EXT_protected_textures', 'GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT',
  'GL_TEXTURE_PROTECTED_EXT', 'GL_EXT_pvrtc_sRGB',
  'GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT', 'GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT',
  'GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT',
  'GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT',
  'GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG',
  'GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG', 'GL_EXT_raster_multisample',
  'GL_RASTER_MULTISAMPLE_EXT', 'GL_RASTER_SAMPLES_EXT',
  'GL_MAX_RASTER_SAMPLES_EXT', 'GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT',
  'GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT', 'GL_EFFECTIVE_RASTER_SAMPLES_EXT',
  'GL_EXT_read_format_bgra', 'GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT',
  'GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT', 'GL_EXT_render_snorm', 'GL_R8_SNORM',
  'GL_RG8_SNORM', 'GL_RGBA8_SNORM', 'GL_R16_SNORM_EXT', 'GL_RG16_SNORM_EXT',
  'GL_RGBA16_SNORM_EXT', 'GL_EXT_robustness', 'GL_GUILTY_CONTEXT_RESET_EXT',
  'GL_INNOCENT_CONTEXT_RESET_EXT', 'GL_UNKNOWN_CONTEXT_RESET_EXT',
  'GL_CONTEXT_ROBUST_ACCESS_EXT', 'GL_RESET_NOTIFICATION_STRATEGY_EXT',
  'GL_LOSE_CONTEXT_ON_RESET_EXT', 'GL_NO_RESET_NOTIFICATION_EXT',
  'GL_EXT_sRGB', 'GL_SRGB_EXT', 'GL_SRGB_ALPHA_EXT', 'GL_SRGB8_ALPHA8_EXT',
  'GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT', 'GL_EXT_sRGB_write_control',
  'GL_FRAMEBUFFER_SRGB_EXT', 'GL_EXT_semaphore', 'GL_LAYOUT_GENERAL_EXT',
  'GL_LAYOUT_COLOR_ATTACHMENT_EXT', 'GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT',
  'GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT', 'GL_LAYOUT_SHADER_READ_ONLY_EXT',
  'GL_LAYOUT_TRANSFER_SRC_EXT', 'GL_LAYOUT_TRANSFER_DST_EXT',
  'GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT',
  'GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT', 'GL_EXT_semaphore_fd',
  'GL_EXT_semaphore_win32', 'GL_HANDLE_TYPE_D3D12_FENCE_EXT',
  'GL_D3D12_FENCE_VALUE_EXT', 'GL_EXT_separate_shader_objects',
  'GL_ACTIVE_PROGRAM_EXT', 'GL_VERTEX_SHADER_BIT_EXT',
  'GL_FRAGMENT_SHADER_BIT_EXT', 'GL_ALL_SHADER_BITS_EXT',
  'GL_PROGRAM_SEPARABLE_EXT', 'GL_PROGRAM_PIPELINE_BINDING_EXT',
  'GL_EXT_shader_framebuffer_fetch', 'GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT',
  'GL_EXT_shader_framebuffer_fetch_non_coherent', 'GL_EXT_shader_group_vote',
  'GL_EXT_shader_implicit_conversions', 'GL_EXT_shader_integer_mix',
  'GL_EXT_shader_io_blocks', 'GL_EXT_shader_non_constant_global_initializers',
  'GL_EXT_shader_pixel_local_storage',
  'GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT',
  'GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT',
  'GL_SHADER_PIXEL_LOCAL_STORAGE_EXT', 'GL_EXT_shader_pixel_local_storage2',
  'GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT',
  'GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT',
  'GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT',
  'GL_EXT_shader_texture_lod', 'GL_EXT_shadow_samplers',
  'GL_TEXTURE_COMPARE_MODE_EXT', 'GL_TEXTURE_COMPARE_FUNC_EXT',
  'GL_COMPARE_REF_TO_TEXTURE_EXT', 'GL_SAMPLER_2D_SHADOW_EXT',
  'GL_EXT_sparse_texture', 'GL_TEXTURE_SPARSE_EXT',
  'GL_VIRTUAL_PAGE_SIZE_INDEX_EXT', 'GL_NUM_SPARSE_LEVELS_EXT',
  'GL_NUM_VIRTUAL_PAGE_SIZES_EXT', 'GL_VIRTUAL_PAGE_SIZE_X_EXT',
  'GL_VIRTUAL_PAGE_SIZE_Y_EXT', 'GL_VIRTUAL_PAGE_SIZE_Z_EXT',
  'GL_TEXTURE_2D_ARRAY', 'GL_TEXTURE_3D', 'GL_MAX_SPARSE_TEXTURE_SIZE_EXT',
  'GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT', 'GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT',
  'GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT', 'GL_EXT_sparse_texture2',
  'GL_EXT_tessellation_point_size', 'GL_EXT_tessellation_shader',
  'GL_PATCHES_EXT', 'GL_PATCH_VERTICES_EXT',
  'GL_TESS_CONTROL_OUTPUT_VERTICES_EXT', 'GL_TESS_GEN_MODE_EXT',
  'GL_TESS_GEN_SPACING_EXT', 'GL_TESS_GEN_VERTEX_ORDER_EXT',
  'GL_TESS_GEN_POINT_MODE_EXT', 'GL_ISOLINES_EXT', 'GL_QUADS_EXT',
  'GL_FRACTIONAL_ODD_EXT', 'GL_FRACTIONAL_EVEN_EXT', 'GL_MAX_PATCH_VERTICES_EXT',
  'GL_MAX_TESS_GEN_LEVEL_EXT', 'GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT',
  'GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT',
  'GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT',
  'GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT',
  'GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT', 'GL_MAX_TESS_PATCH_COMPONENTS_EXT',
  'GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT',
  'GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT',
  'GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT',
  'GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT',
  'GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT',
  'GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT',
  'GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT',
  'GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT',
  'GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT',
  'GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT',
  'GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT',
  'GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT',
  'GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT',
  'GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT',
  'GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT',
  'GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT',
  'GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED', 'GL_IS_PER_PATCH_EXT',
  'GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT',
  'GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT', 'GL_TESS_CONTROL_SHADER_EXT',
  'GL_TESS_EVALUATION_SHADER_EXT', 'GL_TESS_CONTROL_SHADER_BIT_EXT',
  'GL_TESS_EVALUATION_SHADER_BIT_EXT', 'GL_EXT_texture_border_clamp',
  'GL_TEXTURE_BORDER_COLOR_EXT', 'GL_CLAMP_TO_BORDER_EXT',
  'GL_EXT_texture_buffer', 'GL_TEXTURE_BUFFER_EXT',
  'GL_TEXTURE_BUFFER_BINDING_EXT', 'GL_MAX_TEXTURE_BUFFER_SIZE_EXT',
  'GL_TEXTURE_BINDING_BUFFER_EXT', 'GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT',
  'GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT', 'GL_SAMPLER_BUFFER_EXT',
  'GL_INT_SAMPLER_BUFFER_EXT', 'GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT',
  'GL_IMAGE_BUFFER_EXT', 'GL_INT_IMAGE_BUFFER_EXT',
  'GL_UNSIGNED_INT_IMAGE_BUFFER_EXT', 'GL_TEXTURE_BUFFER_OFFSET_EXT',
  'GL_TEXTURE_BUFFER_SIZE_EXT', 'GL_EXT_texture_compression_astc_decode_mode',
  'GL_TEXTURE_ASTC_DECODE_PRECISION_EXT', 'GL_EXT_texture_compression_bptc',
  'GL_COMPRESSED_RGBA_BPTC_UNORM_EXT', 'GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT',
  'GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT',
  'GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT', 'GL_EXT_texture_compression_dxt1',
  'GL_COMPRESSED_RGB_S3TC_DXT1_EXT', 'GL_COMPRESSED_RGBA_S3TC_DXT1_EXT',
  'GL_EXT_texture_compression_rgtc', 'GL_COMPRESSED_RED_RGTC1_EXT',
  'GL_COMPRESSED_SIGNED_RED_RGTC1_EXT', 'GL_COMPRESSED_RED_GREEN_RGTC2_EXT',
  'GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT',
  'GL_EXT_texture_compression_s3tc', 'GL_COMPRESSED_RGBA_S3TC_DXT3_EXT',
  'GL_COMPRESSED_RGBA_S3TC_DXT5_EXT', 'GL_EXT_texture_compression_s3tc_srgb',
  'GL_COMPRESSED_SRGB_S3TC_DXT1_EXT', 'GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT',
  'GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT',
  'GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT', 'GL_EXT_texture_cube_map_array',
  'GL_TEXTURE_CUBE_MAP_ARRAY_EXT', 'GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT',
  'GL_SAMPLER_CUBE_MAP_ARRAY_EXT', 'GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT',
  'GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT',
  'GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT', 'GL_IMAGE_CUBE_MAP_ARRAY_EXT',
  'GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT', 'GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT',
  'GL_EXT_texture_filter_anisotropic', 'GL_TEXTURE_MAX_ANISOTROPY_EXT',
  'GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT', 'GL_EXT_texture_filter_minmax',
  'GL_TEXTURE_REDUCTION_MODE_EXT', 'GL_WEIGHTED_AVERAGE_EXT',
  'GL_EXT_texture_format_BGRA8888', 'GL_EXT_texture_format_sRGB_override',
  'GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT', 'GL_EXT_texture_mirror_clamp_to_edge',
  'GL_MIRROR_CLAMP_TO_EDGE_EXT', 'GL_EXT_texture_norm16', 'GL_R16_EXT',
  'GL_RG16_EXT', 'GL_RGBA16_EXT', 'GL_RGB16_EXT', 'GL_RGB16_SNORM_EXT',
  'GL_EXT_texture_query_lod', 'GL_EXT_texture_rg', 'GL_RED_EXT', 'GL_RG_EXT',
  'GL_R8_EXT', 'GL_RG8_EXT', 'GL_EXT_texture_sRGB_R8', 'GL_SR8_EXT',
  'GL_EXT_texture_sRGB_RG8', 'GL_SRG8_EXT', 'GL_EXT_texture_sRGB_decode',
  'GL_TEXTURE_SRGB_DECODE_EXT', 'GL_DECODE_EXT', 'GL_SKIP_DECODE_EXT',
  'GL_EXT_texture_shadow_lod', 'GL_EXT_texture_storage',
  'GL_TEXTURE_IMMUTABLE_FORMAT_EXT', 'GL_ALPHA8_EXT', 'GL_LUMINANCE8_EXT',
  'GL_LUMINANCE8_ALPHA8_EXT', 'GL_RGBA32F_EXT', 'GL_RGB32F_EXT',
  'GL_ALPHA32F_EXT', 'GL_LUMINANCE32F_EXT', 'GL_LUMINANCE_ALPHA32F_EXT',
  'GL_ALPHA16F_EXT', 'GL_LUMINANCE16F_EXT', 'GL_LUMINANCE_ALPHA16F_EXT',
  'GL_R32F_EXT', 'GL_RG32F_EXT', 'GL_EXT_texture_storage_compression',
  'GL_NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT',
  'GL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT',
  'GL_EXT_texture_type_2_10_10_10_REV', 'GL_UNSIGNED_INT_2_10_10_10_REV_EXT',
  'GL_EXT_texture_view', 'GL_TEXTURE_VIEW_MIN_LEVEL_EXT',
  'GL_TEXTURE_VIEW_NUM_LEVELS_EXT', 'GL_TEXTURE_VIEW_MIN_LAYER_EXT',
  'GL_TEXTURE_VIEW_NUM_LAYERS_EXT', 'GL_EXT_unpack_subimage',
  'GL_UNPACK_ROW_LENGTH_EXT', 'GL_UNPACK_SKIP_ROWS_EXT',
  'GL_UNPACK_SKIP_PIXELS_EXT', 'GL_EXT_win32_keyed_mutex',
  'GL_EXT_window_rectangles', 'GL_INCLUSIVE_EXT', 'GL_EXCLUSIVE_EXT',
  'GL_WINDOW_RECTANGLE_EXT', 'GL_WINDOW_RECTANGLE_MODE_EXT',
  'GL_MAX_WINDOW_RECTANGLES_EXT', 'GL_NUM_WINDOW_RECTANGLES_EXT',
  'GL_FJ_shader_binary_GCCSO', 'GL_GCCSO_SHADER_BINARY_FJ',
  'GL_IMG_bindless_texture', 'GL_IMG_framebuffer_downsample',
  'GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG',
  'GL_NUM_DOWNSAMPLE_SCALES_IMG', 'GL_DOWNSAMPLE_SCALES_IMG',
  'GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG',
  'GL_IMG_multisampled_render_to_texture', 'GL_RENDERBUFFER_SAMPLES_IMG',
  'GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG', 'GL_MAX_SAMPLES_IMG',
  'GL_TEXTURE_SAMPLES_IMG', 'GL_IMG_program_binary', 'GL_SGX_PROGRAM_BINARY_IMG',
  'GL_IMG_read_format', 'GL_BGRA_IMG', 'GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG',
  'GL_IMG_shader_binary', 'GL_SGX_BINARY_IMG',
  'GL_IMG_texture_compression_pvrtc', 'GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG',
  'GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG', 'GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG',
  'GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG', 'GL_IMG_texture_compression_pvrtc2',
  'GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG', 'GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG',
  'GL_IMG_texture_filter_cubic', 'GL_CUBIC_IMG', 'GL_CUBIC_MIPMAP_NEAREST_IMG',
  'GL_CUBIC_MIPMAP_LINEAR_IMG', 'GL_INTEL_blackhole_render',
  'GL_BLACKHOLE_RENDER_INTEL', 'GL_INTEL_conservative_rasterization',
  'GL_CONSERVATIVE_RASTERIZATION_INTEL', 'GL_INTEL_framebuffer_CMAA',
  'GL_INTEL_performance_query', 'GL_PERFQUERY_SINGLE_CONTEXT_INTEL',
  'GL_PERFQUERY_GLOBAL_CONTEXT_INTEL', 'GL_PERFQUERY_WAIT_INTEL',
  'GL_PERFQUERY_FLUSH_INTEL', 'GL_PERFQUERY_DONOT_FLUSH_INTEL',
  'GL_PERFQUERY_COUNTER_EVENT_INTEL', 'GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL',
  'GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL',
  'GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL', 'GL_PERFQUERY_COUNTER_RAW_INTEL',
  'GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL',
  'GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL',
  'GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL',
  'GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL',
  'GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL',
  'GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL',
  'GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL',
  'GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL',
  'GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL',
  'GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL', 'GL_MESA_bgra', 'GL_BGR_EXT',
  'GL_MESA_framebuffer_flip_x', 'GL_FRAMEBUFFER_FLIP_X_MESA',
  'GL_MESA_framebuffer_flip_y', 'GL_FRAMEBUFFER_FLIP_Y_MESA',
  'GL_MESA_framebuffer_swap_xy', 'GL_FRAMEBUFFER_SWAP_XY_MESA',
  'GL_MESA_program_binary_formats', 'GL_PROGRAM_BINARY_FORMAT_MESA',
  'GL_MESA_shader_integer_functions',
  'GL_NVX_blend_equation_advanced_multi_draw_buffers',
  'GL_NV_bindless_texture', 'GL_NV_blend_equation_advanced',
  'GL_BLEND_OVERLAP_NV', 'GL_BLEND_PREMULTIPLIED_SRC_NV', 'GL_BLUE_NV',
  'GL_COLORBURN_NV', 'GL_COLORDODGE_NV', 'GL_CONJOINT_NV', 'GL_CONTRAST_NV',
  'GL_DARKEN_NV', 'GL_DIFFERENCE_NV', 'GL_DISJOINT_NV', 'GL_DST_ATOP_NV',
  'GL_DST_IN_NV', 'GL_DST_NV', 'GL_DST_OUT_NV', 'GL_DST_OVER_NV',
  'GL_EXCLUSION_NV', 'GL_GREEN_NV', 'GL_HARDLIGHT_NV', 'GL_HARDMIX_NV',
  'GL_HSL_COLOR_NV', 'GL_HSL_HUE_NV', 'GL_HSL_LUMINOSITY_NV',
  'GL_HSL_SATURATION_NV', 'GL_INVERT_OVG_NV', 'GL_INVERT_RGB_NV',
  'GL_LIGHTEN_NV', 'GL_LINEARBURN_NV', 'GL_LINEARDODGE_NV',
  'GL_LINEARLIGHT_NV', 'GL_MINUS_CLAMPED_NV', 'GL_MINUS_NV', 'GL_MULTIPLY_NV',
  'GL_OVERLAY_NV', 'GL_PINLIGHT_NV', 'GL_PLUS_CLAMPED_ALPHA_NV',
  'GL_PLUS_CLAMPED_NV', 'GL_PLUS_DARKER_NV', 'GL_PLUS_NV', 'GL_RED_NV',
  'GL_SCREEN_NV', 'GL_SOFTLIGHT_NV', 'GL_SRC_ATOP_NV', 'GL_SRC_IN_NV',
  'GL_SRC_NV', 'GL_SRC_OUT_NV', 'GL_SRC_OVER_NV', 'GL_UNCORRELATED_NV',
  'GL_VIVIDLIGHT_NV', 'GL_XOR_NV', 'GL_NV_blend_equation_advanced_coherent',
  'GL_BLEND_ADVANCED_COHERENT_NV', 'GL_NV_blend_minmax_factor',
  'GL_FACTOR_MIN_AMD', 'GL_FACTOR_MAX_AMD', 'GL_NV_clip_space_w_scaling',
  'GL_VIEWPORT_POSITION_W_SCALE_NV', 'GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV',
  'GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV', 'GL_NV_compute_shader_derivatives',
  'GL_NV_conditional_render', 'GL_QUERY_WAIT_NV', 'GL_QUERY_NO_WAIT_NV',
  'GL_QUERY_BY_REGION_WAIT_NV', 'GL_QUERY_BY_REGION_NO_WAIT_NV',
  'GL_NV_conservative_raster', 'GL_CONSERVATIVE_RASTERIZATION_NV',
  'GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV', 'GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV',
  'GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV', 'GL_NV_conservative_raster_pre_snap',
  'GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV',
  'GL_NV_conservative_raster_pre_snap_triangles',
  'GL_CONSERVATIVE_RASTER_MODE_NV', 'GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV',
  'GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV', 'GL_NV_copy_buffer',
  'GL_COPY_READ_BUFFER_NV', 'GL_COPY_WRITE_BUFFER_NV', 'GL_NV_coverage_sample',
  'GL_COVERAGE_COMPONENT_NV', 'GL_COVERAGE_COMPONENT4_NV',
  'GL_COVERAGE_ATTACHMENT_NV', 'GL_COVERAGE_BUFFERS_NV',
  'GL_COVERAGE_SAMPLES_NV', 'GL_COVERAGE_ALL_FRAGMENTS_NV',
  'GL_COVERAGE_EDGE_FRAGMENTS_NV', 'GL_COVERAGE_AUTOMATIC_NV',
  'GL_COVERAGE_BUFFER_BIT_NV', 'GL_NV_depth_nonlinear',
  'GL_DEPTH_COMPONENT16_NONLINEAR_NV', 'GL_NV_draw_buffers',
  'GL_MAX_DRAW_BUFFERS_NV', 'GL_DRAW_BUFFER0_NV', 'GL_DRAW_BUFFER1_NV',
  'GL_DRAW_BUFFER2_NV', 'GL_DRAW_BUFFER3_NV', 'GL_DRAW_BUFFER4_NV',
  'GL_DRAW_BUFFER5_NV', 'GL_DRAW_BUFFER6_NV', 'GL_DRAW_BUFFER7_NV',
  'GL_DRAW_BUFFER8_NV', 'GL_DRAW_BUFFER9_NV', 'GL_DRAW_BUFFER10_NV',
  'GL_DRAW_BUFFER11_NV', 'GL_DRAW_BUFFER12_NV', 'GL_DRAW_BUFFER13_NV',
  'GL_DRAW_BUFFER14_NV', 'GL_DRAW_BUFFER15_NV', 'GL_COLOR_ATTACHMENT0_NV',
  'GL_COLOR_ATTACHMENT1_NV', 'GL_COLOR_ATTACHMENT2_NV',
  'GL_COLOR_ATTACHMENT3_NV', 'GL_COLOR_ATTACHMENT4_NV',
  'GL_COLOR_ATTACHMENT5_NV', 'GL_COLOR_ATTACHMENT6_NV',
  'GL_COLOR_ATTACHMENT7_NV', 'GL_COLOR_ATTACHMENT8_NV',
  'GL_COLOR_ATTACHMENT9_NV', 'GL_COLOR_ATTACHMENT10_NV',
  'GL_COLOR_ATTACHMENT11_NV', 'GL_COLOR_ATTACHMENT12_NV',
  'GL_COLOR_ATTACHMENT13_NV', 'GL_COLOR_ATTACHMENT14_NV',
  'GL_COLOR_ATTACHMENT15_NV', 'GL_NV_draw_instanced', 'GL_NV_draw_vulkan_image',
  'GL_NV_explicit_attrib_location', 'GL_NV_fbo_color_attachments',
  'GL_MAX_COLOR_ATTACHMENTS_NV', 'GL_NV_fence', 'GL_ALL_COMPLETED_NV',
  'GL_FENCE_STATUS_NV', 'GL_FENCE_CONDITION_NV', 'GL_NV_fill_rectangle',
  'GL_FILL_RECTANGLE_NV', 'GL_NV_fragment_coverage_to_color',
  'GL_FRAGMENT_COVERAGE_TO_COLOR_NV', 'GL_FRAGMENT_COVERAGE_COLOR_NV',
  'GL_NV_fragment_shader_barycentric', 'GL_NV_fragment_shader_interlock',
  'GL_NV_framebuffer_blit', 'GL_READ_FRAMEBUFFER_NV', 'GL_DRAW_FRAMEBUFFER_NV',
  'GL_DRAW_FRAMEBUFFER_BINDING_NV', 'GL_READ_FRAMEBUFFER_BINDING_NV',
  'GL_NV_framebuffer_mixed_samples', 'GL_COVERAGE_MODULATION_TABLE_NV',
  'GL_COLOR_SAMPLES_NV', 'GL_DEPTH_SAMPLES_NV', 'GL_STENCIL_SAMPLES_NV',
  'GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV',
  'GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV', 'GL_COVERAGE_MODULATION_NV',
  'GL_COVERAGE_MODULATION_TABLE_SIZE_NV', 'GL_NV_framebuffer_multisample',
  'GL_RENDERBUFFER_SAMPLES_NV', 'GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV',
  'GL_MAX_SAMPLES_NV', 'GL_NV_generate_mipmap_sRGB',
  'GL_NV_geometry_shader_passthrough', 'GL_NV_gpu_shader5', 'GL_INT64_NV',
  'GL_UNSIGNED_INT64_NV', 'GL_INT8_NV', 'GL_INT8_VEC2_NV', 'GL_INT8_VEC3_NV',
  'GL_INT8_VEC4_NV', 'GL_INT16_NV', 'GL_INT16_VEC2_NV', 'GL_INT16_VEC3_NV',
  'GL_INT16_VEC4_NV', 'GL_INT64_VEC2_NV', 'GL_INT64_VEC3_NV',
  'GL_INT64_VEC4_NV', 'GL_UNSIGNED_INT8_NV', 'GL_UNSIGNED_INT8_VEC2_NV',
  'GL_UNSIGNED_INT8_VEC3_NV', 'GL_UNSIGNED_INT8_VEC4_NV', 'GL_UNSIGNED_INT16_NV',
  'GL_UNSIGNED_INT16_VEC2_NV', 'GL_UNSIGNED_INT16_VEC3_NV',
  'GL_UNSIGNED_INT16_VEC4_NV', 'GL_UNSIGNED_INT64_VEC2_NV',
  'GL_UNSIGNED_INT64_VEC3_NV', 'GL_UNSIGNED_INT64_VEC4_NV', 'GL_FLOAT16_NV',
  'GL_FLOAT16_VEC2_NV', 'GL_FLOAT16_VEC3_NV', 'GL_FLOAT16_VEC4_NV',
  'GL_PATCHES', 'GL_NV_image_formats', 'GL_NV_instanced_arrays',
  'GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV', 'GL_NV_internalformat_sample_query',
  'GL_TEXTURE_2D_MULTISAMPLE', 'GL_TEXTURE_2D_MULTISAMPLE_ARRAY',
  'GL_MULTISAMPLES_NV', 'GL_SUPERSAMPLE_SCALE_X_NV',
  'GL_SUPERSAMPLE_SCALE_Y_NV', 'GL_CONFORMANT_NV', 'GL_NV_memory_attachment',
  'GL_ATTACHED_MEMORY_OBJECT_NV', 'GL_ATTACHED_MEMORY_OFFSET_NV',
  'GL_MEMORY_ATTACHABLE_ALIGNMENT_NV', 'GL_MEMORY_ATTACHABLE_SIZE_NV',
  'GL_MEMORY_ATTACHABLE_NV', 'GL_DETACHED_MEMORY_INCARNATION_NV',
  'GL_DETACHED_TEXTURES_NV', 'GL_DETACHED_BUFFERS_NV',
  'GL_MAX_DETACHED_TEXTURES_NV', 'GL_MAX_DETACHED_BUFFERS_NV',
  'GL_NV_memory_object_sparse', 'GL_NV_mesh_shader', 'GL_MESH_SHADER_NV',
  'GL_TASK_SHADER_NV', 'GL_MAX_MESH_UNIFORM_BLOCKS_NV',
  'GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV', 'GL_MAX_MESH_IMAGE_UNIFORMS_NV',
  'GL_MAX_MESH_UNIFORM_COMPONENTS_NV', 'GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV',
  'GL_MAX_MESH_ATOMIC_COUNTERS_NV', 'GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV',
  'GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV', 'GL_MAX_TASK_UNIFORM_BLOCKS_NV',
  'GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV', 'GL_MAX_TASK_IMAGE_UNIFORMS_NV',
  'GL_MAX_TASK_UNIFORM_COMPONENTS_NV', 'GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV',
  'GL_MAX_TASK_ATOMIC_COUNTERS_NV', 'GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV',
  'GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV',
  'GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV', 'GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV',
  'GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV', 'GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV',
  'GL_MAX_MESH_OUTPUT_VERTICES_NV', 'GL_MAX_MESH_OUTPUT_PRIMITIVES_NV',
  'GL_MAX_TASK_OUTPUT_COUNT_NV', 'GL_MAX_DRAW_MESH_TASKS_COUNT_NV',
  'GL_MAX_MESH_VIEWS_NV', 'GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV',
  'GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV',
  'GL_MAX_MESH_WORK_GROUP_SIZE_NV', 'GL_MAX_TASK_WORK_GROUP_SIZE_NV',
  'GL_MESH_WORK_GROUP_SIZE_NV', 'GL_TASK_WORK_GROUP_SIZE_NV',
  'GL_MESH_VERTICES_OUT_NV', 'GL_MESH_PRIMITIVES_OUT_NV',
  'GL_MESH_OUTPUT_TYPE_NV', 'GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV',
  'GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV',
  'GL_REFERENCED_BY_MESH_SHADER_NV', 'GL_REFERENCED_BY_TASK_SHADER_NV',
  'GL_MESH_SHADER_BIT_NV', 'GL_TASK_SHADER_BIT_NV', 'GL_MESH_SUBROUTINE_NV',
  'GL_TASK_SUBROUTINE_NV', 'GL_MESH_SUBROUTINE_UNIFORM_NV',
  'GL_TASK_SUBROUTINE_UNIFORM_NV',
  'GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV',
  'GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV',
  'GL_NV_non_square_matrices', 'GL_FLOAT_MAT2x3_NV', 'GL_FLOAT_MAT2x4_NV',
  'GL_FLOAT_MAT3x2_NV', 'GL_FLOAT_MAT3x4_NV', 'GL_FLOAT_MAT4x2_NV',
  'GL_FLOAT_MAT4x3_NV', 'GL_NV_path_rendering', 'GL_PATH_FORMAT_SVG_NV',
  'GL_PATH_FORMAT_PS_NV', 'GL_STANDARD_FONT_NAME_NV', 'GL_SYSTEM_FONT_NAME_NV',
  'GL_FILE_NAME_NV', 'GL_PATH_STROKE_WIDTH_NV', 'GL_PATH_END_CAPS_NV',
  'GL_PATH_INITIAL_END_CAP_NV', 'GL_PATH_TERMINAL_END_CAP_NV',
  'GL_PATH_JOIN_STYLE_NV', 'GL_PATH_MITER_LIMIT_NV', 'GL_PATH_DASH_CAPS_NV',
  'GL_PATH_INITIAL_DASH_CAP_NV', 'GL_PATH_TERMINAL_DASH_CAP_NV',
  'GL_PATH_DASH_OFFSET_NV', 'GL_PATH_CLIENT_LENGTH_NV', 'GL_PATH_FILL_MODE_NV',
  'GL_PATH_FILL_MASK_NV', 'GL_PATH_FILL_COVER_MODE_NV',
  'GL_PATH_STROKE_COVER_MODE_NV', 'GL_PATH_STROKE_MASK_NV', 'GL_COUNT_UP_NV',
  'GL_COUNT_DOWN_NV', 'GL_PATH_OBJECT_BOUNDING_BOX_NV', 'GL_CONVEX_HULL_NV',
  'GL_BOUNDING_BOX_NV', 'GL_TRANSLATE_X_NV', 'GL_TRANSLATE_Y_NV',
  'GL_TRANSLATE_2D_NV', 'GL_TRANSLATE_3D_NV', 'GL_AFFINE_2D_NV',
  'GL_AFFINE_3D_NV', 'GL_TRANSPOSE_AFFINE_2D_NV', 'GL_TRANSPOSE_AFFINE_3D_NV',
  'GL_UTF8_NV', 'GL_UTF16_NV', 'GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV',
  'GL_PATH_COMMAND_COUNT_NV', 'GL_PATH_COORD_COUNT_NV',
  'GL_PATH_DASH_ARRAY_COUNT_NV', 'GL_PATH_COMPUTED_LENGTH_NV',
  'GL_PATH_FILL_BOUNDING_BOX_NV', 'GL_PATH_STROKE_BOUNDING_BOX_NV',
  'GL_SQUARE_NV', 'GL_ROUND_NV', 'GL_TRIANGULAR_NV', 'GL_BEVEL_NV',
  'GL_MITER_REVERT_NV', 'GL_MITER_TRUNCATE_NV', 'GL_SKIP_MISSING_GLYPH_NV',
  'GL_USE_MISSING_GLYPH_NV', 'GL_PATH_ERROR_POSITION_NV',
  'GL_ACCUM_ADJACENT_PAIRS_NV', 'GL_ADJACENT_PAIRS_NV', 'GL_FIRST_TO_REST_NV',
  'GL_PATH_GEN_MODE_NV', 'GL_PATH_GEN_COEFF_NV', 'GL_PATH_GEN_COMPONENTS_NV',
  'GL_PATH_STENCIL_FUNC_NV', 'GL_PATH_STENCIL_REF_NV',
  'GL_PATH_STENCIL_VALUE_MASK_NV', 'GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV',
  'GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV', 'GL_PATH_COVER_DEPTH_FUNC_NV',
  'GL_PATH_DASH_OFFSET_RESET_NV', 'GL_MOVE_TO_RESETS_NV',
  'GL_MOVE_TO_CONTINUES_NV', 'GL_CLOSE_PATH_NV', 'GL_MOVE_TO_NV',
  'GL_RELATIVE_MOVE_TO_NV', 'GL_LINE_TO_NV', 'GL_RELATIVE_LINE_TO_NV',
  'GL_HORIZONTAL_LINE_TO_NV', 'GL_RELATIVE_HORIZONTAL_LINE_TO_NV',
  'GL_VERTICAL_LINE_TO_NV', 'GL_RELATIVE_VERTICAL_LINE_TO_NV',
  'GL_QUADRATIC_CURVE_TO_NV', 'GL_RELATIVE_QUADRATIC_CURVE_TO_NV',
  'GL_CUBIC_CURVE_TO_NV', 'GL_RELATIVE_CUBIC_CURVE_TO_NV',
  'GL_SMOOTH_QUADRATIC_CURVE_TO_NV', 'GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV',
  'GL_SMOOTH_CUBIC_CURVE_TO_NV', 'GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV',
  'GL_SMALL_CCW_ARC_TO_NV', 'GL_RELATIVE_SMALL_CCW_ARC_TO_NV',
  'GL_SMALL_CW_ARC_TO_NV', 'GL_RELATIVE_SMALL_CW_ARC_TO_NV',
  'GL_LARGE_CCW_ARC_TO_NV', 'GL_RELATIVE_LARGE_CCW_ARC_TO_NV',
  'GL_LARGE_CW_ARC_TO_NV', 'GL_RELATIVE_LARGE_CW_ARC_TO_NV',
  'GL_RESTART_PATH_NV', 'GL_DUP_FIRST_CUBIC_CURVE_TO_NV',
  'GL_DUP_LAST_CUBIC_CURVE_TO_NV', 'GL_RECT_NV', 'GL_CIRCULAR_CCW_ARC_TO_NV',
  'GL_CIRCULAR_CW_ARC_TO_NV', 'GL_CIRCULAR_TANGENT_ARC_TO_NV', 'GL_ARC_TO_NV',
  'GL_RELATIVE_ARC_TO_NV', 'GL_BOLD_BIT_NV', 'GL_ITALIC_BIT_NV',
  'GL_GLYPH_WIDTH_BIT_NV', 'GL_GLYPH_HEIGHT_BIT_NV',
  'GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV', 'GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV',
  'GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV',
  'GL_GLYPH_VERTICAL_BEARING_X_BIT_NV', 'GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV',
  'GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV', 'GL_GLYPH_HAS_KERNING_BIT_NV',
  'GL_FONT_X_MIN_BOUNDS_BIT_NV', 'GL_FONT_Y_MIN_BOUNDS_BIT_NV',
  'GL_FONT_X_MAX_BOUNDS_BIT_NV', 'GL_FONT_Y_MAX_BOUNDS_BIT_NV',
  'GL_FONT_UNITS_PER_EM_BIT_NV', 'GL_FONT_ASCENDER_BIT_NV',
  'GL_FONT_DESCENDER_BIT_NV', 'GL_FONT_HEIGHT_BIT_NV',
  'GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV', 'GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV',
  'GL_FONT_UNDERLINE_POSITION_BIT_NV', 'GL_FONT_UNDERLINE_THICKNESS_BIT_NV',
  'GL_FONT_HAS_KERNING_BIT_NV', 'GL_ROUNDED_RECT_NV',
  'GL_RELATIVE_ROUNDED_RECT_NV', 'GL_ROUNDED_RECT2_NV',
  'GL_RELATIVE_ROUNDED_RECT2_NV', 'GL_ROUNDED_RECT4_NV',
  'GL_RELATIVE_ROUNDED_RECT4_NV', 'GL_ROUNDED_RECT8_NV',
  'GL_RELATIVE_ROUNDED_RECT8_NV', 'GL_RELATIVE_RECT_NV',
  'GL_FONT_GLYPHS_AVAILABLE_NV', 'GL_FONT_TARGET_UNAVAILABLE_NV',
  'GL_FONT_UNAVAILABLE_NV', 'GL_FONT_UNINTELLIGIBLE_NV', 'GL_CONIC_CURVE_TO_NV',
  'GL_RELATIVE_CONIC_CURVE_TO_NV', 'GL_FONT_NUM_GLYPH_INDICES_BIT_NV',
  'GL_STANDARD_FONT_FORMAT_NV', 'GL_PATH_PROJECTION_NV',
  'GL_PATH_MODELVIEW_NV', 'GL_PATH_MODELVIEW_STACK_DEPTH_NV',
  'GL_PATH_MODELVIEW_MATRIX_NV', 'GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV',
  'GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV', 'GL_PATH_PROJECTION_STACK_DEPTH_NV',
  'GL_PATH_PROJECTION_MATRIX_NV', 'GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV',
  'GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV', 'GL_FRAGMENT_INPUT_NV',
  'GL_NV_path_rendering_shared_edge', 'GL_SHARED_EDGE_NV',
  'GL_NV_pixel_buffer_object', 'GL_PIXEL_PACK_BUFFER_NV',
  'GL_PIXEL_UNPACK_BUFFER_NV', 'GL_PIXEL_PACK_BUFFER_BINDING_NV',
  'GL_PIXEL_UNPACK_BUFFER_BINDING_NV', 'GL_NV_polygon_mode',
  'GL_POLYGON_MODE_NV', 'GL_POLYGON_OFFSET_POINT_NV',
  'GL_POLYGON_OFFSET_LINE_NV', 'GL_POINT_NV', 'GL_LINE_NV', 'GL_FILL_NV',
  'GL_NV_primitive_shading_rate', 'GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV',
  'GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV', 'GL_NV_read_buffer',
  'GL_READ_BUFFER_NV', 'GL_NV_read_buffer_front', 'GL_NV_read_depth',
  'GL_NV_read_depth_stencil', 'GL_NV_read_stencil',
  'GL_NV_representative_fragment_test', 'GL_REPRESENTATIVE_FRAGMENT_TEST_NV',
  'GL_NV_sRGB_formats', 'GL_SLUMINANCE_NV', 'GL_SLUMINANCE_ALPHA_NV',
  'GL_SRGB8_NV', 'GL_SLUMINANCE8_NV', 'GL_SLUMINANCE8_ALPHA8_NV',
  'GL_COMPRESSED_SRGB_S3TC_DXT1_NV', 'GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV',
  'GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV',
  'GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV', 'GL_ETC1_SRGB8_NV',
  'GL_NV_sample_locations', 'GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV',
  'GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV',
  'GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV',
  'GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV', 'GL_SAMPLE_LOCATION_NV',
  'GL_PROGRAMMABLE_SAMPLE_LOCATION_NV',
  'GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV',
  'GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV',
  'GL_NV_sample_mask_override_coverage', 'GL_NV_scissor_exclusive',
  'GL_SCISSOR_TEST_EXCLUSIVE_NV', 'GL_SCISSOR_BOX_EXCLUSIVE_NV',
  'GL_NV_shader_atomic_fp16_vector', 'GL_NV_shader_noperspective_interpolation',
  'GL_NV_shader_subgroup_partitioned', 'GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV',
  'GL_NV_shader_texture_footprint', 'GL_NV_shading_rate_image',
  'GL_SHADING_RATE_IMAGE_NV', 'GL_SHADING_RATE_NO_INVOCATIONS_NV',
  'GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV',
  'GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV',
  'GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV',
  'GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV',
  'GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV',
  'GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV',
  'GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV',
  'GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV',
  'GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV',
  'GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV',
  'GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV',
  'GL_SHADING_RATE_IMAGE_BINDING_NV', 'GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV',
  'GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV',
  'GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV', 'GL_MAX_COARSE_FRAGMENT_SAMPLES_NV',
  'GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV',
  'GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV',
  'GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV', 'GL_NV_shadow_samplers_array',
  'GL_SAMPLER_2D_ARRAY_SHADOW_NV', 'GL_NV_shadow_samplers_cube',
  'GL_SAMPLER_CUBE_SHADOW_NV', 'GL_NV_stereo_view_rendering',
  'GL_NV_texture_border_clamp', 'GL_TEXTURE_BORDER_COLOR_NV',
  'GL_CLAMP_TO_BORDER_NV', 'GL_NV_texture_compression_s3tc_update',
  'GL_NV_texture_npot_2D_mipmap', 'GL_NV_timeline_semaphore',
  'GL_TIMELINE_SEMAPHORE_VALUE_NV', 'GL_SEMAPHORE_TYPE_NV',
  'GL_SEMAPHORE_TYPE_BINARY_NV', 'GL_SEMAPHORE_TYPE_TIMELINE_NV',
  'GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV', 'GL_NV_viewport_array',
  'GL_MAX_VIEWPORTS_NV', 'GL_VIEWPORT_SUBPIXEL_BITS_NV',
  'GL_VIEWPORT_BOUNDS_RANGE_NV', 'GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV',
  'GL_NV_viewport_array2', 'GL_NV_viewport_swizzle',
  'GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV', 'GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV',
  'GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV', 'GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV',
  'GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV', 'GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV',
  'GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV', 'GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV',
  'GL_VIEWPORT_SWIZZLE_X_NV', 'GL_VIEWPORT_SWIZZLE_Y_NV',
  'GL_VIEWPORT_SWIZZLE_Z_NV', 'GL_VIEWPORT_SWIZZLE_W_NV', 'GL_OVR_multiview',
  'GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR',
  'GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR', 'GL_MAX_VIEWS_OVR',
  'GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR', 'GL_OVR_multiview2',
  'GL_OVR_multiview_multisampled_render_to_texture',
  'GL_QCOM_YUV_texture_gather', 'GL_QCOM_alpha_test', 'GL_ALPHA_TEST_QCOM',
  'GL_ALPHA_TEST_FUNC_QCOM', 'GL_ALPHA_TEST_REF_QCOM', 'GL_QCOM_binning_control',
  'GL_BINNING_CONTROL_HINT_QCOM', 'GL_CPU_OPTIMIZED_QCOM',
  'GL_GPU_OPTIMIZED_QCOM', 'GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM',
  'GL_QCOM_driver_control', 'GL_QCOM_extended_get', 'GL_TEXTURE_WIDTH_QCOM',
  'GL_TEXTURE_HEIGHT_QCOM', 'GL_TEXTURE_DEPTH_QCOM',
  'GL_TEXTURE_INTERNAL_FORMAT_QCOM', 'GL_TEXTURE_FORMAT_QCOM',
  'GL_TEXTURE_TYPE_QCOM', 'GL_TEXTURE_IMAGE_VALID_QCOM',
  'GL_TEXTURE_NUM_LEVELS_QCOM', 'GL_TEXTURE_TARGET_QCOM',
  'GL_TEXTURE_OBJECT_VALID_QCOM', 'GL_STATE_RESTORE', 'GL_QCOM_extended_get2',
  'GL_QCOM_frame_extrapolation', 'GL_QCOM_framebuffer_foveated',
  'GL_FOVEATION_ENABLE_BIT_QCOM', 'GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM',
  'GL_QCOM_motion_estimation', 'GL_MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM',
  'GL_MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM', 'GL_QCOM_perfmon_global_mode',
  'GL_PERFMON_GLOBAL_MODE_QCOM', 'GL_QCOM_render_shared_exponent',
  'GL_QCOM_shader_framebuffer_fetch_noncoherent',
  'GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM',
  'GL_QCOM_shader_framebuffer_fetch_rate', 'GL_QCOM_shading_rate',
  'GL_SHADING_RATE_QCOM', 'GL_SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM',
  'GL_SHADING_RATE_1X1_PIXELS_QCOM', 'GL_SHADING_RATE_1X2_PIXELS_QCOM',
  'GL_SHADING_RATE_2X1_PIXELS_QCOM', 'GL_SHADING_RATE_2X2_PIXELS_QCOM',
  'GL_SHADING_RATE_4X2_PIXELS_QCOM', 'GL_SHADING_RATE_4X4_PIXELS_QCOM',
  'GL_QCOM_texture_foveated', 'GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM',
  'GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM',
  'GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM',
  'GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM',
  'GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM', 'GL_QCOM_texture_foveated2',
  'GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM',
  'GL_QCOM_texture_foveated_subsampled_layout',
  'GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM',
  'GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM', 'GL_QCOM_tiled_rendering',
  'GL_COLOR_BUFFER_BIT0_QCOM', 'GL_COLOR_BUFFER_BIT1_QCOM',
  'GL_COLOR_BUFFER_BIT2_QCOM', 'GL_COLOR_BUFFER_BIT3_QCOM',
  'GL_COLOR_BUFFER_BIT4_QCOM', 'GL_COLOR_BUFFER_BIT5_QCOM',
  'GL_COLOR_BUFFER_BIT6_QCOM', 'GL_COLOR_BUFFER_BIT7_QCOM',
  'GL_DEPTH_BUFFER_BIT0_QCOM', 'GL_DEPTH_BUFFER_BIT1_QCOM',
  'GL_DEPTH_BUFFER_BIT2_QCOM', 'GL_DEPTH_BUFFER_BIT3_QCOM',
  'GL_DEPTH_BUFFER_BIT4_QCOM', 'GL_DEPTH_BUFFER_BIT5_QCOM',
  'GL_DEPTH_BUFFER_BIT6_QCOM', 'GL_DEPTH_BUFFER_BIT7_QCOM',
  'GL_STENCIL_BUFFER_BIT0_QCOM', 'GL_STENCIL_BUFFER_BIT1_QCOM',
  'GL_STENCIL_BUFFER_BIT2_QCOM', 'GL_STENCIL_BUFFER_BIT3_QCOM',
  'GL_STENCIL_BUFFER_BIT4_QCOM', 'GL_STENCIL_BUFFER_BIT5_QCOM',
  'GL_STENCIL_BUFFER_BIT6_QCOM', 'GL_STENCIL_BUFFER_BIT7_QCOM',
  'GL_MULTISAMPLE_BUFFER_BIT0_QCOM', 'GL_MULTISAMPLE_BUFFER_BIT1_QCOM',
  'GL_MULTISAMPLE_BUFFER_BIT2_QCOM', 'GL_MULTISAMPLE_BUFFER_BIT3_QCOM',
  'GL_MULTISAMPLE_BUFFER_BIT4_QCOM', 'GL_MULTISAMPLE_BUFFER_BIT5_QCOM',
  'GL_MULTISAMPLE_BUFFER_BIT6_QCOM', 'GL_MULTISAMPLE_BUFFER_BIT7_QCOM',
  'GL_QCOM_writeonly_rendering', 'GL_WRITEONLY_RENDERING_QCOM',
  'GL_VIV_shader_binary', 'GL_SHADER_BINARY_VIV', 'GLchar', 'GLenum',
  'GLboolean', 'GLbitfield', 'GLbyte', 'GLshort', 'GLint', 'GLint64',
  'GLsizei', 'GLubyte', 'GLushort', 'GLuint', 'GLfloat', 'GLclampf', 'GLfixed',
  'GLintptr', 'GLsizeiptr', 'GLclampx', 'void', 'GLvoid', 'GLsync',
  'GLeglImageOES', 'GLDEBUGPROCKHR', 'GLuint64'
]

